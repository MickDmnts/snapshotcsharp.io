{
  "api/MessagePack.ExtensionHeader.html": {
    "href": "api/MessagePack.ExtensionHeader.html",
    "title": "Struct ExtensionHeader | Snapshot",
    "keywords": "Struct ExtensionHeader Namespace MessagePack Assembly MessagePack.dll public struct ExtensionHeader : IEquatable<ExtensionHeader> Implements IEquatable<ExtensionHeader> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ExtensionHeader(sbyte, int) public ExtensionHeader(sbyte typeCode, int length) Parameters typeCode sbyte length int ExtensionHeader(sbyte, uint) public ExtensionHeader(sbyte typeCode, uint length) Parameters typeCode sbyte length uint Properties Length public readonly uint Length { get; } Property Value uint TypeCode public readonly sbyte TypeCode { get; } Property Value sbyte Methods Equals(ExtensionHeader) public bool Equals(ExtensionHeader other) Parameters other ExtensionHeader Returns bool"
  },
  "api/MessagePack.ExtensionResult.html": {
    "href": "api/MessagePack.ExtensionResult.html",
    "title": "Struct ExtensionResult | Snapshot",
    "keywords": "Struct ExtensionResult Namespace MessagePack Assembly MessagePack.dll public struct ExtensionResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ExtensionResult(sbyte, ReadOnlySequence<byte>) public ExtensionResult(sbyte typeCode, ReadOnlySequence<byte> data) Parameters typeCode sbyte data ReadOnlySequence<byte> ExtensionResult(sbyte, Memory<byte>) public ExtensionResult(sbyte typeCode, Memory<byte> data) Parameters typeCode sbyte data Memory<byte> Properties Data public readonly ReadOnlySequence<byte> Data { get; } Property Value ReadOnlySequence<byte> Header public ExtensionHeader Header { get; } Property Value ExtensionHeader TypeCode public readonly sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.FormatterNotRegisteredException.html": {
    "href": "api/MessagePack.FormatterNotRegisteredException.html",
    "title": "Class FormatterNotRegisteredException | Snapshot",
    "keywords": "Class FormatterNotRegisteredException Namespace MessagePack Assembly MessagePack.dll [Serializable] public class FormatterNotRegisteredException : MessagePackSerializationException, _Exception, ISerializable Inheritance object Exception MessagePackSerializationException FormatterNotRegisteredException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FormatterNotRegisteredException(SerializationInfo, StreamingContext) protected FormatterNotRegisteredException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext FormatterNotRegisteredException(string?) public FormatterNotRegisteredException(string? message) Parameters message string"
  },
  "api/MessagePack.FormatterResolverExtensions.html": {
    "href": "api/MessagePack.FormatterResolverExtensions.html",
    "title": "Class FormatterResolverExtensions | Snapshot",
    "keywords": "Class FormatterResolverExtensions Namespace MessagePack Assembly MessagePack.dll public static class FormatterResolverExtensions Inheritance object FormatterResolverExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFormatterDynamic(IFormatterResolver, Type) public static object? GetFormatterDynamic(this IFormatterResolver resolver, Type type) Parameters resolver IFormatterResolver type Type Returns object GetFormatterWithVerify<T>(IFormatterResolver) public static IMessagePackFormatter<T> GetFormatterWithVerify<T>(this IFormatterResolver resolver) Parameters resolver IFormatterResolver Returns IMessagePackFormatter<T> Type Parameters T"
  },
  "api/MessagePack.Formatters.ArrayFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ArrayFormatter-1.html",
    "title": "Class ArrayFormatter<T> | Snapshot",
    "keywords": "Class ArrayFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ArrayFormatter<T> : IMessagePackFormatter<T[]?> Type Parameters T Inheritance object ArrayFormatter<T> Implements IMessagePackFormatter<T[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T[] The deserialized value. Serialize(ref MessagePackWriter, T[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ArraySegmentFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ArraySegmentFormatter-1.html",
    "title": "Class ArraySegmentFormatter<T> | Snapshot",
    "keywords": "Class ArraySegmentFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ArraySegmentFormatter<T> : IMessagePackFormatter<ArraySegment<T>> Type Parameters T Inheritance object ArraySegmentFormatter<T> Implements IMessagePackFormatter<ArraySegment<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ArraySegment<T> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.ArraySegment{`0}. Returns ArraySegment<T> The deserialized value. Serialize(ref MessagePackWriter, ArraySegment<T>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ArraySegment<T> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ArraySegment<T> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.ArraySegment{`0}."
  },
  "api/MessagePack.Formatters.BigIntegerFormatter.html": {
    "href": "api/MessagePack.Formatters.BigIntegerFormatter.html",
    "title": "Class BigIntegerFormatter | Snapshot",
    "keywords": "Class BigIntegerFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class BigIntegerFormatter : IMessagePackFormatter<BigInteger> Inheritance object BigIntegerFormatter Implements IMessagePackFormatter<BigInteger> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<BigInteger> Instance Field Value IMessagePackFormatter<BigInteger> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public BigInteger Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type BigInteger. Returns BigInteger The deserialized value. Serialize(ref MessagePackWriter, BigInteger, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, BigInteger value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value BigInteger The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type BigInteger."
  },
  "api/MessagePack.Formatters.BitArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.BitArrayFormatter.html",
    "title": "Class BitArrayFormatter | Snapshot",
    "keywords": "Class BitArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class BitArrayFormatter : IMessagePackFormatter<BitArray?> Inheritance object BitArrayFormatter Implements IMessagePackFormatter<BitArray> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<BitArray?> Instance Field Value IMessagePackFormatter<BitArray> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public BitArray? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type BitArray. Returns BitArray The deserialized value. Serialize(ref MessagePackWriter, BitArray?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, BitArray? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value BitArray The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type BitArray."
  },
  "api/MessagePack.Formatters.BooleanArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.BooleanArrayFormatter.html",
    "title": "Class BooleanArrayFormatter | Snapshot",
    "keywords": "Class BooleanArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class BooleanArrayFormatter : IMessagePackFormatter<bool[]?> Inheritance object BooleanArrayFormatter Implements IMessagePackFormatter<bool[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly BooleanArrayFormatter Instance Field Value BooleanArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public bool[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns bool[] The deserialized value. Serialize(ref MessagePackWriter, bool[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, bool[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value bool[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.BooleanFormatter.html": {
    "href": "api/MessagePack.Formatters.BooleanFormatter.html",
    "title": "Class BooleanFormatter | Snapshot",
    "keywords": "Class BooleanFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class BooleanFormatter : IMessagePackFormatter<bool> Inheritance object BooleanFormatter Implements IMessagePackFormatter<bool> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly BooleanFormatter Instance Field Value BooleanFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public bool Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type bool. Returns bool The deserialized value. Serialize(ref MessagePackWriter, bool, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, bool value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value bool The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type bool."
  },
  "api/MessagePack.Formatters.ByteArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteArrayFormatter.html",
    "title": "Class ByteArrayFormatter | Snapshot",
    "keywords": "Class ByteArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll Serializes a byte array as a bin type. Deserializes a bin type or an array of byte-sized integers into a byte array. public sealed class ByteArrayFormatter : IMessagePackFormatter<byte[]?> Inheritance object ByteArrayFormatter Implements IMessagePackFormatter<byte[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ByteArrayFormatter Instance Field Value ByteArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public byte[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns byte[] The deserialized value. Serialize(ref MessagePackWriter, byte[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, byte[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value byte[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ByteArraySegmentFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteArraySegmentFormatter.html",
    "title": "Class ByteArraySegmentFormatter | Snapshot",
    "keywords": "Class ByteArraySegmentFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ByteArraySegmentFormatter : IMessagePackFormatter<ArraySegment<byte>> Inheritance object ByteArraySegmentFormatter Implements IMessagePackFormatter<ArraySegment<byte>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ByteArraySegmentFormatter Instance Field Value ByteArraySegmentFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ArraySegment<byte> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ArraySegment<byte>. Returns ArraySegment<byte> The deserialized value. Serialize(ref MessagePackWriter, ArraySegment<byte>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ArraySegment<byte> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ArraySegment<byte> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ArraySegment<byte>."
  },
  "api/MessagePack.Formatters.ByteFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteFormatter.html",
    "title": "Class ByteFormatter | Snapshot",
    "keywords": "Class ByteFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ByteFormatter : IMessagePackFormatter<byte> Inheritance object ByteFormatter Implements IMessagePackFormatter<byte> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ByteFormatter Instance Field Value ByteFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public byte Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type byte. Returns byte The deserialized value. Serialize(ref MessagePackWriter, byte, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, byte value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value byte The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type byte."
  },
  "api/MessagePack.Formatters.ByteMemoryFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteMemoryFormatter.html",
    "title": "Class ByteMemoryFormatter | Snapshot",
    "keywords": "Class ByteMemoryFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ByteMemoryFormatter : IMessagePackFormatter<Memory<byte>> Inheritance object ByteMemoryFormatter Implements IMessagePackFormatter<Memory<byte>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ByteMemoryFormatter Instance Field Value ByteMemoryFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Memory<byte> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Memory<byte>. Returns Memory<byte> The deserialized value. Serialize(ref MessagePackWriter, Memory<byte>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Memory<byte> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Memory<byte> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Memory<byte>."
  },
  "api/MessagePack.Formatters.ByteReadOnlyMemoryFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteReadOnlyMemoryFormatter.html",
    "title": "Class ByteReadOnlyMemoryFormatter | Snapshot",
    "keywords": "Class ByteReadOnlyMemoryFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ByteReadOnlyMemoryFormatter : IMessagePackFormatter<ReadOnlyMemory<byte>> Inheritance object ByteReadOnlyMemoryFormatter Implements IMessagePackFormatter<ReadOnlyMemory<byte>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ByteReadOnlyMemoryFormatter Instance Field Value ByteReadOnlyMemoryFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ReadOnlyMemory<byte> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ReadOnlyMemory<byte>. Returns ReadOnlyMemory<byte> The deserialized value. Serialize(ref MessagePackWriter, ReadOnlyMemory<byte>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ReadOnlyMemory<byte> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ReadOnlyMemory<byte> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ReadOnlyMemory<byte>."
  },
  "api/MessagePack.Formatters.ByteReadOnlySequenceFormatter.html": {
    "href": "api/MessagePack.Formatters.ByteReadOnlySequenceFormatter.html",
    "title": "Class ByteReadOnlySequenceFormatter | Snapshot",
    "keywords": "Class ByteReadOnlySequenceFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ByteReadOnlySequenceFormatter : IMessagePackFormatter<ReadOnlySequence<byte>> Inheritance object ByteReadOnlySequenceFormatter Implements IMessagePackFormatter<ReadOnlySequence<byte>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ByteReadOnlySequenceFormatter Instance Field Value ByteReadOnlySequenceFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ReadOnlySequence<byte> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ReadOnlySequence<byte>. Returns ReadOnlySequence<byte> The deserialized value. Serialize(ref MessagePackWriter, ReadOnlySequence<byte>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ReadOnlySequence<byte> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ReadOnlySequence<byte> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ReadOnlySequence<byte>."
  },
  "api/MessagePack.Formatters.CharArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.CharArrayFormatter.html",
    "title": "Class CharArrayFormatter | Snapshot",
    "keywords": "Class CharArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class CharArrayFormatter : IMessagePackFormatter<char[]?> Inheritance object CharArrayFormatter Implements IMessagePackFormatter<char[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly CharArrayFormatter Instance Field Value CharArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public char[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns char[] The deserialized value. Serialize(ref MessagePackWriter, char[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, char[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value char[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.CharFormatter.html": {
    "href": "api/MessagePack.Formatters.CharFormatter.html",
    "title": "Class CharFormatter | Snapshot",
    "keywords": "Class CharFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class CharFormatter : IMessagePackFormatter<char> Inheritance object CharFormatter Implements IMessagePackFormatter<char> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly CharFormatter Instance Field Value CharFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public char Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type char. Returns char The deserialized value. Serialize(ref MessagePackWriter, char, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, char value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value char The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type char."
  },
  "api/MessagePack.Formatters.CollectionFormatterBase-2.html": {
    "href": "api/MessagePack.Formatters.CollectionFormatterBase-2.html",
    "title": "Class CollectionFormatterBase<TElement, TCollection> | Snapshot",
    "keywords": "Class CollectionFormatterBase<TElement, TCollection> Namespace MessagePack.Formatters Assembly MessagePack.dll public abstract class CollectionFormatterBase<TElement, TCollection> : CollectionFormatterBase<TElement, TCollection, TCollection>, IMessagePackFormatter<TCollection?> where TCollection : IEnumerable<TElement> Type Parameters TElement TCollection Inheritance object CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection> CollectionFormatterBase<TElement, TCollection, TCollection> CollectionFormatterBase<TElement, TCollection> Implements IMessagePackFormatter<TCollection> Derived ConcurrentBagFormatter<T> ConcurrentQueueFormatter<T> GenericCollectionFormatter<TElement, TCollection> ObservableCollectionFormatter<T> Inherited Members CollectionFormatterBase<TElement, TCollection, TCollection>.GetSourceEnumerator(TCollection) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Serialize(ref MessagePackWriter, TCollection, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.GetCount(TCollection) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.GetSourceEnumerator(TCollection) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Add(TCollection, int, TElement, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Complete(TCollection) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Complete(TCollection) protected override sealed TCollection Complete(TCollection intermediateCollection) Parameters intermediateCollection TCollection Returns TCollection"
  },
  "api/MessagePack.Formatters.CollectionFormatterBase-3.html": {
    "href": "api/MessagePack.Formatters.CollectionFormatterBase-3.html",
    "title": "Class CollectionFormatterBase<TElement, TIntermediate, TCollection> | Snapshot",
    "keywords": "Class CollectionFormatterBase<TElement, TIntermediate, TCollection> Namespace MessagePack.Formatters Assembly MessagePack.dll public abstract class CollectionFormatterBase<TElement, TIntermediate, TCollection> : CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>, IMessagePackFormatter<TCollection?> where TCollection : IEnumerable<TElement> Type Parameters TElement TIntermediate TCollection Inheritance object CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection> CollectionFormatterBase<TElement, TIntermediate, TCollection> Implements IMessagePackFormatter<TCollection> Derived CollectionFormatterBase<TElement, TCollection> ConcurrentStackFormatter<T> GenericEnumerableFormatter<TElement, TCollection> InterfaceCollectionFormatter2<T> InterfaceCollectionFormatter<T> InterfaceEnumerableFormatter<T> InterfaceListFormatter2<T> InterfaceListFormatter<T> InterfaceLookupFormatter<TKey, TElement> InterfaceReadOnlyCollectionFormatter<T> InterfaceReadOnlyListFormatter<T> InterfaceSetFormatter<T> ReadOnlyCollectionFormatter<T> ReadOnlyObservableCollectionFormatter<T> Inherited Members CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.Serialize(ref MessagePackWriter, TCollection, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.GetCount(TCollection) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.GetSourceEnumerator(TCollection) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.Create(int, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.Add(TIntermediate, int, TElement, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TIntermediate, IEnumerator<TElement>, TCollection>.Complete(TIntermediate) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSourceEnumerator(TCollection) protected override IEnumerator<TElement> GetSourceEnumerator(TCollection source) Parameters source TCollection Returns IEnumerator<TElement>"
  },
  "api/MessagePack.Formatters.CollectionFormatterBase-4.html": {
    "href": "api/MessagePack.Formatters.CollectionFormatterBase-4.html",
    "title": "Class CollectionFormatterBase<TElement, TIntermediate, TEnumerator, TCollection> | Snapshot",
    "keywords": "Class CollectionFormatterBase<TElement, TIntermediate, TEnumerator, TCollection> Namespace MessagePack.Formatters Assembly MessagePack.dll public abstract class CollectionFormatterBase<TElement, TIntermediate, TEnumerator, TCollection> : IMessagePackFormatter<TCollection?> where TEnumerator : IEnumerator<TElement> where TCollection : IEnumerable<TElement> Type Parameters TElement TIntermediate TEnumerator TCollection Inheritance object CollectionFormatterBase<TElement, TIntermediate, TEnumerator, TCollection> Implements IMessagePackFormatter<TCollection> Derived CollectionFormatterBase<TElement, TIntermediate, TCollection> HashSetFormatter<T> LinkedListFormatter<T> QueueFormatter<T> StackFormatter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(TIntermediate, int, TElement, MessagePackSerializerOptions) protected abstract void Add(TIntermediate collection, int index, TElement value, MessagePackSerializerOptions options) Parameters collection TIntermediate index int value TElement options MessagePackSerializerOptions Complete(TIntermediate) protected abstract TCollection Complete(TIntermediate intermediateCollection) Parameters intermediateCollection TIntermediate Returns TCollection Create(int, MessagePackSerializerOptions) protected abstract TIntermediate Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns TIntermediate Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public TCollection? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns TCollection The deserialized value. GetCount(TCollection) protected virtual int? GetCount(TCollection sequence) Parameters sequence TCollection Returns int? GetSourceEnumerator(TCollection) protected abstract TEnumerator GetSourceEnumerator(TCollection source) Parameters source TCollection Returns TEnumerator Serialize(ref MessagePackWriter, TCollection?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, TCollection? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value TCollection The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ComplexFormatter.html": {
    "href": "api/MessagePack.Formatters.ComplexFormatter.html",
    "title": "Class ComplexFormatter | Snapshot",
    "keywords": "Class ComplexFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ComplexFormatter : IMessagePackFormatter<Complex> Inheritance object ComplexFormatter Implements IMessagePackFormatter<Complex> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<Complex> Instance Field Value IMessagePackFormatter<Complex> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Complex Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Complex. Returns Complex The deserialized value. Serialize(ref MessagePackWriter, Complex, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Complex value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Complex The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Complex."
  },
  "api/MessagePack.Formatters.ConcurrentBagFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ConcurrentBagFormatter-1.html",
    "title": "Class ConcurrentBagFormatter<T> | Snapshot",
    "keywords": "Class ConcurrentBagFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ConcurrentBagFormatter<T> : CollectionFormatterBase<T, ConcurrentBag<T>>, IMessagePackFormatter<ConcurrentBag<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, ConcurrentBag<T>, IEnumerator<T>, ConcurrentBag<T>> CollectionFormatterBase<T, ConcurrentBag<T>, ConcurrentBag<T>> CollectionFormatterBase<T, ConcurrentBag<T>> ConcurrentBagFormatter<T> Implements IMessagePackFormatter<ConcurrentBag<T>> Inherited Members CollectionFormatterBase<T, ConcurrentBag<T>, IEnumerator<T>, ConcurrentBag<T>>.Serialize(ref MessagePackWriter, ConcurrentBag<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ConcurrentBag<T>, IEnumerator<T>, ConcurrentBag<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(ConcurrentBag<T>, int, T, MessagePackSerializerOptions) protected override void Add(ConcurrentBag<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters collection ConcurrentBag<T> index int value T options MessagePackSerializerOptions Create(int, MessagePackSerializerOptions) protected override ConcurrentBag<T> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns ConcurrentBag<T> GetCount(ConcurrentBag<T>) protected override int? GetCount(ConcurrentBag<T> sequence) Parameters sequence ConcurrentBag<T> Returns int?"
  },
  "api/MessagePack.Formatters.ConcurrentDictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.ConcurrentDictionaryFormatter-2.html",
    "title": "Class ConcurrentDictionaryFormatter<TKey, TValue> | Snapshot",
    "keywords": "Class ConcurrentDictionaryFormatter<TKey, TValue> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ConcurrentDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>>, IMessagePackFormatter<ConcurrentDictionary<TKey, TValue>?> where TKey : notnull Type Parameters TKey TValue Inheritance object DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ConcurrentDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>, ConcurrentDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>> ConcurrentDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<ConcurrentDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ConcurrentDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, ConcurrentDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, ConcurrentDictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ConcurrentDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(ConcurrentDictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) protected override void Add(ConcurrentDictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters collection ConcurrentDictionary<TKey, TValue> index int key TKey value TValue options MessagePackSerializerOptions Create(int, MessagePackSerializerOptions) protected override ConcurrentDictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns ConcurrentDictionary<TKey, TValue>"
  },
  "api/MessagePack.Formatters.ConcurrentQueueFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ConcurrentQueueFormatter-1.html",
    "title": "Class ConcurrentQueueFormatter<T> | Snapshot",
    "keywords": "Class ConcurrentQueueFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ConcurrentQueueFormatter<T> : CollectionFormatterBase<T, ConcurrentQueue<T>>, IMessagePackFormatter<ConcurrentQueue<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, ConcurrentQueue<T>, IEnumerator<T>, ConcurrentQueue<T>> CollectionFormatterBase<T, ConcurrentQueue<T>, ConcurrentQueue<T>> CollectionFormatterBase<T, ConcurrentQueue<T>> ConcurrentQueueFormatter<T> Implements IMessagePackFormatter<ConcurrentQueue<T>> Inherited Members CollectionFormatterBase<T, ConcurrentQueue<T>, IEnumerator<T>, ConcurrentQueue<T>>.Serialize(ref MessagePackWriter, ConcurrentQueue<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ConcurrentQueue<T>, IEnumerator<T>, ConcurrentQueue<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(ConcurrentQueue<T>, int, T, MessagePackSerializerOptions) protected override void Add(ConcurrentQueue<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters collection ConcurrentQueue<T> index int value T options MessagePackSerializerOptions Create(int, MessagePackSerializerOptions) protected override ConcurrentQueue<T> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns ConcurrentQueue<T> GetCount(ConcurrentQueue<T>) protected override int? GetCount(ConcurrentQueue<T> sequence) Parameters sequence ConcurrentQueue<T> Returns int?"
  },
  "api/MessagePack.Formatters.ConcurrentStackFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ConcurrentStackFormatter-1.html",
    "title": "Class ConcurrentStackFormatter<T> | Snapshot",
    "keywords": "Class ConcurrentStackFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ConcurrentStackFormatter<T> : CollectionFormatterBase<T, T[], ConcurrentStack<T>>, IMessagePackFormatter<ConcurrentStack<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, ConcurrentStack<T>> CollectionFormatterBase<T, T[], ConcurrentStack<T>> ConcurrentStackFormatter<T> Implements IMessagePackFormatter<ConcurrentStack<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, ConcurrentStack<T>>.Serialize(ref MessagePackWriter, ConcurrentStack<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, ConcurrentStack<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(T[], int, T, MessagePackSerializerOptions) protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters collection T[] index int value T options MessagePackSerializerOptions Complete(T[]) protected override ConcurrentStack<T> Complete(T[] intermediateCollection) Parameters intermediateCollection T[] Returns ConcurrentStack<T> Create(int, MessagePackSerializerOptions) protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns T[] GetCount(ConcurrentStack<T>) protected override int? GetCount(ConcurrentStack<T> sequence) Parameters sequence ConcurrentStack<T> Returns int?"
  },
  "api/MessagePack.Formatters.DateTimeArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.DateTimeArrayFormatter.html",
    "title": "Class DateTimeArrayFormatter | Snapshot",
    "keywords": "Class DateTimeArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class DateTimeArrayFormatter : IMessagePackFormatter<DateTime[]?> Inheritance object DateTimeArrayFormatter Implements IMessagePackFormatter<DateTime[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly DateTimeArrayFormatter Instance Field Value DateTimeArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public DateTime[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns DateTime[] The deserialized value. Serialize(ref MessagePackWriter, DateTime[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, DateTime[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value DateTime[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.DateTimeFormatter.html": {
    "href": "api/MessagePack.Formatters.DateTimeFormatter.html",
    "title": "Class DateTimeFormatter | Snapshot",
    "keywords": "Class DateTimeFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class DateTimeFormatter : IMessagePackFormatter<DateTime> Inheritance object DateTimeFormatter Implements IMessagePackFormatter<DateTime> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly DateTimeFormatter Instance Field Value DateTimeFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public DateTime Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTime. Returns DateTime The deserialized value. Serialize(ref MessagePackWriter, DateTime, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, DateTime value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value DateTime The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTime."
  },
  "api/MessagePack.Formatters.DateTimeOffsetFormatter.html": {
    "href": "api/MessagePack.Formatters.DateTimeOffsetFormatter.html",
    "title": "Class DateTimeOffsetFormatter | Snapshot",
    "keywords": "Class DateTimeOffsetFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class DateTimeOffsetFormatter : IMessagePackFormatter<DateTimeOffset> Inheritance object DateTimeOffsetFormatter Implements IMessagePackFormatter<DateTimeOffset> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<DateTimeOffset> Instance Field Value IMessagePackFormatter<DateTimeOffset> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public DateTimeOffset Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTimeOffset. Returns DateTimeOffset The deserialized value. Serialize(ref MessagePackWriter, DateTimeOffset, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, DateTimeOffset value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value DateTimeOffset The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTimeOffset."
  },
  "api/MessagePack.Formatters.DecimalFormatter.html": {
    "href": "api/MessagePack.Formatters.DecimalFormatter.html",
    "title": "Class DecimalFormatter | Snapshot",
    "keywords": "Class DecimalFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class DecimalFormatter : IMessagePackFormatter<decimal> Inheritance object DecimalFormatter Implements IMessagePackFormatter<decimal> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly DecimalFormatter Instance Field Value DecimalFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public decimal Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type decimal. Returns decimal The deserialized value. Serialize(ref MessagePackWriter, decimal, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, decimal value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value decimal The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type decimal."
  },
  "api/MessagePack.Formatters.DictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.DictionaryFormatter-2.html",
    "title": "Class DictionaryFormatter<TKey, TValue> | Snapshot",
    "keywords": "Class DictionaryFormatter<TKey, TValue> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class DictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>>, IMessagePackFormatter<Dictionary<TKey, TValue>?> where TKey : notnull Type Parameters TKey TValue Inheritance object DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>> DictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<Dictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, Dictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, Dictionary<TKey, TValue>.Enumerator, Dictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) protected override void Add(Dictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters collection Dictionary<TKey, TValue> index int key TKey value TValue options MessagePackSerializerOptions Complete(Dictionary<TKey, TValue>) protected override Dictionary<TKey, TValue> Complete(Dictionary<TKey, TValue> intermediateCollection) Parameters intermediateCollection Dictionary<TKey, TValue> Returns Dictionary<TKey, TValue> Create(int, MessagePackSerializerOptions) protected override Dictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns Dictionary<TKey, TValue> GetSourceEnumerator(Dictionary<TKey, TValue>) protected override Dictionary<TKey, TValue>.Enumerator GetSourceEnumerator(Dictionary<TKey, TValue> source) Parameters source Dictionary<TKey, TValue> Returns Dictionary<TKey, TValue>.Enumerator"
  },
  "api/MessagePack.Formatters.DictionaryFormatterBase-3.html": {
    "href": "api/MessagePack.Formatters.DictionaryFormatterBase-3.html",
    "title": "Class DictionaryFormatterBase<TKey, TValue, TDictionary> | Snapshot",
    "keywords": "Class DictionaryFormatterBase<TKey, TValue, TDictionary> Namespace MessagePack.Formatters Assembly MessagePack.dll public abstract class DictionaryFormatterBase<TKey, TValue, TDictionary> : DictionaryFormatterBase<TKey, TValue, TDictionary, TDictionary>, IMessagePackFormatter<TDictionary?> where TKey : notnull where TDictionary : class?, IDictionary<TKey, TValue> Type Parameters TKey TValue TDictionary Inheritance object DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary> DictionaryFormatterBase<TKey, TValue, TDictionary, TDictionary> DictionaryFormatterBase<TKey, TValue, TDictionary> Implements IMessagePackFormatter<TDictionary> Derived ConcurrentDictionaryFormatter<TKey, TValue> GenericDictionaryFormatter<TKey, TValue, TDictionary> SortedListFormatter<TKey, TValue> Inherited Members DictionaryFormatterBase<TKey, TValue, TDictionary, TDictionary>.GetSourceEnumerator(TDictionary) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Serialize(ref MessagePackWriter, TDictionary, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.GetSourceEnumerator(TDictionary) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Create(int, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Add(TDictionary, int, TKey, TValue, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Complete(TDictionary) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Complete(TDictionary) protected override TDictionary Complete(TDictionary intermediateCollection) Parameters intermediateCollection TDictionary Returns TDictionary"
  },
  "api/MessagePack.Formatters.DictionaryFormatterBase-4.html": {
    "href": "api/MessagePack.Formatters.DictionaryFormatterBase-4.html",
    "title": "Class DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> | Snapshot",
    "keywords": "Class DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> Namespace MessagePack.Formatters Assembly MessagePack.dll public abstract class DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> : DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>, IMessagePackFormatter<TDictionary?> where TDictionary : class?, IEnumerable<KeyValuePair<TKey, TValue>> Type Parameters TKey TValue TIntermediate TDictionary Inheritance object DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary> DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> Implements IMessagePackFormatter<TDictionary> Derived DictionaryFormatterBase<TKey, TValue, TDictionary> GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> InterfaceDictionaryFormatter<TKey, TValue> InterfaceReadOnlyDictionaryFormatter<TKey, TValue> ReadOnlyDictionaryFormatter<TKey, TValue> Inherited Members DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Serialize(ref MessagePackWriter, TDictionary, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.GetSourceEnumerator(TDictionary) DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Create(int, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Add(TIntermediate, int, TKey, TValue, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TIntermediate, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Complete(TIntermediate) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSourceEnumerator(TDictionary) protected override IEnumerator<KeyValuePair<TKey, TValue>> GetSourceEnumerator(TDictionary source) Parameters source TDictionary Returns IEnumerator<KeyValuePair<TKey, TValue>>"
  },
  "api/MessagePack.Formatters.DictionaryFormatterBase-5.html": {
    "href": "api/MessagePack.Formatters.DictionaryFormatterBase-5.html",
    "title": "Class DictionaryFormatterBase<TKey, TValue, TIntermediate, TEnumerator, TDictionary> | Snapshot",
    "keywords": "Class DictionaryFormatterBase<TKey, TValue, TIntermediate, TEnumerator, TDictionary> Namespace MessagePack.Formatters Assembly MessagePack.dll public abstract class DictionaryFormatterBase<TKey, TValue, TIntermediate, TEnumerator, TDictionary> : IMessagePackFormatter<TDictionary?> where TEnumerator : IEnumerator<KeyValuePair<TKey, TValue>> where TDictionary : class?, IEnumerable<KeyValuePair<TKey, TValue>> Type Parameters TKey TValue TIntermediate TEnumerator TDictionary Inheritance object DictionaryFormatterBase<TKey, TValue, TIntermediate, TEnumerator, TDictionary> Implements IMessagePackFormatter<TDictionary> Derived DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> DictionaryFormatter<TKey, TValue> SortedDictionaryFormatter<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(TIntermediate, int, TKey, TValue, MessagePackSerializerOptions) protected abstract void Add(TIntermediate collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters collection TIntermediate index int key TKey value TValue options MessagePackSerializerOptions Complete(TIntermediate) protected abstract TDictionary Complete(TIntermediate intermediateCollection) Parameters intermediateCollection TIntermediate Returns TDictionary Create(int, MessagePackSerializerOptions) protected abstract TIntermediate Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns TIntermediate Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public TDictionary? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns TDictionary The deserialized value. GetSourceEnumerator(TDictionary) protected abstract TEnumerator GetSourceEnumerator(TDictionary source) Parameters source TDictionary Returns TEnumerator Serialize(ref MessagePackWriter, TDictionary?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, TDictionary? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value TDictionary The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.DoubleArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.DoubleArrayFormatter.html",
    "title": "Class DoubleArrayFormatter | Snapshot",
    "keywords": "Class DoubleArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class DoubleArrayFormatter : IMessagePackFormatter<double[]?> Inheritance object DoubleArrayFormatter Implements IMessagePackFormatter<double[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly DoubleArrayFormatter Instance Field Value DoubleArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public double[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns double[] The deserialized value. Serialize(ref MessagePackWriter, double[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, double[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value double[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.DoubleFormatter.html": {
    "href": "api/MessagePack.Formatters.DoubleFormatter.html",
    "title": "Class DoubleFormatter | Snapshot",
    "keywords": "Class DoubleFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class DoubleFormatter : IMessagePackFormatter<double> Inheritance object DoubleFormatter Implements IMessagePackFormatter<double> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly DoubleFormatter Instance Field Value DoubleFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public double Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type double. Returns double The deserialized value. Serialize(ref MessagePackWriter, double, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, double value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value double The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type double."
  },
  "api/MessagePack.Formatters.DynamicObjectTypeFallbackFormatter.html": {
    "href": "api/MessagePack.Formatters.DynamicObjectTypeFallbackFormatter.html",
    "title": "Class DynamicObjectTypeFallbackFormatter | Snapshot",
    "keywords": "Class DynamicObjectTypeFallbackFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll This formatter can serialize any value whose static type is object for which another resolver can provide a formatter for the runtime type. Its deserialization is limited to forwarding all calls to the PrimitiveObjectFormatter. public sealed class DynamicObjectTypeFallbackFormatter : IMessagePackFormatter<object?> Inheritance object DynamicObjectTypeFallbackFormatter Implements IMessagePackFormatter<object> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<object?> Instance Field Value IMessagePackFormatter<object> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public object? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object. Returns object The deserialized value. Serialize(ref MessagePackWriter, object?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, object? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value object The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object."
  },
  "api/MessagePack.Formatters.EnumAsStringFormatter-1.html": {
    "href": "api/MessagePack.Formatters.EnumAsStringFormatter-1.html",
    "title": "Class EnumAsStringFormatter<T> | Snapshot",
    "keywords": "Class EnumAsStringFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class EnumAsStringFormatter<T> : IMessagePackFormatter<T> where T : struct, Enum Type Parameters T Inheritance object EnumAsStringFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EnumAsStringFormatter() public EnumAsStringFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T The deserialized value. Serialize(ref MessagePackWriter, T, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ExpandoObjectFormatter.html": {
    "href": "api/MessagePack.Formatters.ExpandoObjectFormatter.html",
    "title": "Class ExpandoObjectFormatter | Snapshot",
    "keywords": "Class ExpandoObjectFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public class ExpandoObjectFormatter : IMessagePackFormatter<ExpandoObject?> Inheritance object ExpandoObjectFormatter Implements IMessagePackFormatter<ExpandoObject> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<ExpandoObject?> Instance Field Value IMessagePackFormatter<ExpandoObject> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ExpandoObject? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ExpandoObject. Returns ExpandoObject The deserialized value. Serialize(ref MessagePackWriter, ExpandoObject?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ExpandoObject? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ExpandoObject The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ExpandoObject."
  },
  "api/MessagePack.Formatters.ForceByteBlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceByteBlockFormatter.html",
    "title": "Class ForceByteBlockFormatter | Snapshot",
    "keywords": "Class ForceByteBlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceByteBlockFormatter : IMessagePackFormatter<byte> Inheritance object ForceByteBlockFormatter Implements IMessagePackFormatter<byte> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceByteBlockFormatter Instance Field Value ForceByteBlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public byte Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type byte. Returns byte The deserialized value. Serialize(ref MessagePackWriter, byte, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, byte value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value byte The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type byte."
  },
  "api/MessagePack.Formatters.ForceInt16BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt16BlockArrayFormatter.html",
    "title": "Class ForceInt16BlockArrayFormatter | Snapshot",
    "keywords": "Class ForceInt16BlockArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceInt16BlockArrayFormatter : IMessagePackFormatter<short[]?> Inheritance object ForceInt16BlockArrayFormatter Implements IMessagePackFormatter<short[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceInt16BlockArrayFormatter Instance Field Value ForceInt16BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public short[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns short[] The deserialized value. Serialize(ref MessagePackWriter, short[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, short[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value short[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ForceInt16BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt16BlockFormatter.html",
    "title": "Class ForceInt16BlockFormatter | Snapshot",
    "keywords": "Class ForceInt16BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceInt16BlockFormatter : IMessagePackFormatter<short> Inheritance object ForceInt16BlockFormatter Implements IMessagePackFormatter<short> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceInt16BlockFormatter Instance Field Value ForceInt16BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public short Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type short. Returns short The deserialized value. Serialize(ref MessagePackWriter, short, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, short value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value short The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type short."
  },
  "api/MessagePack.Formatters.ForceInt32BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt32BlockArrayFormatter.html",
    "title": "Class ForceInt32BlockArrayFormatter | Snapshot",
    "keywords": "Class ForceInt32BlockArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceInt32BlockArrayFormatter : IMessagePackFormatter<int[]?> Inheritance object ForceInt32BlockArrayFormatter Implements IMessagePackFormatter<int[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceInt32BlockArrayFormatter Instance Field Value ForceInt32BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public int[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns int[] The deserialized value. Serialize(ref MessagePackWriter, int[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, int[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value int[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ForceInt32BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt32BlockFormatter.html",
    "title": "Class ForceInt32BlockFormatter | Snapshot",
    "keywords": "Class ForceInt32BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceInt32BlockFormatter : IMessagePackFormatter<int> Inheritance object ForceInt32BlockFormatter Implements IMessagePackFormatter<int> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceInt32BlockFormatter Instance Field Value ForceInt32BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public int Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int. Returns int The deserialized value. Serialize(ref MessagePackWriter, int, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, int value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value int The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int."
  },
  "api/MessagePack.Formatters.ForceInt64BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt64BlockArrayFormatter.html",
    "title": "Class ForceInt64BlockArrayFormatter | Snapshot",
    "keywords": "Class ForceInt64BlockArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceInt64BlockArrayFormatter : IMessagePackFormatter<long[]?> Inheritance object ForceInt64BlockArrayFormatter Implements IMessagePackFormatter<long[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceInt64BlockArrayFormatter Instance Field Value ForceInt64BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public long[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns long[] The deserialized value. Serialize(ref MessagePackWriter, long[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, long[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value long[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ForceInt64BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceInt64BlockFormatter.html",
    "title": "Class ForceInt64BlockFormatter | Snapshot",
    "keywords": "Class ForceInt64BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceInt64BlockFormatter : IMessagePackFormatter<long> Inheritance object ForceInt64BlockFormatter Implements IMessagePackFormatter<long> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceInt64BlockFormatter Instance Field Value ForceInt64BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public long Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type long. Returns long The deserialized value. Serialize(ref MessagePackWriter, long, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, long value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value long The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type long."
  },
  "api/MessagePack.Formatters.ForceSByteBlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceSByteBlockArrayFormatter.html",
    "title": "Class ForceSByteBlockArrayFormatter | Snapshot",
    "keywords": "Class ForceSByteBlockArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceSByteBlockArrayFormatter : IMessagePackFormatter<sbyte[]?> Inheritance object ForceSByteBlockArrayFormatter Implements IMessagePackFormatter<sbyte[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceSByteBlockArrayFormatter Instance Field Value ForceSByteBlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public sbyte[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns sbyte[] The deserialized value. Serialize(ref MessagePackWriter, sbyte[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, sbyte[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value sbyte[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ForceSByteBlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceSByteBlockFormatter.html",
    "title": "Class ForceSByteBlockFormatter | Snapshot",
    "keywords": "Class ForceSByteBlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceSByteBlockFormatter : IMessagePackFormatter<sbyte> Inheritance object ForceSByteBlockFormatter Implements IMessagePackFormatter<sbyte> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceSByteBlockFormatter Instance Field Value ForceSByteBlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public sbyte Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type sbyte. Returns sbyte The deserialized value. Serialize(ref MessagePackWriter, sbyte, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, sbyte value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value sbyte The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type sbyte."
  },
  "api/MessagePack.Formatters.ForceTypelessFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ForceTypelessFormatter-1.html",
    "title": "Class ForceTypelessFormatter<T> | Snapshot",
    "keywords": "Class ForceTypelessFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll Force serialize object as typeless. public sealed class ForceTypelessFormatter<T> : IMessagePackFormatter<T?> Type Parameters T Inheritance object ForceTypelessFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ForceUInt16BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt16BlockArrayFormatter.html",
    "title": "Class ForceUInt16BlockArrayFormatter | Snapshot",
    "keywords": "Class ForceUInt16BlockArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceUInt16BlockArrayFormatter : IMessagePackFormatter<ushort[]?> Inheritance object ForceUInt16BlockArrayFormatter Implements IMessagePackFormatter<ushort[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceUInt16BlockArrayFormatter Instance Field Value ForceUInt16BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ushort[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns ushort[] The deserialized value. Serialize(ref MessagePackWriter, ushort[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ushort[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ushort[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ForceUInt16BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt16BlockFormatter.html",
    "title": "Class ForceUInt16BlockFormatter | Snapshot",
    "keywords": "Class ForceUInt16BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceUInt16BlockFormatter : IMessagePackFormatter<ushort> Inheritance object ForceUInt16BlockFormatter Implements IMessagePackFormatter<ushort> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceUInt16BlockFormatter Instance Field Value ForceUInt16BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ushort Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ushort. Returns ushort The deserialized value. Serialize(ref MessagePackWriter, ushort, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ushort value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ushort The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ushort."
  },
  "api/MessagePack.Formatters.ForceUInt32BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt32BlockArrayFormatter.html",
    "title": "Class ForceUInt32BlockArrayFormatter | Snapshot",
    "keywords": "Class ForceUInt32BlockArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceUInt32BlockArrayFormatter : IMessagePackFormatter<uint[]?> Inheritance object ForceUInt32BlockArrayFormatter Implements IMessagePackFormatter<uint[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceUInt32BlockArrayFormatter Instance Field Value ForceUInt32BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public uint[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns uint[] The deserialized value. Serialize(ref MessagePackWriter, uint[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, uint[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value uint[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ForceUInt32BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt32BlockFormatter.html",
    "title": "Class ForceUInt32BlockFormatter | Snapshot",
    "keywords": "Class ForceUInt32BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceUInt32BlockFormatter : IMessagePackFormatter<uint> Inheritance object ForceUInt32BlockFormatter Implements IMessagePackFormatter<uint> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceUInt32BlockFormatter Instance Field Value ForceUInt32BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public uint Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type uint. Returns uint The deserialized value. Serialize(ref MessagePackWriter, uint, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, uint value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value uint The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type uint."
  },
  "api/MessagePack.Formatters.ForceUInt64BlockArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt64BlockArrayFormatter.html",
    "title": "Class ForceUInt64BlockArrayFormatter | Snapshot",
    "keywords": "Class ForceUInt64BlockArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceUInt64BlockArrayFormatter : IMessagePackFormatter<ulong[]?> Inheritance object ForceUInt64BlockArrayFormatter Implements IMessagePackFormatter<ulong[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceUInt64BlockArrayFormatter Instance Field Value ForceUInt64BlockArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ulong[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns ulong[] The deserialized value. Serialize(ref MessagePackWriter, ulong[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ulong[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ulong[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.ForceUInt64BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.ForceUInt64BlockFormatter.html",
    "title": "Class ForceUInt64BlockFormatter | Snapshot",
    "keywords": "Class ForceUInt64BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ForceUInt64BlockFormatter : IMessagePackFormatter<ulong> Inheritance object ForceUInt64BlockFormatter Implements IMessagePackFormatter<ulong> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly ForceUInt64BlockFormatter Instance Field Value ForceUInt64BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ulong Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ulong. Returns ulong The deserialized value. Serialize(ref MessagePackWriter, ulong, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ulong value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ulong The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ulong."
  },
  "api/MessagePack.Formatters.FourDimensionalArrayFormatter-1.html": {
    "href": "api/MessagePack.Formatters.FourDimensionalArrayFormatter-1.html",
    "title": "Class FourDimensionalArrayFormatter<T> | Snapshot",
    "keywords": "Class FourDimensionalArrayFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class FourDimensionalArrayFormatter<T> : IMessagePackFormatter<T[,,,]?> Type Parameters T Inheritance object FourDimensionalArrayFormatter<T> Implements IMessagePackFormatter<T[,,,]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T[,,,]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T[,,,] The deserialized value. Serialize(ref MessagePackWriter, T[,,,]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T[,,,]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T[,,,] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.GenericCollectionFormatter-2.html": {
    "href": "api/MessagePack.Formatters.GenericCollectionFormatter-2.html",
    "title": "Class GenericCollectionFormatter<TElement, TCollection> | Snapshot",
    "keywords": "Class GenericCollectionFormatter<TElement, TCollection> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class GenericCollectionFormatter<TElement, TCollection> : CollectionFormatterBase<TElement, TCollection>, IMessagePackFormatter<TCollection?> where TCollection : ICollection<TElement>, new() Type Parameters TElement TCollection Inheritance object CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection> CollectionFormatterBase<TElement, TCollection, TCollection> CollectionFormatterBase<TElement, TCollection> GenericCollectionFormatter<TElement, TCollection> Implements IMessagePackFormatter<TCollection> Inherited Members CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Serialize(ref MessagePackWriter, TCollection, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TCollection, IEnumerator<TElement>, TCollection>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(TCollection, int, TElement, MessagePackSerializerOptions) protected override void Add(TCollection collection, int index, TElement value, MessagePackSerializerOptions options) Parameters collection TCollection index int value TElement options MessagePackSerializerOptions Create(int, MessagePackSerializerOptions) protected override TCollection Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns TCollection"
  },
  "api/MessagePack.Formatters.GenericDictionaryFormatter-3.html": {
    "href": "api/MessagePack.Formatters.GenericDictionaryFormatter-3.html",
    "title": "Class GenericDictionaryFormatter<TKey, TValue, TDictionary> | Snapshot",
    "keywords": "Class GenericDictionaryFormatter<TKey, TValue, TDictionary> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class GenericDictionaryFormatter<TKey, TValue, TDictionary> : DictionaryFormatterBase<TKey, TValue, TDictionary>, IMessagePackFormatter<TDictionary?> where TKey : notnull where TDictionary : class?, IDictionary<TKey, TValue>, new() Type Parameters TKey TValue TDictionary Inheritance object DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary> DictionaryFormatterBase<TKey, TValue, TDictionary, TDictionary> DictionaryFormatterBase<TKey, TValue, TDictionary> GenericDictionaryFormatter<TKey, TValue, TDictionary> Implements IMessagePackFormatter<TDictionary> Inherited Members DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Serialize(ref MessagePackWriter, TDictionary, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, TDictionary, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(TDictionary, int, TKey, TValue, MessagePackSerializerOptions) protected override void Add(TDictionary collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters collection TDictionary index int key TKey value TValue options MessagePackSerializerOptions Create(int, MessagePackSerializerOptions) protected override TDictionary Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns TDictionary"
  },
  "api/MessagePack.Formatters.GenericEnumFormatter-1.html": {
    "href": "api/MessagePack.Formatters.GenericEnumFormatter-1.html",
    "title": "Class GenericEnumFormatter<T> | Snapshot",
    "keywords": "Class GenericEnumFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class GenericEnumFormatter<T> : IMessagePackFormatter<T> where T : struct, Enum Type Parameters T Inheritance object GenericEnumFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors GenericEnumFormatter() public GenericEnumFormatter() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T The deserialized value. Serialize(ref MessagePackWriter, T, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.GenericEnumerableFormatter-2.html": {
    "href": "api/MessagePack.Formatters.GenericEnumerableFormatter-2.html",
    "title": "Class GenericEnumerableFormatter<TElement, TCollection> | Snapshot",
    "keywords": "Class GenericEnumerableFormatter<TElement, TCollection> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class GenericEnumerableFormatter<TElement, TCollection> : CollectionFormatterBase<TElement, TElement[], TCollection>, IMessagePackFormatter<TCollection?> where TCollection : IEnumerable<TElement> Type Parameters TElement TCollection Inheritance object CollectionFormatterBase<TElement, TElement[], IEnumerator<TElement>, TCollection> CollectionFormatterBase<TElement, TElement[], TCollection> GenericEnumerableFormatter<TElement, TCollection> Implements IMessagePackFormatter<TCollection> Inherited Members CollectionFormatterBase<TElement, TElement[], IEnumerator<TElement>, TCollection>.Serialize(ref MessagePackWriter, TCollection, MessagePackSerializerOptions) CollectionFormatterBase<TElement, TElement[], IEnumerator<TElement>, TCollection>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(TElement[], int, TElement, MessagePackSerializerOptions) protected override void Add(TElement[] collection, int index, TElement value, MessagePackSerializerOptions options) Parameters collection TElement[] index int value TElement options MessagePackSerializerOptions Complete(TElement[]) protected override TCollection Complete(TElement[] intermediateCollection) Parameters intermediateCollection TElement[] Returns TCollection Create(int, MessagePackSerializerOptions) protected override TElement[] Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns TElement[]"
  },
  "api/MessagePack.Formatters.GenericReadOnlyDictionaryFormatter-3.html": {
    "href": "api/MessagePack.Formatters.GenericReadOnlyDictionaryFormatter-3.html",
    "title": "Class GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> | Snapshot",
    "keywords": "Class GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> : DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, TDictionary>, IMessagePackFormatter<TDictionary?> where TKey : notnull where TDictionary : class?, IReadOnlyDictionary<TKey, TValue> Type Parameters TKey TValue TDictionary Inheritance object DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary> DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, TDictionary> GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> Implements IMessagePackFormatter<TDictionary> Inherited Members DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Serialize(ref MessagePackWriter, TDictionary, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, TDictionary>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) protected override void Add(Dictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters collection Dictionary<TKey, TValue> index int key TKey value TValue options MessagePackSerializerOptions Complete(Dictionary<TKey, TValue>) protected override TDictionary Complete(Dictionary<TKey, TValue> intermediateCollection) Parameters intermediateCollection Dictionary<TKey, TValue> Returns TDictionary Create(int, MessagePackSerializerOptions) protected override Dictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns Dictionary<TKey, TValue>"
  },
  "api/MessagePack.Formatters.GuidFormatter.html": {
    "href": "api/MessagePack.Formatters.GuidFormatter.html",
    "title": "Class GuidFormatter | Snapshot",
    "keywords": "Class GuidFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class GuidFormatter : IMessagePackFormatter<Guid> Inheritance object GuidFormatter Implements IMessagePackFormatter<Guid> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<Guid> Instance Field Value IMessagePackFormatter<Guid> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Guid Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Guid. Returns Guid The deserialized value. Serialize(ref MessagePackWriter, Guid, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Guid value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Guid The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Guid."
  },
  "api/MessagePack.Formatters.HashSetFormatter-1.html": {
    "href": "api/MessagePack.Formatters.HashSetFormatter-1.html",
    "title": "Class HashSetFormatter<T> | Snapshot",
    "keywords": "Class HashSetFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class HashSetFormatter<T> : CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>, IMessagePackFormatter<HashSet<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>> HashSetFormatter<T> Implements IMessagePackFormatter<HashSet<T>> Inherited Members CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>.Serialize(ref MessagePackWriter, HashSet<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, HashSet<T>, HashSet<T>.Enumerator, HashSet<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(HashSet<T>, int, T, MessagePackSerializerOptions) protected override void Add(HashSet<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters collection HashSet<T> index int value T options MessagePackSerializerOptions Complete(HashSet<T>) protected override HashSet<T> Complete(HashSet<T> intermediateCollection) Parameters intermediateCollection HashSet<T> Returns HashSet<T> Create(int, MessagePackSerializerOptions) protected override HashSet<T> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns HashSet<T> GetCount(HashSet<T>) protected override int? GetCount(HashSet<T> sequence) Parameters sequence HashSet<T> Returns int? GetSourceEnumerator(HashSet<T>) protected override HashSet<T>.Enumerator GetSourceEnumerator(HashSet<T> source) Parameters source HashSet<T> Returns HashSet<T>.Enumerator"
  },
  "api/MessagePack.Formatters.IMessagePackFormatter-1.html": {
    "href": "api/MessagePack.Formatters.IMessagePackFormatter-1.html",
    "title": "Interface IMessagePackFormatter<T> | Snapshot",
    "keywords": "Interface IMessagePackFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll The contract for serialization of some specific type. public interface IMessagePackFormatter<T> Type Parameters T The type to be serialized or deserialized. Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. T Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T The deserialized value. Serialize(ref MessagePackWriter, T, MessagePackSerializerOptions) Serializes a value. void Serialize(ref MessagePackWriter writer, T value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.IgnoreFormatter-1.html": {
    "href": "api/MessagePack.Formatters.IgnoreFormatter-1.html",
    "title": "Class IgnoreFormatter<T> | Snapshot",
    "keywords": "Class IgnoreFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class IgnoreFormatter<T> : IMessagePackFormatter<T?> Type Parameters T Inheritance object IgnoreFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.Int16ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.Int16ArrayFormatter.html",
    "title": "Class Int16ArrayFormatter | Snapshot",
    "keywords": "Class Int16ArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class Int16ArrayFormatter : IMessagePackFormatter<short[]?> Inheritance object Int16ArrayFormatter Implements IMessagePackFormatter<short[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly Int16ArrayFormatter Instance Field Value Int16ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public short[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns short[] The deserialized value. Serialize(ref MessagePackWriter, short[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, short[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value short[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.Int16Formatter.html": {
    "href": "api/MessagePack.Formatters.Int16Formatter.html",
    "title": "Class Int16Formatter | Snapshot",
    "keywords": "Class Int16Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class Int16Formatter : IMessagePackFormatter<short> Inheritance object Int16Formatter Implements IMessagePackFormatter<short> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly Int16Formatter Instance Field Value Int16Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public short Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type short. Returns short The deserialized value. Serialize(ref MessagePackWriter, short, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, short value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value short The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type short."
  },
  "api/MessagePack.Formatters.Int32ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.Int32ArrayFormatter.html",
    "title": "Class Int32ArrayFormatter | Snapshot",
    "keywords": "Class Int32ArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class Int32ArrayFormatter : IMessagePackFormatter<int[]?> Inheritance object Int32ArrayFormatter Implements IMessagePackFormatter<int[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly Int32ArrayFormatter Instance Field Value Int32ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public int[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns int[] The deserialized value. Serialize(ref MessagePackWriter, int[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, int[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value int[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.Int32Formatter.html": {
    "href": "api/MessagePack.Formatters.Int32Formatter.html",
    "title": "Class Int32Formatter | Snapshot",
    "keywords": "Class Int32Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class Int32Formatter : IMessagePackFormatter<int> Inheritance object Int32Formatter Implements IMessagePackFormatter<int> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly Int32Formatter Instance Field Value Int32Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public int Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int. Returns int The deserialized value. Serialize(ref MessagePackWriter, int, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, int value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value int The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int."
  },
  "api/MessagePack.Formatters.Int64ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.Int64ArrayFormatter.html",
    "title": "Class Int64ArrayFormatter | Snapshot",
    "keywords": "Class Int64ArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class Int64ArrayFormatter : IMessagePackFormatter<long[]?> Inheritance object Int64ArrayFormatter Implements IMessagePackFormatter<long[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly Int64ArrayFormatter Instance Field Value Int64ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public long[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns long[] The deserialized value. Serialize(ref MessagePackWriter, long[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, long[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value long[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.Int64Formatter.html": {
    "href": "api/MessagePack.Formatters.Int64Formatter.html",
    "title": "Class Int64Formatter | Snapshot",
    "keywords": "Class Int64Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class Int64Formatter : IMessagePackFormatter<long> Inheritance object Int64Formatter Implements IMessagePackFormatter<long> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly Int64Formatter Instance Field Value Int64Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public long Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type long. Returns long The deserialized value. Serialize(ref MessagePackWriter, long, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, long value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value long The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type long."
  },
  "api/MessagePack.Formatters.InterfaceCollectionFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceCollectionFormatter-1.html",
    "title": "Class InterfaceCollectionFormatter<T> | Snapshot",
    "keywords": "Class InterfaceCollectionFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll [Obsolete(\"Use InterfaceCollectionFormatter2 instead.\")] public sealed class InterfaceCollectionFormatter<T> : CollectionFormatterBase<T, T[], ICollection<T>>, IMessagePackFormatter<ICollection<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, ICollection<T>> CollectionFormatterBase<T, T[], ICollection<T>> InterfaceCollectionFormatter<T> Implements IMessagePackFormatter<ICollection<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, ICollection<T>>.Serialize(ref MessagePackWriter, ICollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, ICollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(T[], int, T, MessagePackSerializerOptions) protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters collection T[] index int value T options MessagePackSerializerOptions Complete(T[]) protected override ICollection<T> Complete(T[] intermediateCollection) Parameters intermediateCollection T[] Returns ICollection<T> Create(int, MessagePackSerializerOptions) protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns T[]"
  },
  "api/MessagePack.Formatters.InterfaceCollectionFormatter2-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceCollectionFormatter2-1.html",
    "title": "Class InterfaceCollectionFormatter2<T> | Snapshot",
    "keywords": "Class InterfaceCollectionFormatter2<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class InterfaceCollectionFormatter2<T> : CollectionFormatterBase<T, List<T>, ICollection<T>>, IMessagePackFormatter<ICollection<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, List<T>, IEnumerator<T>, ICollection<T>> CollectionFormatterBase<T, List<T>, ICollection<T>> InterfaceCollectionFormatter2<T> Implements IMessagePackFormatter<ICollection<T>> Inherited Members CollectionFormatterBase<T, List<T>, IEnumerator<T>, ICollection<T>>.Serialize(ref MessagePackWriter, ICollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, List<T>, IEnumerator<T>, ICollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(List<T>, int, T, MessagePackSerializerOptions) protected override void Add(List<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters collection List<T> index int value T options MessagePackSerializerOptions Complete(List<T>) protected override ICollection<T> Complete(List<T> intermediateCollection) Parameters intermediateCollection List<T> Returns ICollection<T> Create(int, MessagePackSerializerOptions) protected override List<T> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns List<T>"
  },
  "api/MessagePack.Formatters.InterfaceDictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.InterfaceDictionaryFormatter-2.html",
    "title": "Class InterfaceDictionaryFormatter<TKey, TValue> | Snapshot",
    "keywords": "Class InterfaceDictionaryFormatter<TKey, TValue> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class InterfaceDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IDictionary<TKey, TValue>>, IMessagePackFormatter<IDictionary<TKey, TValue>?> where TKey : notnull Type Parameters TKey TValue Inheritance object DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IDictionary<TKey, TValue>> InterfaceDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<IDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, IDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) protected override void Add(Dictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters collection Dictionary<TKey, TValue> index int key TKey value TValue options MessagePackSerializerOptions Complete(Dictionary<TKey, TValue>) protected override IDictionary<TKey, TValue> Complete(Dictionary<TKey, TValue> intermediateCollection) Parameters intermediateCollection Dictionary<TKey, TValue> Returns IDictionary<TKey, TValue> Create(int, MessagePackSerializerOptions) protected override Dictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns Dictionary<TKey, TValue>"
  },
  "api/MessagePack.Formatters.InterfaceEnumerableFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceEnumerableFormatter-1.html",
    "title": "Class InterfaceEnumerableFormatter<T> | Snapshot",
    "keywords": "Class InterfaceEnumerableFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class InterfaceEnumerableFormatter<T> : CollectionFormatterBase<T, T[], IEnumerable<T>>, IMessagePackFormatter<IEnumerable<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, IEnumerable<T>> CollectionFormatterBase<T, T[], IEnumerable<T>> InterfaceEnumerableFormatter<T> Implements IMessagePackFormatter<IEnumerable<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, IEnumerable<T>>.Serialize(ref MessagePackWriter, IEnumerable<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IEnumerable<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(T[], int, T, MessagePackSerializerOptions) protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters collection T[] index int value T options MessagePackSerializerOptions Complete(T[]) protected override IEnumerable<T> Complete(T[] intermediateCollection) Parameters intermediateCollection T[] Returns IEnumerable<T> Create(int, MessagePackSerializerOptions) protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns T[]"
  },
  "api/MessagePack.Formatters.InterfaceGroupingFormatter-2.html": {
    "href": "api/MessagePack.Formatters.InterfaceGroupingFormatter-2.html",
    "title": "Class InterfaceGroupingFormatter<TKey, TElement> | Snapshot",
    "keywords": "Class InterfaceGroupingFormatter<TKey, TElement> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class InterfaceGroupingFormatter<TKey, TElement> : IMessagePackFormatter<IGrouping<TKey, TElement>?> Type Parameters TKey TElement Inheritance object InterfaceGroupingFormatter<TKey, TElement> Implements IMessagePackFormatter<IGrouping<TKey, TElement>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public IGrouping<TKey, TElement>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Linq.IGrouping{`0,`1}. Returns IGrouping<TKey, TElement> The deserialized value. Serialize(ref MessagePackWriter, IGrouping<TKey, TElement>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, IGrouping<TKey, TElement>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value IGrouping<TKey, TElement> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Linq.IGrouping{`0,`1}."
  },
  "api/MessagePack.Formatters.InterfaceListFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceListFormatter-1.html",
    "title": "Class InterfaceListFormatter<T> | Snapshot",
    "keywords": "Class InterfaceListFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll [Obsolete(\"Use InterfaceListFormatter2 instead.\")] public sealed class InterfaceListFormatter<T> : CollectionFormatterBase<T, T[], IList<T>>, IMessagePackFormatter<IList<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, IList<T>> CollectionFormatterBase<T, T[], IList<T>> InterfaceListFormatter<T> Implements IMessagePackFormatter<IList<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, IList<T>>.Serialize(ref MessagePackWriter, IList<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IList<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(T[], int, T, MessagePackSerializerOptions) protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters collection T[] index int value T options MessagePackSerializerOptions Complete(T[]) protected override IList<T> Complete(T[] intermediateCollection) Parameters intermediateCollection T[] Returns IList<T> Create(int, MessagePackSerializerOptions) protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns T[]"
  },
  "api/MessagePack.Formatters.InterfaceListFormatter2-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceListFormatter2-1.html",
    "title": "Class InterfaceListFormatter2<T> | Snapshot",
    "keywords": "Class InterfaceListFormatter2<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class InterfaceListFormatter2<T> : CollectionFormatterBase<T, List<T>, IList<T>>, IMessagePackFormatter<IList<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, List<T>, IEnumerator<T>, IList<T>> CollectionFormatterBase<T, List<T>, IList<T>> InterfaceListFormatter2<T> Implements IMessagePackFormatter<IList<T>> Inherited Members CollectionFormatterBase<T, List<T>, IEnumerator<T>, IList<T>>.Serialize(ref MessagePackWriter, IList<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, List<T>, IEnumerator<T>, IList<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(List<T>, int, T, MessagePackSerializerOptions) protected override void Add(List<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters collection List<T> index int value T options MessagePackSerializerOptions Complete(List<T>) protected override IList<T> Complete(List<T> intermediateCollection) Parameters intermediateCollection List<T> Returns IList<T> Create(int, MessagePackSerializerOptions) protected override List<T> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns List<T>"
  },
  "api/MessagePack.Formatters.InterfaceLookupFormatter-2.html": {
    "href": "api/MessagePack.Formatters.InterfaceLookupFormatter-2.html",
    "title": "Class InterfaceLookupFormatter<TKey, TElement> | Snapshot",
    "keywords": "Class InterfaceLookupFormatter<TKey, TElement> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class InterfaceLookupFormatter<TKey, TElement> : CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, ILookup<TKey, TElement>>, IMessagePackFormatter<ILookup<TKey, TElement>?> where TKey : notnull Type Parameters TKey TElement Inheritance object CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, IEnumerator<IGrouping<TKey, TElement>>, ILookup<TKey, TElement>> CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, ILookup<TKey, TElement>> InterfaceLookupFormatter<TKey, TElement> Implements IMessagePackFormatter<ILookup<TKey, TElement>> Inherited Members CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, IEnumerator<IGrouping<TKey, TElement>>, ILookup<TKey, TElement>>.Serialize(ref MessagePackWriter, ILookup<TKey, TElement>, MessagePackSerializerOptions) CollectionFormatterBase<IGrouping<TKey, TElement>, Dictionary<TKey, IGrouping<TKey, TElement>>, IEnumerator<IGrouping<TKey, TElement>>, ILookup<TKey, TElement>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(Dictionary<TKey, IGrouping<TKey, TElement>>, int, IGrouping<TKey, TElement>, MessagePackSerializerOptions) protected override void Add(Dictionary<TKey, IGrouping<TKey, TElement>> collection, int index, IGrouping<TKey, TElement> value, MessagePackSerializerOptions options) Parameters collection Dictionary<TKey, IGrouping<TKey, TElement>> index int value IGrouping<TKey, TElement> options MessagePackSerializerOptions Complete(Dictionary<TKey, IGrouping<TKey, TElement>>) protected override ILookup<TKey, TElement> Complete(Dictionary<TKey, IGrouping<TKey, TElement>> intermediateCollection) Parameters intermediateCollection Dictionary<TKey, IGrouping<TKey, TElement>> Returns ILookup<TKey, TElement> Create(int, MessagePackSerializerOptions) protected override Dictionary<TKey, IGrouping<TKey, TElement>> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns Dictionary<TKey, IGrouping<TKey, TElement>>"
  },
  "api/MessagePack.Formatters.InterfaceReadOnlyCollectionFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceReadOnlyCollectionFormatter-1.html",
    "title": "Class InterfaceReadOnlyCollectionFormatter<T> | Snapshot",
    "keywords": "Class InterfaceReadOnlyCollectionFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class InterfaceReadOnlyCollectionFormatter<T> : CollectionFormatterBase<T, T[], IReadOnlyCollection<T>>, IMessagePackFormatter<IReadOnlyCollection<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyCollection<T>> CollectionFormatterBase<T, T[], IReadOnlyCollection<T>> InterfaceReadOnlyCollectionFormatter<T> Implements IMessagePackFormatter<IReadOnlyCollection<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyCollection<T>>.Serialize(ref MessagePackWriter, IReadOnlyCollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyCollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(T[], int, T, MessagePackSerializerOptions) protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters collection T[] index int value T options MessagePackSerializerOptions Complete(T[]) protected override IReadOnlyCollection<T> Complete(T[] intermediateCollection) Parameters intermediateCollection T[] Returns IReadOnlyCollection<T> Create(int, MessagePackSerializerOptions) protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns T[]"
  },
  "api/MessagePack.Formatters.InterfaceReadOnlyDictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.InterfaceReadOnlyDictionaryFormatter-2.html",
    "title": "Class InterfaceReadOnlyDictionaryFormatter<TKey, TValue> | Snapshot",
    "keywords": "Class InterfaceReadOnlyDictionaryFormatter<TKey, TValue> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class InterfaceReadOnlyDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>>, IMessagePackFormatter<IReadOnlyDictionary<TKey, TValue>?> where TKey : notnull Type Parameters TKey TValue Inheritance object DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>> InterfaceReadOnlyDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<IReadOnlyDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, IReadOnlyDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) protected override void Add(Dictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters collection Dictionary<TKey, TValue> index int key TKey value TValue options MessagePackSerializerOptions Complete(Dictionary<TKey, TValue>) protected override IReadOnlyDictionary<TKey, TValue> Complete(Dictionary<TKey, TValue> intermediateCollection) Parameters intermediateCollection Dictionary<TKey, TValue> Returns IReadOnlyDictionary<TKey, TValue> Create(int, MessagePackSerializerOptions) protected override Dictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns Dictionary<TKey, TValue>"
  },
  "api/MessagePack.Formatters.InterfaceReadOnlyListFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceReadOnlyListFormatter-1.html",
    "title": "Class InterfaceReadOnlyListFormatter<T> | Snapshot",
    "keywords": "Class InterfaceReadOnlyListFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class InterfaceReadOnlyListFormatter<T> : CollectionFormatterBase<T, T[], IReadOnlyList<T>>, IMessagePackFormatter<IReadOnlyList<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyList<T>> CollectionFormatterBase<T, T[], IReadOnlyList<T>> InterfaceReadOnlyListFormatter<T> Implements IMessagePackFormatter<IReadOnlyList<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyList<T>>.Serialize(ref MessagePackWriter, IReadOnlyList<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, IReadOnlyList<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(T[], int, T, MessagePackSerializerOptions) protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters collection T[] index int value T options MessagePackSerializerOptions Complete(T[]) protected override IReadOnlyList<T> Complete(T[] intermediateCollection) Parameters intermediateCollection T[] Returns IReadOnlyList<T> Create(int, MessagePackSerializerOptions) protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns T[]"
  },
  "api/MessagePack.Formatters.InterfaceSetFormatter-1.html": {
    "href": "api/MessagePack.Formatters.InterfaceSetFormatter-1.html",
    "title": "Class InterfaceSetFormatter<T> | Snapshot",
    "keywords": "Class InterfaceSetFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class InterfaceSetFormatter<T> : CollectionFormatterBase<T, HashSet<T>, ISet<T>>, IMessagePackFormatter<ISet<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, HashSet<T>, IEnumerator<T>, ISet<T>> CollectionFormatterBase<T, HashSet<T>, ISet<T>> InterfaceSetFormatter<T> Implements IMessagePackFormatter<ISet<T>> Inherited Members CollectionFormatterBase<T, HashSet<T>, IEnumerator<T>, ISet<T>>.Serialize(ref MessagePackWriter, ISet<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, HashSet<T>, IEnumerator<T>, ISet<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(HashSet<T>, int, T, MessagePackSerializerOptions) protected override void Add(HashSet<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters collection HashSet<T> index int value T options MessagePackSerializerOptions Complete(HashSet<T>) protected override ISet<T> Complete(HashSet<T> intermediateCollection) Parameters intermediateCollection HashSet<T> Returns ISet<T> Create(int, MessagePackSerializerOptions) protected override HashSet<T> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns HashSet<T>"
  },
  "api/MessagePack.Formatters.KeyValuePairFormatter-2.html": {
    "href": "api/MessagePack.Formatters.KeyValuePairFormatter-2.html",
    "title": "Class KeyValuePairFormatter<TKey, TValue> | Snapshot",
    "keywords": "Class KeyValuePairFormatter<TKey, TValue> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class KeyValuePairFormatter<TKey, TValue> : IMessagePackFormatter<KeyValuePair<TKey, TValue>> Type Parameters TKey TValue Inheritance object KeyValuePairFormatter<TKey, TValue> Implements IMessagePackFormatter<KeyValuePair<TKey, TValue>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public KeyValuePair<TKey, TValue> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type KeyValuePair. Returns KeyValuePair<TKey, TValue> The deserialized value. Serialize(ref MessagePackWriter, KeyValuePair<TKey, TValue>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, KeyValuePair<TKey, TValue> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value KeyValuePair<TKey, TValue> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type KeyValuePair."
  },
  "api/MessagePack.Formatters.LazyFormatter-1.html": {
    "href": "api/MessagePack.Formatters.LazyFormatter-1.html",
    "title": "Class LazyFormatter<T> | Snapshot",
    "keywords": "Class LazyFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class LazyFormatter<T> : IMessagePackFormatter<Lazy<T>?> Type Parameters T Inheritance object LazyFormatter<T> Implements IMessagePackFormatter<Lazy<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Lazy<T>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Lazy{`0}. Returns Lazy<T> The deserialized value. Serialize(ref MessagePackWriter, Lazy<T>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Lazy<T>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Lazy<T> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Lazy{`0}."
  },
  "api/MessagePack.Formatters.LinkedListFormatter-1.html": {
    "href": "api/MessagePack.Formatters.LinkedListFormatter-1.html",
    "title": "Class LinkedListFormatter<T> | Snapshot",
    "keywords": "Class LinkedListFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class LinkedListFormatter<T> : CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>>, IMessagePackFormatter<LinkedList<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>> LinkedListFormatter<T> Implements IMessagePackFormatter<LinkedList<T>> Inherited Members CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>>.Serialize(ref MessagePackWriter, LinkedList<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, LinkedList<T>, LinkedList<T>.Enumerator, LinkedList<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(LinkedList<T>, int, T, MessagePackSerializerOptions) protected override void Add(LinkedList<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters collection LinkedList<T> index int value T options MessagePackSerializerOptions Complete(LinkedList<T>) protected override LinkedList<T> Complete(LinkedList<T> intermediateCollection) Parameters intermediateCollection LinkedList<T> Returns LinkedList<T> Create(int, MessagePackSerializerOptions) protected override LinkedList<T> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns LinkedList<T> GetSourceEnumerator(LinkedList<T>) protected override LinkedList<T>.Enumerator GetSourceEnumerator(LinkedList<T> source) Parameters source LinkedList<T> Returns LinkedList<T>.Enumerator"
  },
  "api/MessagePack.Formatters.ListFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ListFormatter-1.html",
    "title": "Class ListFormatter<T> | Snapshot",
    "keywords": "Class ListFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ListFormatter<T> : IMessagePackFormatter<List<T>?> Type Parameters T Inheritance object ListFormatter<T> Implements IMessagePackFormatter<List<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public List<T>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Collections.Generic.List{`0}. Returns List<T> The deserialized value. Serialize(ref MessagePackWriter, List<T>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, List<T>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value List<T> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Collections.Generic.List{`0}."
  },
  "api/MessagePack.Formatters.MemoryFormatter-1.html": {
    "href": "api/MessagePack.Formatters.MemoryFormatter-1.html",
    "title": "Class MemoryFormatter<T> | Snapshot",
    "keywords": "Class MemoryFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class MemoryFormatter<T> : IMessagePackFormatter<Memory<T>> Type Parameters T Inheritance object MemoryFormatter<T> Implements IMessagePackFormatter<Memory<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Memory<T> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Memory{`0}. Returns Memory<T> The deserialized value. Serialize(ref MessagePackWriter, Memory<T>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Memory<T> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Memory<T> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Memory{`0}."
  },
  "api/MessagePack.Formatters.NativeDateTimeArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.NativeDateTimeArrayFormatter.html",
    "title": "Class NativeDateTimeArrayFormatter | Snapshot",
    "keywords": "Class NativeDateTimeArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NativeDateTimeArrayFormatter : IMessagePackFormatter<DateTime[]?> Inheritance object NativeDateTimeArrayFormatter Implements IMessagePackFormatter<DateTime[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NativeDateTimeArrayFormatter Instance Field Value NativeDateTimeArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public DateTime[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns DateTime[] The deserialized value. Serialize(ref MessagePackWriter, DateTime[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, DateTime[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value DateTime[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.NativeDateTimeFormatter.html": {
    "href": "api/MessagePack.Formatters.NativeDateTimeFormatter.html",
    "title": "Class NativeDateTimeFormatter | Snapshot",
    "keywords": "Class NativeDateTimeFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll Serialize by .NET native DateTime binary format. public sealed class NativeDateTimeFormatter : IMessagePackFormatter<DateTime> Inheritance object NativeDateTimeFormatter Implements IMessagePackFormatter<DateTime> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NativeDateTimeFormatter Instance Field Value NativeDateTimeFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public DateTime Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTime. Returns DateTime The deserialized value. Serialize(ref MessagePackWriter, DateTime, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, DateTime value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value DateTime The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type DateTime."
  },
  "api/MessagePack.Formatters.NativeDecimalFormatter.html": {
    "href": "api/MessagePack.Formatters.NativeDecimalFormatter.html",
    "title": "Class NativeDecimalFormatter | Snapshot",
    "keywords": "Class NativeDecimalFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NativeDecimalFormatter : IMessagePackFormatter<decimal> Inheritance object NativeDecimalFormatter Implements IMessagePackFormatter<decimal> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance Unsafe binary Decimal formatter. this is only allows on LittleEndian environment. public static readonly IMessagePackFormatter<decimal> Instance Field Value IMessagePackFormatter<decimal> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public decimal Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type decimal. Returns decimal The deserialized value. Serialize(ref MessagePackWriter, decimal, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, decimal value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value decimal The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type decimal."
  },
  "api/MessagePack.Formatters.NativeGuidFormatter.html": {
    "href": "api/MessagePack.Formatters.NativeGuidFormatter.html",
    "title": "Class NativeGuidFormatter | Snapshot",
    "keywords": "Class NativeGuidFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NativeGuidFormatter : IMessagePackFormatter<Guid> Inheritance object NativeGuidFormatter Implements IMessagePackFormatter<Guid> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance Unsafe binary Guid formatter. this is only allowed on LittleEndian environment. public static readonly IMessagePackFormatter<Guid> Instance Field Value IMessagePackFormatter<Guid> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Guid Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Guid. Returns Guid The deserialized value. Serialize(ref MessagePackWriter, Guid, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Guid value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Guid The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Guid."
  },
  "api/MessagePack.Formatters.NilFormatter.html": {
    "href": "api/MessagePack.Formatters.NilFormatter.html",
    "title": "Class NilFormatter | Snapshot",
    "keywords": "Class NilFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public class NilFormatter : IMessagePackFormatter<Nil> Inheritance object NilFormatter Implements IMessagePackFormatter<Nil> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<Nil> Instance Field Value IMessagePackFormatter<Nil> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Nil Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nil. Returns Nil The deserialized value. Serialize(ref MessagePackWriter, Nil, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Nil value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nil The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nil."
  },
  "api/MessagePack.Formatters.NonGenericDictionaryFormatter-1.html": {
    "href": "api/MessagePack.Formatters.NonGenericDictionaryFormatter-1.html",
    "title": "Class NonGenericDictionaryFormatter<T> | Snapshot",
    "keywords": "Class NonGenericDictionaryFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NonGenericDictionaryFormatter<T> : IMessagePackFormatter<T?> where T : class, IDictionary, new() Type Parameters T Inheritance object NonGenericDictionaryFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.NonGenericInterfaceCollectionFormatter.html": {
    "href": "api/MessagePack.Formatters.NonGenericInterfaceCollectionFormatter.html",
    "title": "Class NonGenericInterfaceCollectionFormatter | Snapshot",
    "keywords": "Class NonGenericInterfaceCollectionFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NonGenericInterfaceCollectionFormatter : IMessagePackFormatter<ICollection?> Inheritance object NonGenericInterfaceCollectionFormatter Implements IMessagePackFormatter<ICollection> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<ICollection?> Instance Field Value IMessagePackFormatter<ICollection> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ICollection? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ICollection. Returns ICollection The deserialized value. Serialize(ref MessagePackWriter, ICollection?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ICollection? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ICollection The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ICollection."
  },
  "api/MessagePack.Formatters.NonGenericInterfaceDictionaryFormatter.html": {
    "href": "api/MessagePack.Formatters.NonGenericInterfaceDictionaryFormatter.html",
    "title": "Class NonGenericInterfaceDictionaryFormatter | Snapshot",
    "keywords": "Class NonGenericInterfaceDictionaryFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NonGenericInterfaceDictionaryFormatter : IMessagePackFormatter<IDictionary?> Inheritance object NonGenericInterfaceDictionaryFormatter Implements IMessagePackFormatter<IDictionary> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<IDictionary?> Instance Field Value IMessagePackFormatter<IDictionary> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public IDictionary? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IDictionary. Returns IDictionary The deserialized value. Serialize(ref MessagePackWriter, IDictionary?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, IDictionary? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value IDictionary The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IDictionary."
  },
  "api/MessagePack.Formatters.NonGenericInterfaceEnumerableFormatter.html": {
    "href": "api/MessagePack.Formatters.NonGenericInterfaceEnumerableFormatter.html",
    "title": "Class NonGenericInterfaceEnumerableFormatter | Snapshot",
    "keywords": "Class NonGenericInterfaceEnumerableFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NonGenericInterfaceEnumerableFormatter : IMessagePackFormatter<IEnumerable?> Inheritance object NonGenericInterfaceEnumerableFormatter Implements IMessagePackFormatter<IEnumerable> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<IEnumerable?> Instance Field Value IMessagePackFormatter<IEnumerable> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public IEnumerable? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IEnumerable. Returns IEnumerable The deserialized value. Serialize(ref MessagePackWriter, IEnumerable?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, IEnumerable? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value IEnumerable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IEnumerable."
  },
  "api/MessagePack.Formatters.NonGenericInterfaceListFormatter.html": {
    "href": "api/MessagePack.Formatters.NonGenericInterfaceListFormatter.html",
    "title": "Class NonGenericInterfaceListFormatter | Snapshot",
    "keywords": "Class NonGenericInterfaceListFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NonGenericInterfaceListFormatter : IMessagePackFormatter<IList?> Inheritance object NonGenericInterfaceListFormatter Implements IMessagePackFormatter<IList> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<IList?> Instance Field Value IMessagePackFormatter<IList> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public IList? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IList. Returns IList The deserialized value. Serialize(ref MessagePackWriter, IList?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, IList? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value IList The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type IList."
  },
  "api/MessagePack.Formatters.NonGenericListFormatter-1.html": {
    "href": "api/MessagePack.Formatters.NonGenericListFormatter-1.html",
    "title": "Class NonGenericListFormatter<T> | Snapshot",
    "keywords": "Class NonGenericListFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NonGenericListFormatter<T> : IMessagePackFormatter<T?> where T : class, IList, new() Type Parameters T Inheritance object NonGenericListFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.NullableBooleanFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableBooleanFormatter.html",
    "title": "Class NullableBooleanFormatter | Snapshot",
    "keywords": "Class NullableBooleanFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableBooleanFormatter : IMessagePackFormatter<bool?> Inheritance object NullableBooleanFormatter Implements IMessagePackFormatter<bool?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableBooleanFormatter Instance Field Value NullableBooleanFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public bool? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type bool?. Returns bool? The deserialized value. Serialize(ref MessagePackWriter, bool?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, bool? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value bool? The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type bool?."
  },
  "api/MessagePack.Formatters.NullableByteFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableByteFormatter.html",
    "title": "Class NullableByteFormatter | Snapshot",
    "keywords": "Class NullableByteFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableByteFormatter : IMessagePackFormatter<byte?> Inheritance object NullableByteFormatter Implements IMessagePackFormatter<byte?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableByteFormatter Instance Field Value NullableByteFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public byte? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, byte?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, byte? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableCharFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableCharFormatter.html",
    "title": "Class NullableCharFormatter | Snapshot",
    "keywords": "Class NullableCharFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableCharFormatter : IMessagePackFormatter<char?> Inheritance object NullableCharFormatter Implements IMessagePackFormatter<char?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableCharFormatter Instance Field Value NullableCharFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public char? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, char?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, char? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableDateTimeFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableDateTimeFormatter.html",
    "title": "Class NullableDateTimeFormatter | Snapshot",
    "keywords": "Class NullableDateTimeFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableDateTimeFormatter : IMessagePackFormatter<DateTime?> Inheritance object NullableDateTimeFormatter Implements IMessagePackFormatter<DateTime?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableDateTimeFormatter Instance Field Value NullableDateTimeFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public DateTime? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, DateTime?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, DateTime? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableDoubleFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableDoubleFormatter.html",
    "title": "Class NullableDoubleFormatter | Snapshot",
    "keywords": "Class NullableDoubleFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableDoubleFormatter : IMessagePackFormatter<double?> Inheritance object NullableDoubleFormatter Implements IMessagePackFormatter<double?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableDoubleFormatter Instance Field Value NullableDoubleFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public double? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, double?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, double? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableForceByteBlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceByteBlockFormatter.html",
    "title": "Class NullableForceByteBlockFormatter | Snapshot",
    "keywords": "Class NullableForceByteBlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableForceByteBlockFormatter : IMessagePackFormatter<byte?> Inheritance object NullableForceByteBlockFormatter Implements IMessagePackFormatter<byte?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableForceByteBlockFormatter Instance Field Value NullableForceByteBlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public byte? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, byte?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, byte? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableForceInt16BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceInt16BlockFormatter.html",
    "title": "Class NullableForceInt16BlockFormatter | Snapshot",
    "keywords": "Class NullableForceInt16BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableForceInt16BlockFormatter : IMessagePackFormatter<short?> Inheritance object NullableForceInt16BlockFormatter Implements IMessagePackFormatter<short?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableForceInt16BlockFormatter Instance Field Value NullableForceInt16BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public short? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, short?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, short? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableForceInt32BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceInt32BlockFormatter.html",
    "title": "Class NullableForceInt32BlockFormatter | Snapshot",
    "keywords": "Class NullableForceInt32BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableForceInt32BlockFormatter : IMessagePackFormatter<int?> Inheritance object NullableForceInt32BlockFormatter Implements IMessagePackFormatter<int?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableForceInt32BlockFormatter Instance Field Value NullableForceInt32BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public int? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int?. Returns int? The deserialized value. Serialize(ref MessagePackWriter, int?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, int? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value int? The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int?."
  },
  "api/MessagePack.Formatters.NullableForceInt64BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceInt64BlockFormatter.html",
    "title": "Class NullableForceInt64BlockFormatter | Snapshot",
    "keywords": "Class NullableForceInt64BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableForceInt64BlockFormatter : IMessagePackFormatter<long?> Inheritance object NullableForceInt64BlockFormatter Implements IMessagePackFormatter<long?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableForceInt64BlockFormatter Instance Field Value NullableForceInt64BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public long? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, long?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, long? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableForceSByteBlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceSByteBlockFormatter.html",
    "title": "Class NullableForceSByteBlockFormatter | Snapshot",
    "keywords": "Class NullableForceSByteBlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableForceSByteBlockFormatter : IMessagePackFormatter<sbyte?> Inheritance object NullableForceSByteBlockFormatter Implements IMessagePackFormatter<sbyte?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableForceSByteBlockFormatter Instance Field Value NullableForceSByteBlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public sbyte? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, sbyte?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, sbyte? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableForceUInt16BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceUInt16BlockFormatter.html",
    "title": "Class NullableForceUInt16BlockFormatter | Snapshot",
    "keywords": "Class NullableForceUInt16BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableForceUInt16BlockFormatter : IMessagePackFormatter<ushort?> Inheritance object NullableForceUInt16BlockFormatter Implements IMessagePackFormatter<ushort?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableForceUInt16BlockFormatter Instance Field Value NullableForceUInt16BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ushort? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, ushort?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ushort? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableForceUInt32BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceUInt32BlockFormatter.html",
    "title": "Class NullableForceUInt32BlockFormatter | Snapshot",
    "keywords": "Class NullableForceUInt32BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableForceUInt32BlockFormatter : IMessagePackFormatter<uint?> Inheritance object NullableForceUInt32BlockFormatter Implements IMessagePackFormatter<uint?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableForceUInt32BlockFormatter Instance Field Value NullableForceUInt32BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public uint? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, uint?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, uint? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableForceUInt64BlockFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableForceUInt64BlockFormatter.html",
    "title": "Class NullableForceUInt64BlockFormatter | Snapshot",
    "keywords": "Class NullableForceUInt64BlockFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableForceUInt64BlockFormatter : IMessagePackFormatter<ulong?> Inheritance object NullableForceUInt64BlockFormatter Implements IMessagePackFormatter<ulong?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableForceUInt64BlockFormatter Instance Field Value NullableForceUInt64BlockFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ulong? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, ulong?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ulong? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableFormatter-1.html": {
    "href": "api/MessagePack.Formatters.NullableFormatter-1.html",
    "title": "Class NullableFormatter<T> | Snapshot",
    "keywords": "Class NullableFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableFormatter<T> : IMessagePackFormatter<T?> where T : struct Type Parameters T Inheritance object NullableFormatter<T> Implements IMessagePackFormatter<T?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns T? The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T? The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableInt16Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableInt16Formatter.html",
    "title": "Class NullableInt16Formatter | Snapshot",
    "keywords": "Class NullableInt16Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableInt16Formatter : IMessagePackFormatter<short?> Inheritance object NullableInt16Formatter Implements IMessagePackFormatter<short?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableInt16Formatter Instance Field Value NullableInt16Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public short? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, short?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, short? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableInt32Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableInt32Formatter.html",
    "title": "Class NullableInt32Formatter | Snapshot",
    "keywords": "Class NullableInt32Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableInt32Formatter : IMessagePackFormatter<int?> Inheritance object NullableInt32Formatter Implements IMessagePackFormatter<int?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableInt32Formatter Instance Field Value NullableInt32Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public int? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int?. Returns int? The deserialized value. Serialize(ref MessagePackWriter, int?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, int? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value int? The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type int?."
  },
  "api/MessagePack.Formatters.NullableInt64Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableInt64Formatter.html",
    "title": "Class NullableInt64Formatter | Snapshot",
    "keywords": "Class NullableInt64Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableInt64Formatter : IMessagePackFormatter<long?> Inheritance object NullableInt64Formatter Implements IMessagePackFormatter<long?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableInt64Formatter Instance Field Value NullableInt64Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public long? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, long?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, long? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableNilFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableNilFormatter.html",
    "title": "Class NullableNilFormatter | Snapshot",
    "keywords": "Class NullableNilFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public class NullableNilFormatter : IMessagePackFormatter<Nil?> Inheritance object NullableNilFormatter Implements IMessagePackFormatter<Nil?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<Nil?> Instance Field Value IMessagePackFormatter<Nil?> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Nil? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, Nil?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Nil? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableSByteFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableSByteFormatter.html",
    "title": "Class NullableSByteFormatter | Snapshot",
    "keywords": "Class NullableSByteFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableSByteFormatter : IMessagePackFormatter<sbyte?> Inheritance object NullableSByteFormatter Implements IMessagePackFormatter<sbyte?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableSByteFormatter Instance Field Value NullableSByteFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public sbyte? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, sbyte?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, sbyte? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableSingleFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableSingleFormatter.html",
    "title": "Class NullableSingleFormatter | Snapshot",
    "keywords": "Class NullableSingleFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableSingleFormatter : IMessagePackFormatter<float?> Inheritance object NullableSingleFormatter Implements IMessagePackFormatter<float?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableSingleFormatter Instance Field Value NullableSingleFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public float? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, float?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, float? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableStringArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableStringArrayFormatter.html",
    "title": "Class NullableStringArrayFormatter | Snapshot",
    "keywords": "Class NullableStringArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableStringArrayFormatter : IMessagePackFormatter<string?[]?> Inheritance object NullableStringArrayFormatter Implements IMessagePackFormatter<string[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableStringArrayFormatter Instance Field Value NullableStringArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public string?[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns string[] The deserialized value. Serialize(ref MessagePackWriter, string?[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, string?[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value string[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.NullableStringFormatter.html": {
    "href": "api/MessagePack.Formatters.NullableStringFormatter.html",
    "title": "Class NullableStringFormatter | Snapshot",
    "keywords": "Class NullableStringFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableStringFormatter : IMessagePackFormatter<string?> Inheritance object NullableStringFormatter Implements IMessagePackFormatter<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableStringFormatter Instance Field Value NullableStringFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public string? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type string. Returns string The deserialized value. Serialize(ref MessagePackWriter, string?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, string? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value string The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type string."
  },
  "api/MessagePack.Formatters.NullableUInt16Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableUInt16Formatter.html",
    "title": "Class NullableUInt16Formatter | Snapshot",
    "keywords": "Class NullableUInt16Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableUInt16Formatter : IMessagePackFormatter<ushort?> Inheritance object NullableUInt16Formatter Implements IMessagePackFormatter<ushort?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableUInt16Formatter Instance Field Value NullableUInt16Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ushort? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, ushort?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ushort? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableUInt32Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableUInt32Formatter.html",
    "title": "Class NullableUInt32Formatter | Snapshot",
    "keywords": "Class NullableUInt32Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableUInt32Formatter : IMessagePackFormatter<uint?> Inheritance object NullableUInt32Formatter Implements IMessagePackFormatter<uint?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableUInt32Formatter Instance Field Value NullableUInt32Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public uint? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, uint?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, uint? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.NullableUInt64Formatter.html": {
    "href": "api/MessagePack.Formatters.NullableUInt64Formatter.html",
    "title": "Class NullableUInt64Formatter | Snapshot",
    "keywords": "Class NullableUInt64Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class NullableUInt64Formatter : IMessagePackFormatter<ulong?> Inheritance object NullableUInt64Formatter Implements IMessagePackFormatter<ulong?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly NullableUInt64Formatter Instance Field Value NullableUInt64Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ulong? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns Nullable The deserialized value. Serialize(ref MessagePackWriter, ulong?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ulong? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Nullable The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.ObservableCollectionFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ObservableCollectionFormatter-1.html",
    "title": "Class ObservableCollectionFormatter<T> | Snapshot",
    "keywords": "Class ObservableCollectionFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ObservableCollectionFormatter<T> : CollectionFormatterBase<T, ObservableCollection<T>>, IMessagePackFormatter<ObservableCollection<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ObservableCollection<T>> CollectionFormatterBase<T, ObservableCollection<T>, ObservableCollection<T>> CollectionFormatterBase<T, ObservableCollection<T>> ObservableCollectionFormatter<T> Implements IMessagePackFormatter<ObservableCollection<T>> Inherited Members CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ObservableCollection<T>>.Serialize(ref MessagePackWriter, ObservableCollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ObservableCollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(ObservableCollection<T>, int, T, MessagePackSerializerOptions) protected override void Add(ObservableCollection<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters collection ObservableCollection<T> index int value T options MessagePackSerializerOptions Create(int, MessagePackSerializerOptions) protected override ObservableCollection<T> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns ObservableCollection<T>"
  },
  "api/MessagePack.Formatters.PrimitiveObjectFormatter.html": {
    "href": "api/MessagePack.Formatters.PrimitiveObjectFormatter.html",
    "title": "Class PrimitiveObjectFormatter | Snapshot",
    "keywords": "Class PrimitiveObjectFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public class PrimitiveObjectFormatter : IMessagePackFormatter<object?> Inheritance object PrimitiveObjectFormatter Implements IMessagePackFormatter<object> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PrimitiveObjectFormatter() protected PrimitiveObjectFormatter() Fields Instance public static readonly IMessagePackFormatter<object?> Instance Field Value IMessagePackFormatter<object> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public object? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object. Returns object The deserialized value. DeserializeMap(ref MessagePackReader, int, MessagePackSerializerOptions) protected virtual object DeserializeMap(ref MessagePackReader reader, int length, MessagePackSerializerOptions options) Parameters reader MessagePackReader length int options MessagePackSerializerOptions Returns object IsSupportedType(Type, TypeInfo, object) public static bool IsSupportedType(Type type, TypeInfo typeInfo, object value) Parameters type Type typeInfo TypeInfo value object Returns bool Serialize(ref MessagePackWriter, object?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, object? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value object The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object."
  },
  "api/MessagePack.Formatters.QueueFormatter-1.html": {
    "href": "api/MessagePack.Formatters.QueueFormatter-1.html",
    "title": "Class QueueFormatter<T> | Snapshot",
    "keywords": "Class QueueFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class QueueFormatter<T> : CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>, IMessagePackFormatter<Queue<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>> QueueFormatter<T> Implements IMessagePackFormatter<Queue<T>> Inherited Members CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>.Serialize(ref MessagePackWriter, Queue<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, Queue<T>, Queue<T>.Enumerator, Queue<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(Queue<T>, int, T, MessagePackSerializerOptions) protected override void Add(Queue<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters collection Queue<T> index int value T options MessagePackSerializerOptions Complete(Queue<T>) protected override Queue<T> Complete(Queue<T> intermediateCollection) Parameters intermediateCollection Queue<T> Returns Queue<T> Create(int, MessagePackSerializerOptions) protected override Queue<T> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns Queue<T> GetCount(Queue<T>) protected override int? GetCount(Queue<T> sequence) Parameters sequence Queue<T> Returns int? GetSourceEnumerator(Queue<T>) protected override Queue<T>.Enumerator GetSourceEnumerator(Queue<T> source) Parameters source Queue<T> Returns Queue<T>.Enumerator"
  },
  "api/MessagePack.Formatters.ReadOnlyCollectionFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ReadOnlyCollectionFormatter-1.html",
    "title": "Class ReadOnlyCollectionFormatter<T> | Snapshot",
    "keywords": "Class ReadOnlyCollectionFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ReadOnlyCollectionFormatter<T> : CollectionFormatterBase<T, T[], ReadOnlyCollection<T>>, IMessagePackFormatter<ReadOnlyCollection<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, T[], IEnumerator<T>, ReadOnlyCollection<T>> CollectionFormatterBase<T, T[], ReadOnlyCollection<T>> ReadOnlyCollectionFormatter<T> Implements IMessagePackFormatter<ReadOnlyCollection<T>> Inherited Members CollectionFormatterBase<T, T[], IEnumerator<T>, ReadOnlyCollection<T>>.Serialize(ref MessagePackWriter, ReadOnlyCollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], IEnumerator<T>, ReadOnlyCollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(T[], int, T, MessagePackSerializerOptions) protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters collection T[] index int value T options MessagePackSerializerOptions Complete(T[]) protected override ReadOnlyCollection<T> Complete(T[] intermediateCollection) Parameters intermediateCollection T[] Returns ReadOnlyCollection<T> Create(int, MessagePackSerializerOptions) protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns T[]"
  },
  "api/MessagePack.Formatters.ReadOnlyDictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.ReadOnlyDictionaryFormatter-2.html",
    "title": "Class ReadOnlyDictionaryFormatter<TKey, TValue> | Snapshot",
    "keywords": "Class ReadOnlyDictionaryFormatter<TKey, TValue> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ReadOnlyDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, ReadOnlyDictionary<TKey, TValue>>, IMessagePackFormatter<ReadOnlyDictionary<TKey, TValue>?> where TKey : notnull Type Parameters TKey TValue Inheritance object DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ReadOnlyDictionary<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, ReadOnlyDictionary<TKey, TValue>> ReadOnlyDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<ReadOnlyDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ReadOnlyDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, ReadOnlyDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, Dictionary<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, ReadOnlyDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(Dictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) protected override void Add(Dictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters collection Dictionary<TKey, TValue> index int key TKey value TValue options MessagePackSerializerOptions Complete(Dictionary<TKey, TValue>) protected override ReadOnlyDictionary<TKey, TValue> Complete(Dictionary<TKey, TValue> intermediateCollection) Parameters intermediateCollection Dictionary<TKey, TValue> Returns ReadOnlyDictionary<TKey, TValue> Create(int, MessagePackSerializerOptions) protected override Dictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns Dictionary<TKey, TValue>"
  },
  "api/MessagePack.Formatters.ReadOnlyMemoryFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ReadOnlyMemoryFormatter-1.html",
    "title": "Class ReadOnlyMemoryFormatter<T> | Snapshot",
    "keywords": "Class ReadOnlyMemoryFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ReadOnlyMemoryFormatter<T> : IMessagePackFormatter<ReadOnlyMemory<T>> Type Parameters T Inheritance object ReadOnlyMemoryFormatter<T> Implements IMessagePackFormatter<ReadOnlyMemory<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ReadOnlyMemory<T> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.ReadOnlyMemory{`0}. Returns ReadOnlyMemory<T> The deserialized value. Serialize(ref MessagePackWriter, ReadOnlyMemory<T>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ReadOnlyMemory<T> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ReadOnlyMemory<T> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.ReadOnlyMemory{`0}."
  },
  "api/MessagePack.Formatters.ReadOnlyObservableCollectionFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ReadOnlyObservableCollectionFormatter-1.html",
    "title": "Class ReadOnlyObservableCollectionFormatter<T> | Snapshot",
    "keywords": "Class ReadOnlyObservableCollectionFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ReadOnlyObservableCollectionFormatter<T> : CollectionFormatterBase<T, ObservableCollection<T>, ReadOnlyObservableCollection<T>>, IMessagePackFormatter<ReadOnlyObservableCollection<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ReadOnlyObservableCollection<T>> CollectionFormatterBase<T, ObservableCollection<T>, ReadOnlyObservableCollection<T>> ReadOnlyObservableCollectionFormatter<T> Implements IMessagePackFormatter<ReadOnlyObservableCollection<T>> Inherited Members CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ReadOnlyObservableCollection<T>>.Serialize(ref MessagePackWriter, ReadOnlyObservableCollection<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, ObservableCollection<T>, IEnumerator<T>, ReadOnlyObservableCollection<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(ObservableCollection<T>, int, T, MessagePackSerializerOptions) protected override void Add(ObservableCollection<T> collection, int index, T value, MessagePackSerializerOptions options) Parameters collection ObservableCollection<T> index int value T options MessagePackSerializerOptions Complete(ObservableCollection<T>) protected override ReadOnlyObservableCollection<T> Complete(ObservableCollection<T> intermediateCollection) Parameters intermediateCollection ObservableCollection<T> Returns ReadOnlyObservableCollection<T> Create(int, MessagePackSerializerOptions) protected override ObservableCollection<T> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns ObservableCollection<T>"
  },
  "api/MessagePack.Formatters.ReadOnlySequenceFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ReadOnlySequenceFormatter-1.html",
    "title": "Class ReadOnlySequenceFormatter<T> | Snapshot",
    "keywords": "Class ReadOnlySequenceFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ReadOnlySequenceFormatter<T> : IMessagePackFormatter<ReadOnlySequence<T>> Type Parameters T Inheritance object ReadOnlySequenceFormatter<T> Implements IMessagePackFormatter<ReadOnlySequence<T>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ReadOnlySequence<T> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Buffers.ReadOnlySequence{`0}. Returns ReadOnlySequence<T> The deserialized value. Serialize(ref MessagePackWriter, ReadOnlySequence<T>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ReadOnlySequence<T> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ReadOnlySequence<T> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type System.Buffers.ReadOnlySequence{`0}."
  },
  "api/MessagePack.Formatters.SByteArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.SByteArrayFormatter.html",
    "title": "Class SByteArrayFormatter | Snapshot",
    "keywords": "Class SByteArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class SByteArrayFormatter : IMessagePackFormatter<sbyte[]?> Inheritance object SByteArrayFormatter Implements IMessagePackFormatter<sbyte[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly SByteArrayFormatter Instance Field Value SByteArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public sbyte[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns sbyte[] The deserialized value. Serialize(ref MessagePackWriter, sbyte[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, sbyte[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value sbyte[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.SByteFormatter.html": {
    "href": "api/MessagePack.Formatters.SByteFormatter.html",
    "title": "Class SByteFormatter | Snapshot",
    "keywords": "Class SByteFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class SByteFormatter : IMessagePackFormatter<sbyte> Inheritance object SByteFormatter Implements IMessagePackFormatter<sbyte> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly SByteFormatter Instance Field Value SByteFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public sbyte Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type sbyte. Returns sbyte The deserialized value. Serialize(ref MessagePackWriter, sbyte, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, sbyte value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value sbyte The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type sbyte."
  },
  "api/MessagePack.Formatters.SingleArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.SingleArrayFormatter.html",
    "title": "Class SingleArrayFormatter | Snapshot",
    "keywords": "Class SingleArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class SingleArrayFormatter : IMessagePackFormatter<float[]?> Inheritance object SingleArrayFormatter Implements IMessagePackFormatter<float[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly SingleArrayFormatter Instance Field Value SingleArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public float[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns float[] The deserialized value. Serialize(ref MessagePackWriter, float[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, float[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value float[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.SingleFormatter.html": {
    "href": "api/MessagePack.Formatters.SingleFormatter.html",
    "title": "Class SingleFormatter | Snapshot",
    "keywords": "Class SingleFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class SingleFormatter : IMessagePackFormatter<float> Inheritance object SingleFormatter Implements IMessagePackFormatter<float> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly SingleFormatter Instance Field Value SingleFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public float Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type float. Returns float The deserialized value. Serialize(ref MessagePackWriter, float, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, float value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value float The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type float."
  },
  "api/MessagePack.Formatters.SortedDictionaryFormatter-2.html": {
    "href": "api/MessagePack.Formatters.SortedDictionaryFormatter-2.html",
    "title": "Class SortedDictionaryFormatter<TKey, TValue> | Snapshot",
    "keywords": "Class SortedDictionaryFormatter<TKey, TValue> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class SortedDictionaryFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>>, IMessagePackFormatter<SortedDictionary<TKey, TValue>?> where TKey : notnull Type Parameters TKey TValue Inheritance object DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>> SortedDictionaryFormatter<TKey, TValue> Implements IMessagePackFormatter<SortedDictionary<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>>.Serialize(ref MessagePackWriter, SortedDictionary<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, SortedDictionary<TKey, TValue>, SortedDictionary<TKey, TValue>.Enumerator, SortedDictionary<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(SortedDictionary<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) protected override void Add(SortedDictionary<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters collection SortedDictionary<TKey, TValue> index int key TKey value TValue options MessagePackSerializerOptions Complete(SortedDictionary<TKey, TValue>) protected override SortedDictionary<TKey, TValue> Complete(SortedDictionary<TKey, TValue> intermediateCollection) Parameters intermediateCollection SortedDictionary<TKey, TValue> Returns SortedDictionary<TKey, TValue> Create(int, MessagePackSerializerOptions) protected override SortedDictionary<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns SortedDictionary<TKey, TValue> GetSourceEnumerator(SortedDictionary<TKey, TValue>) protected override SortedDictionary<TKey, TValue>.Enumerator GetSourceEnumerator(SortedDictionary<TKey, TValue> source) Parameters source SortedDictionary<TKey, TValue> Returns SortedDictionary<TKey, TValue>.Enumerator"
  },
  "api/MessagePack.Formatters.SortedListFormatter-2.html": {
    "href": "api/MessagePack.Formatters.SortedListFormatter-2.html",
    "title": "Class SortedListFormatter<TKey, TValue> | Snapshot",
    "keywords": "Class SortedListFormatter<TKey, TValue> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class SortedListFormatter<TKey, TValue> : DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>>, IMessagePackFormatter<SortedList<TKey, TValue>?> where TKey : notnull Type Parameters TKey TValue Inheritance object DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, SortedList<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>, SortedList<TKey, TValue>> DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>> SortedListFormatter<TKey, TValue> Implements IMessagePackFormatter<SortedList<TKey, TValue>> Inherited Members DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, SortedList<TKey, TValue>>.Serialize(ref MessagePackWriter, SortedList<TKey, TValue>, MessagePackSerializerOptions) DictionaryFormatterBase<TKey, TValue, SortedList<TKey, TValue>, IEnumerator<KeyValuePair<TKey, TValue>>, SortedList<TKey, TValue>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(SortedList<TKey, TValue>, int, TKey, TValue, MessagePackSerializerOptions) protected override void Add(SortedList<TKey, TValue> collection, int index, TKey key, TValue value, MessagePackSerializerOptions options) Parameters collection SortedList<TKey, TValue> index int key TKey value TValue options MessagePackSerializerOptions Create(int, MessagePackSerializerOptions) protected override SortedList<TKey, TValue> Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns SortedList<TKey, TValue>"
  },
  "api/MessagePack.Formatters.StackFormatter-1.html": {
    "href": "api/MessagePack.Formatters.StackFormatter-1.html",
    "title": "Class StackFormatter<T> | Snapshot",
    "keywords": "Class StackFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class StackFormatter<T> : CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>, IMessagePackFormatter<Stack<T>?> Type Parameters T Inheritance object CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>> StackFormatter<T> Implements IMessagePackFormatter<Stack<T>> Inherited Members CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>.Serialize(ref MessagePackWriter, Stack<T>, MessagePackSerializerOptions) CollectionFormatterBase<T, T[], Stack<T>.Enumerator, Stack<T>>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Add(T[], int, T, MessagePackSerializerOptions) protected override void Add(T[] collection, int index, T value, MessagePackSerializerOptions options) Parameters collection T[] index int value T options MessagePackSerializerOptions Complete(T[]) protected override Stack<T> Complete(T[] intermediateCollection) Parameters intermediateCollection T[] Returns Stack<T> Create(int, MessagePackSerializerOptions) protected override T[] Create(int count, MessagePackSerializerOptions options) Parameters count int options MessagePackSerializerOptions Returns T[] GetCount(Stack<T>) protected override int? GetCount(Stack<T> sequence) Parameters sequence Stack<T> Returns int? GetSourceEnumerator(Stack<T>) protected override Stack<T>.Enumerator GetSourceEnumerator(Stack<T> source) Parameters source Stack<T> Returns Stack<T>.Enumerator"
  },
  "api/MessagePack.Formatters.StaticNullableFormatter-1.html": {
    "href": "api/MessagePack.Formatters.StaticNullableFormatter-1.html",
    "title": "Class StaticNullableFormatter<T> | Snapshot",
    "keywords": "Class StaticNullableFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class StaticNullableFormatter<T> : IMessagePackFormatter<T?> where T : struct Type Parameters T Inheritance object StaticNullableFormatter<T> Implements IMessagePackFormatter<T?> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors StaticNullableFormatter(IMessagePackFormatter<T>) public StaticNullableFormatter(IMessagePackFormatter<T> underlyingFormatter) Parameters underlyingFormatter IMessagePackFormatter<T> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable. Returns T? The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T? The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Nullable."
  },
  "api/MessagePack.Formatters.StringBuilderFormatter.html": {
    "href": "api/MessagePack.Formatters.StringBuilderFormatter.html",
    "title": "Class StringBuilderFormatter | Snapshot",
    "keywords": "Class StringBuilderFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class StringBuilderFormatter : IMessagePackFormatter<StringBuilder?> Inheritance object StringBuilderFormatter Implements IMessagePackFormatter<StringBuilder> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<StringBuilder?> Instance Field Value IMessagePackFormatter<StringBuilder> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public StringBuilder? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type StringBuilder. Returns StringBuilder The deserialized value. Serialize(ref MessagePackWriter, StringBuilder?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, StringBuilder? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value StringBuilder The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type StringBuilder."
  },
  "api/MessagePack.Formatters.StringInterningFormatter.html": {
    "href": "api/MessagePack.Formatters.StringInterningFormatter.html",
    "title": "Class StringInterningFormatter | Snapshot",
    "keywords": "Class StringInterningFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll A string formatter that interns strings on deserialization. public sealed class StringInterningFormatter : IMessagePackFormatter<string?> Inheritance object StringInterningFormatter Implements IMessagePackFormatter<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public string? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type string. Returns string The deserialized value. Serialize(ref MessagePackWriter, string?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, string? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value string The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type string."
  },
  "api/MessagePack.Formatters.ThreeDimensionalArrayFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ThreeDimensionalArrayFormatter-1.html",
    "title": "Class ThreeDimensionalArrayFormatter<T> | Snapshot",
    "keywords": "Class ThreeDimensionalArrayFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ThreeDimensionalArrayFormatter<T> : IMessagePackFormatter<T[,,]?> Type Parameters T Inheritance object ThreeDimensionalArrayFormatter<T> Implements IMessagePackFormatter<T[,,]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T[,,]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T[,,] The deserialized value. Serialize(ref MessagePackWriter, T[,,]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T[,,]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T[,,] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.TimeSpanFormatter.html": {
    "href": "api/MessagePack.Formatters.TimeSpanFormatter.html",
    "title": "Class TimeSpanFormatter | Snapshot",
    "keywords": "Class TimeSpanFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class TimeSpanFormatter : IMessagePackFormatter<TimeSpan> Inheritance object TimeSpanFormatter Implements IMessagePackFormatter<TimeSpan> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<TimeSpan> Instance Field Value IMessagePackFormatter<TimeSpan> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public TimeSpan Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type TimeSpan. Returns TimeSpan The deserialized value. Serialize(ref MessagePackWriter, TimeSpan, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, TimeSpan value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value TimeSpan The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type TimeSpan."
  },
  "api/MessagePack.Formatters.TupleFormatter-1.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-1.html",
    "title": "Class TupleFormatter<T1> | Snapshot",
    "keywords": "Class TupleFormatter<T1> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class TupleFormatter<T1> : IMessagePackFormatter<Tuple<T1>?> Type Parameters T1 Inheritance object TupleFormatter<T1> Implements IMessagePackFormatter<Tuple<T1>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Tuple<T1>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Tuple<T1> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Tuple<T1>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Tuple<T1> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple."
  },
  "api/MessagePack.Formatters.TupleFormatter-2.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-2.html",
    "title": "Class TupleFormatter<T1, T2> | Snapshot",
    "keywords": "Class TupleFormatter<T1, T2> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class TupleFormatter<T1, T2> : IMessagePackFormatter<Tuple<T1, T2>?> Type Parameters T1 T2 Inheritance object TupleFormatter<T1, T2> Implements IMessagePackFormatter<Tuple<T1, T2>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Tuple<T1, T2>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Tuple<T1, T2> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Tuple<T1, T2> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple."
  },
  "api/MessagePack.Formatters.TupleFormatter-3.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-3.html",
    "title": "Class TupleFormatter<T1, T2, T3> | Snapshot",
    "keywords": "Class TupleFormatter<T1, T2, T3> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class TupleFormatter<T1, T2, T3> : IMessagePackFormatter<Tuple<T1, T2, T3>?> Type Parameters T1 T2 T3 Inheritance object TupleFormatter<T1, T2, T3> Implements IMessagePackFormatter<Tuple<T1, T2, T3>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Tuple<T1, T2, T3>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Tuple<T1, T2, T3> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Tuple<T1, T2, T3> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple."
  },
  "api/MessagePack.Formatters.TupleFormatter-4.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-4.html",
    "title": "Class TupleFormatter<T1, T2, T3, T4> | Snapshot",
    "keywords": "Class TupleFormatter<T1, T2, T3, T4> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class TupleFormatter<T1, T2, T3, T4> : IMessagePackFormatter<Tuple<T1, T2, T3, T4>?> Type Parameters T1 T2 T3 T4 Inheritance object TupleFormatter<T1, T2, T3, T4> Implements IMessagePackFormatter<Tuple<T1, T2, T3, T4>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Tuple<T1, T2, T3, T4>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Tuple<T1, T2, T3, T4> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3, T4>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3, T4>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Tuple<T1, T2, T3, T4> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple."
  },
  "api/MessagePack.Formatters.TupleFormatter-5.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-5.html",
    "title": "Class TupleFormatter<T1, T2, T3, T4, T5> | Snapshot",
    "keywords": "Class TupleFormatter<T1, T2, T3, T4, T5> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class TupleFormatter<T1, T2, T3, T4, T5> : IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5>?> Type Parameters T1 T2 T3 T4 T5 Inheritance object TupleFormatter<T1, T2, T3, T4, T5> Implements IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Tuple<T1, T2, T3, T4, T5>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Tuple<T1, T2, T3, T4, T5> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3, T4, T5>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3, T4, T5>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Tuple<T1, T2, T3, T4, T5> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple."
  },
  "api/MessagePack.Formatters.TupleFormatter-6.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-6.html",
    "title": "Class TupleFormatter<T1, T2, T3, T4, T5, T6> | Snapshot",
    "keywords": "Class TupleFormatter<T1, T2, T3, T4, T5, T6> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class TupleFormatter<T1, T2, T3, T4, T5, T6> : IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6>?> Type Parameters T1 T2 T3 T4 T5 T6 Inheritance object TupleFormatter<T1, T2, T3, T4, T5, T6> Implements IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Tuple<T1, T2, T3, T4, T5, T6>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Tuple<T1, T2, T3, T4, T5, T6> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3, T4, T5, T6>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3, T4, T5, T6>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Tuple<T1, T2, T3, T4, T5, T6> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple."
  },
  "api/MessagePack.Formatters.TupleFormatter-7.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-7.html",
    "title": "Class TupleFormatter<T1, T2, T3, T4, T5, T6, T7> | Snapshot",
    "keywords": "Class TupleFormatter<T1, T2, T3, T4, T5, T6, T7> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class TupleFormatter<T1, T2, T3, T4, T5, T6, T7> : IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6, T7>?> Type Parameters T1 T2 T3 T4 T5 T6 T7 Inheritance object TupleFormatter<T1, T2, T3, T4, T5, T6, T7> Implements IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6, T7>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Tuple<T1, T2, T3, T4, T5, T6, T7>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Tuple<T1, T2, T3, T4, T5, T6, T7> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3, T4, T5, T6, T7>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3, T4, T5, T6, T7>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Tuple<T1, T2, T3, T4, T5, T6, T7> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple."
  },
  "api/MessagePack.Formatters.TupleFormatter-8.html": {
    "href": "api/MessagePack.Formatters.TupleFormatter-8.html",
    "title": "Class TupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> | Snapshot",
    "keywords": "Class TupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class TupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> : IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>?> where TRest : notnull Type Parameters T1 T2 T3 T4 T5 T6 T7 TRest Inheritance object TupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> Implements IMessagePackFormatter<Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple. Returns Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> The deserialized value. Serialize(ref MessagePackWriter, Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Tuple."
  },
  "api/MessagePack.Formatters.TwoDimensionalArrayFormatter-1.html": {
    "href": "api/MessagePack.Formatters.TwoDimensionalArrayFormatter-1.html",
    "title": "Class TwoDimensionalArrayFormatter<T> | Snapshot",
    "keywords": "Class TwoDimensionalArrayFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class TwoDimensionalArrayFormatter<T> : IMessagePackFormatter<T[,]?> Type Parameters T Inheritance object TwoDimensionalArrayFormatter<T> Implements IMessagePackFormatter<T[,]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T[,]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T[,] The deserialized value. Serialize(ref MessagePackWriter, T[,]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T[,]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T[,] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.TypeFormatter-1.html": {
    "href": "api/MessagePack.Formatters.TypeFormatter-1.html",
    "title": "Class TypeFormatter<T> | Snapshot",
    "keywords": "Class TypeFormatter<T> Namespace MessagePack.Formatters Assembly MessagePack.dll Serializes any instance of Type by its AssemblyQualifiedName value. public sealed class TypeFormatter<T> : IMessagePackFormatter<T?> where T : Type Type Parameters T The Type class itself or a derived type. Inheritance object TypeFormatter<T> Implements IMessagePackFormatter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<T?> Instance Field Value IMessagePackFormatter<T> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T The deserialized value. Serialize(ref MessagePackWriter, T?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.TypelessFormatter.html": {
    "href": "api/MessagePack.Formatters.TypelessFormatter.html",
    "title": "Class TypelessFormatter | Snapshot",
    "keywords": "Class TypelessFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll For object field that holds derived from object value, ex: var arr = new object[] { 1, \"a\", new Model() };. public sealed class TypelessFormatter : IMessagePackFormatter<object?> Inheritance object TypelessFormatter Implements IMessagePackFormatter<object> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance The singleton instance that can be used. public static readonly IMessagePackFormatter<object?> Instance Field Value IMessagePackFormatter<object> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public object? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object. Returns object The deserialized value. Serialize(ref MessagePackWriter, object?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, object? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value object The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type object."
  },
  "api/MessagePack.Formatters.UInt16ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.UInt16ArrayFormatter.html",
    "title": "Class UInt16ArrayFormatter | Snapshot",
    "keywords": "Class UInt16ArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class UInt16ArrayFormatter : IMessagePackFormatter<ushort[]?> Inheritance object UInt16ArrayFormatter Implements IMessagePackFormatter<ushort[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly UInt16ArrayFormatter Instance Field Value UInt16ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ushort[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns ushort[] The deserialized value. Serialize(ref MessagePackWriter, ushort[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ushort[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ushort[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.UInt16Formatter.html": {
    "href": "api/MessagePack.Formatters.UInt16Formatter.html",
    "title": "Class UInt16Formatter | Snapshot",
    "keywords": "Class UInt16Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class UInt16Formatter : IMessagePackFormatter<ushort> Inheritance object UInt16Formatter Implements IMessagePackFormatter<ushort> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly UInt16Formatter Instance Field Value UInt16Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ushort Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ushort. Returns ushort The deserialized value. Serialize(ref MessagePackWriter, ushort, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ushort value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ushort The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ushort."
  },
  "api/MessagePack.Formatters.UInt32ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.UInt32ArrayFormatter.html",
    "title": "Class UInt32ArrayFormatter | Snapshot",
    "keywords": "Class UInt32ArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class UInt32ArrayFormatter : IMessagePackFormatter<uint[]?> Inheritance object UInt32ArrayFormatter Implements IMessagePackFormatter<uint[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly UInt32ArrayFormatter Instance Field Value UInt32ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public uint[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns uint[] The deserialized value. Serialize(ref MessagePackWriter, uint[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, uint[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value uint[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.UInt32Formatter.html": {
    "href": "api/MessagePack.Formatters.UInt32Formatter.html",
    "title": "Class UInt32Formatter | Snapshot",
    "keywords": "Class UInt32Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class UInt32Formatter : IMessagePackFormatter<uint> Inheritance object UInt32Formatter Implements IMessagePackFormatter<uint> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly UInt32Formatter Instance Field Value UInt32Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public uint Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type uint. Returns uint The deserialized value. Serialize(ref MessagePackWriter, uint, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, uint value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value uint The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type uint."
  },
  "api/MessagePack.Formatters.UInt64ArrayFormatter.html": {
    "href": "api/MessagePack.Formatters.UInt64ArrayFormatter.html",
    "title": "Class UInt64ArrayFormatter | Snapshot",
    "keywords": "Class UInt64ArrayFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class UInt64ArrayFormatter : IMessagePackFormatter<ulong[]?> Inheritance object UInt64ArrayFormatter Implements IMessagePackFormatter<ulong[]> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly UInt64ArrayFormatter Instance Field Value UInt64ArrayFormatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ulong[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns ulong[] The deserialized value. Serialize(ref MessagePackWriter, ulong[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ulong[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ulong[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Formatters.UInt64Formatter.html": {
    "href": "api/MessagePack.Formatters.UInt64Formatter.html",
    "title": "Class UInt64Formatter | Snapshot",
    "keywords": "Class UInt64Formatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class UInt64Formatter : IMessagePackFormatter<ulong> Inheritance object UInt64Formatter Implements IMessagePackFormatter<ulong> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly UInt64Formatter Instance Field Value UInt64Formatter Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ulong Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ulong. Returns ulong The deserialized value. Serialize(ref MessagePackWriter, ulong, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ulong value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ulong The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ulong."
  },
  "api/MessagePack.Formatters.UriFormatter.html": {
    "href": "api/MessagePack.Formatters.UriFormatter.html",
    "title": "Class UriFormatter | Snapshot",
    "keywords": "Class UriFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class UriFormatter : IMessagePackFormatter<Uri?> Inheritance object UriFormatter Implements IMessagePackFormatter<Uri> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<Uri?> Instance Field Value IMessagePackFormatter<Uri> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Uri? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Uri. Returns Uri The deserialized value. Serialize(ref MessagePackWriter, Uri?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Uri? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Uri The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Uri."
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-1.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-1.html",
    "title": "Class ValueTupleFormatter<T1> | Snapshot",
    "keywords": "Class ValueTupleFormatter<T1> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ValueTupleFormatter<T1> : IMessagePackFormatter<ValueTuple<T1>> Type Parameters T1 Inheritance object ValueTupleFormatter<T1> Implements IMessagePackFormatter<ValueTuple<T1>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ValueTuple<T1> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns ValueTuple<T1> The deserialized value. Serialize(ref MessagePackWriter, ValueTuple<T1>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ValueTuple<T1> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ValueTuple<T1> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple."
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-2.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-2.html",
    "title": "Class ValueTupleFormatter<T1, T2> | Snapshot",
    "keywords": "Class ValueTupleFormatter<T1, T2> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ValueTupleFormatter<T1, T2> : IMessagePackFormatter<(T1, T2)> Type Parameters T1 T2 Inheritance object ValueTupleFormatter<T1, T2> Implements IMessagePackFormatter<(T1, T2)> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public (T1, T2) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns (T1, T2) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2), MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, (T1, T2) value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value (T1, T2) The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple."
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-3.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-3.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3> | Snapshot",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ValueTupleFormatter<T1, T2, T3> : IMessagePackFormatter<(T1, T2, T3)> Type Parameters T1 T2 T3 Inheritance object ValueTupleFormatter<T1, T2, T3> Implements IMessagePackFormatter<(T1, T2, T3)> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public (T1, T2, T3) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns (T1, T2, T3) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2, T3), MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, (T1, T2, T3) value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value (T1, T2, T3) The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple."
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-4.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-4.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3, T4> | Snapshot",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3, T4> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ValueTupleFormatter<T1, T2, T3, T4> : IMessagePackFormatter<(T1, T2, T3, T4)> Type Parameters T1 T2 T3 T4 Inheritance object ValueTupleFormatter<T1, T2, T3, T4> Implements IMessagePackFormatter<(T1, T2, T3, T4)> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public (T1, T2, T3, T4) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns (T1, T2, T3, T4) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2, T3, T4), MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, (T1, T2, T3, T4) value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value (T1, T2, T3, T4) The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple."
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-5.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-5.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3, T4, T5> | Snapshot",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3, T4, T5> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ValueTupleFormatter<T1, T2, T3, T4, T5> : IMessagePackFormatter<(T1, T2, T3, T4, T5)> Type Parameters T1 T2 T3 T4 T5 Inheritance object ValueTupleFormatter<T1, T2, T3, T4, T5> Implements IMessagePackFormatter<(T1, T2, T3, T4, T5)> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public (T1, T2, T3, T4, T5) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns (T1, T2, T3, T4, T5) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2, T3, T4, T5), MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, (T1, T2, T3, T4, T5) value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value (T1, T2, T3, T4, T5) The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple."
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-6.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-6.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6> | Snapshot",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ValueTupleFormatter<T1, T2, T3, T4, T5, T6> : IMessagePackFormatter<(T1, T2, T3, T4, T5, T6)> Type Parameters T1 T2 T3 T4 T5 T6 Inheritance object ValueTupleFormatter<T1, T2, T3, T4, T5, T6> Implements IMessagePackFormatter<(T1, T2, T3, T4, T5, T6)> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public (T1, T2, T3, T4, T5, T6) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns (T1, T2, T3, T4, T5, T6) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2, T3, T4, T5, T6), MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, (T1, T2, T3, T4, T5, T6) value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value (T1, T2, T3, T4, T5, T6) The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple."
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-7.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-7.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7> | Snapshot",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7> : IMessagePackFormatter<(T1, T2, T3, T4, T5, T6, T7)> Type Parameters T1 T2 T3 T4 T5 T6 T7 Inheritance object ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7> Implements IMessagePackFormatter<(T1, T2, T3, T4, T5, T6, T7)> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public (T1, T2, T3, T4, T5, T6, T7) Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns (T1, T2, T3, T4, T5, T6, T7) The deserialized value. Serialize(ref MessagePackWriter, (T1, T2, T3, T4, T5, T6, T7), MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, (T1, T2, T3, T4, T5, T6, T7) value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value (T1, T2, T3, T4, T5, T6, T7) The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple."
  },
  "api/MessagePack.Formatters.ValueTupleFormatter-8.html": {
    "href": "api/MessagePack.Formatters.ValueTupleFormatter-8.html",
    "title": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> | Snapshot",
    "keywords": "Class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> : IMessagePackFormatter<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>> where TRest : struct Type Parameters T1 T2 T3 T4 T5 T6 T7 TRest Inheritance object ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> Implements IMessagePackFormatter<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple. Returns ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> The deserialized value. Serialize(ref MessagePackWriter, ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type ValueTuple."
  },
  "api/MessagePack.Formatters.VersionFormatter.html": {
    "href": "api/MessagePack.Formatters.VersionFormatter.html",
    "title": "Class VersionFormatter | Snapshot",
    "keywords": "Class VersionFormatter Namespace MessagePack.Formatters Assembly MessagePack.dll public sealed class VersionFormatter : IMessagePackFormatter<Version?> Inheritance object VersionFormatter Implements IMessagePackFormatter<Version> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Instance public static readonly IMessagePackFormatter<Version?> Instance Field Value IMessagePackFormatter<Version> Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Version? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Version. Returns Version The deserialized value. Serialize(ref MessagePackWriter, Version?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Version? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Version The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type Version."
  },
  "api/MessagePack.Formatters.html": {
    "href": "api/MessagePack.Formatters.html",
    "title": "Namespace MessagePack.Formatters | Snapshot",
    "keywords": "Namespace MessagePack.Formatters Classes ArrayFormatter<T> ArraySegmentFormatter<T> BigIntegerFormatter BitArrayFormatter BooleanArrayFormatter BooleanFormatter ByteArrayFormatter Serializes a byte array as a bin type. Deserializes a bin type or an array of byte-sized integers into a byte array. ByteArraySegmentFormatter ByteFormatter ByteMemoryFormatter ByteReadOnlyMemoryFormatter ByteReadOnlySequenceFormatter CharArrayFormatter CharFormatter CollectionFormatterBase<TElement, TCollection> CollectionFormatterBase<TElement, TIntermediate, TCollection> CollectionFormatterBase<TElement, TIntermediate, TEnumerator, TCollection> ComplexFormatter ConcurrentBagFormatter<T> ConcurrentDictionaryFormatter<TKey, TValue> ConcurrentQueueFormatter<T> ConcurrentStackFormatter<T> DateTimeArrayFormatter DateTimeFormatter DateTimeOffsetFormatter DecimalFormatter DictionaryFormatterBase<TKey, TValue, TDictionary> DictionaryFormatterBase<TKey, TValue, TIntermediate, TDictionary> DictionaryFormatterBase<TKey, TValue, TIntermediate, TEnumerator, TDictionary> DictionaryFormatter<TKey, TValue> DoubleArrayFormatter DoubleFormatter DynamicObjectTypeFallbackFormatter This formatter can serialize any value whose static type is object for which another resolver can provide a formatter for the runtime type. Its deserialization is limited to forwarding all calls to the PrimitiveObjectFormatter. EnumAsStringFormatter<T> ExpandoObjectFormatter ForceByteBlockFormatter ForceInt16BlockArrayFormatter ForceInt16BlockFormatter ForceInt32BlockArrayFormatter ForceInt32BlockFormatter ForceInt64BlockArrayFormatter ForceInt64BlockFormatter ForceSByteBlockArrayFormatter ForceSByteBlockFormatter ForceTypelessFormatter<T> Force serialize object as typeless. ForceUInt16BlockArrayFormatter ForceUInt16BlockFormatter ForceUInt32BlockArrayFormatter ForceUInt32BlockFormatter ForceUInt64BlockArrayFormatter ForceUInt64BlockFormatter FourDimensionalArrayFormatter<T> GenericCollectionFormatter<TElement, TCollection> GenericDictionaryFormatter<TKey, TValue, TDictionary> GenericEnumFormatter<T> GenericEnumerableFormatter<TElement, TCollection> GenericReadOnlyDictionaryFormatter<TKey, TValue, TDictionary> GuidFormatter HashSetFormatter<T> IgnoreFormatter<T> Int16ArrayFormatter Int16Formatter Int32ArrayFormatter Int32Formatter Int64ArrayFormatter Int64Formatter InterfaceCollectionFormatter2<T> InterfaceCollectionFormatter<T> InterfaceDictionaryFormatter<TKey, TValue> InterfaceEnumerableFormatter<T> InterfaceGroupingFormatter<TKey, TElement> InterfaceListFormatter2<T> InterfaceListFormatter<T> InterfaceLookupFormatter<TKey, TElement> InterfaceReadOnlyCollectionFormatter<T> InterfaceReadOnlyDictionaryFormatter<TKey, TValue> InterfaceReadOnlyListFormatter<T> InterfaceSetFormatter<T> KeyValuePairFormatter<TKey, TValue> LazyFormatter<T> LinkedListFormatter<T> ListFormatter<T> MemoryFormatter<T> NativeDateTimeArrayFormatter NativeDateTimeFormatter Serialize by .NET native DateTime binary format. NativeDecimalFormatter NativeGuidFormatter NilFormatter NonGenericDictionaryFormatter<T> NonGenericInterfaceCollectionFormatter NonGenericInterfaceDictionaryFormatter NonGenericInterfaceEnumerableFormatter NonGenericInterfaceListFormatter NonGenericListFormatter<T> NullableBooleanFormatter NullableByteFormatter NullableCharFormatter NullableDateTimeFormatter NullableDoubleFormatter NullableForceByteBlockFormatter NullableForceInt16BlockFormatter NullableForceInt32BlockFormatter NullableForceInt64BlockFormatter NullableForceSByteBlockFormatter NullableForceUInt16BlockFormatter NullableForceUInt32BlockFormatter NullableForceUInt64BlockFormatter NullableFormatter<T> NullableInt16Formatter NullableInt32Formatter NullableInt64Formatter NullableNilFormatter NullableSByteFormatter NullableSingleFormatter NullableStringArrayFormatter NullableStringFormatter NullableUInt16Formatter NullableUInt32Formatter NullableUInt64Formatter ObservableCollectionFormatter<T> PrimitiveObjectFormatter QueueFormatter<T> ReadOnlyCollectionFormatter<T> ReadOnlyDictionaryFormatter<TKey, TValue> ReadOnlyMemoryFormatter<T> ReadOnlyObservableCollectionFormatter<T> ReadOnlySequenceFormatter<T> SByteArrayFormatter SByteFormatter SingleArrayFormatter SingleFormatter SortedDictionaryFormatter<TKey, TValue> SortedListFormatter<TKey, TValue> StackFormatter<T> StaticNullableFormatter<T> StringBuilderFormatter StringInterningFormatter A string formatter that interns strings on deserialization. ThreeDimensionalArrayFormatter<T> TimeSpanFormatter TupleFormatter<T1> TupleFormatter<T1, T2> TupleFormatter<T1, T2, T3> TupleFormatter<T1, T2, T3, T4> TupleFormatter<T1, T2, T3, T4, T5> TupleFormatter<T1, T2, T3, T4, T5, T6> TupleFormatter<T1, T2, T3, T4, T5, T6, T7> TupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> TwoDimensionalArrayFormatter<T> TypeFormatter<T> Serializes any instance of Type by its AssemblyQualifiedName value. TypelessFormatter For object field that holds derived from object value, ex: var arr = new object[] { 1, \"a\", new Model() };. UInt16ArrayFormatter UInt16Formatter UInt32ArrayFormatter UInt32Formatter UInt64ArrayFormatter UInt64Formatter UriFormatter ValueTupleFormatter<T1> ValueTupleFormatter<T1, T2> ValueTupleFormatter<T1, T2, T3> ValueTupleFormatter<T1, T2, T3, T4> ValueTupleFormatter<T1, T2, T3, T4, T5> ValueTupleFormatter<T1, T2, T3, T4, T5, T6> ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7> ValueTupleFormatter<T1, T2, T3, T4, T5, T6, T7, TRest> VersionFormatter Interfaces IMessagePackFormatter<T> The contract for serialization of some specific type."
  },
  "api/MessagePack.IFormatterResolver.html": {
    "href": "api/MessagePack.IFormatterResolver.html",
    "title": "Interface IFormatterResolver | Snapshot",
    "keywords": "Interface IFormatterResolver Namespace MessagePack Assembly MessagePack.dll Allows querying for a formatter for serializing or deserializing a particular Type. public interface IFormatterResolver Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.IMessagePackSerializationCallbackReceiver.html": {
    "href": "api/MessagePack.IMessagePackSerializationCallbackReceiver.html",
    "title": "Interface IMessagePackSerializationCallbackReceiver | Snapshot",
    "keywords": "Interface IMessagePackSerializationCallbackReceiver Namespace MessagePack Assembly MessagePack.Annotations.dll public interface IMessagePackSerializationCallbackReceiver Methods OnAfterDeserialize() void OnAfterDeserialize() OnBeforeSerialize() void OnBeforeSerialize()"
  },
  "api/MessagePack.IgnoreMemberAttribute.html": {
    "href": "api/MessagePack.IgnoreMemberAttribute.html",
    "title": "Class IgnoreMemberAttribute | Snapshot",
    "keywords": "Class IgnoreMemberAttribute Namespace MessagePack Assembly MessagePack.Annotations.dll [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public class IgnoreMemberAttribute : Attribute, _Attribute Inheritance object Attribute IgnoreMemberAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MessagePack.Internal.AutomataDictionary.html": {
    "href": "api/MessagePack.Internal.AutomataDictionary.html",
    "title": "Class AutomataDictionary | Snapshot",
    "keywords": "Class AutomataDictionary Namespace MessagePack.Internal Assembly MessagePack.dll public class AutomataDictionary : IEnumerable<KeyValuePair<string?, int>>, IEnumerable Inheritance object AutomataDictionary Implements IEnumerable<KeyValuePair<string, int>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This code is used by dynamically generated code as well as AOT generated code, and thus must be public for the \"C# generated and compiled into saved assembly\" scenario. Constructors AutomataDictionary() public AutomataDictionary() Methods Add(string, int) public void Add(string str, int value) Parameters str string value int EmitMatch(ILGenerator, LocalBuilder, LocalBuilder, Action<KeyValuePair<string?, int>>, Action) public void EmitMatch(ILGenerator il, LocalBuilder bytesSpan, LocalBuilder key, Action<KeyValuePair<string?, int>> onFound, Action onNotFound) Parameters il ILGenerator bytesSpan LocalBuilder key LocalBuilder onFound Action<KeyValuePair<string, int>> onNotFound Action GetEnumerator() public IEnumerator<KeyValuePair<string?, int>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, int>> ToString() public override string ToString() Returns string TryGetValue(in ReadOnlySequence<byte>, out int) public bool TryGetValue(in ReadOnlySequence<byte> bytes, out int value) Parameters bytes ReadOnlySequence<byte> value int Returns bool TryGetValue(ReadOnlySpan<byte>, out int) public bool TryGetValue(ReadOnlySpan<byte> bytes, out int value) Parameters bytes ReadOnlySpan<byte> value int Returns bool"
  },
  "api/MessagePack.Internal.AutomataKeyGen.html": {
    "href": "api/MessagePack.Internal.AutomataKeyGen.html",
    "title": "Class AutomataKeyGen | Snapshot",
    "keywords": "Class AutomataKeyGen Namespace MessagePack.Internal Assembly MessagePack.dll public static class AutomataKeyGen Inheritance object AutomataKeyGen Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This is used by dynamically generated code. It can be made internal after we enable our dynamic assemblies to access internals. But that trick may require net46, so maybe we should leave this as public. Fields GetKeyMethod public static readonly MethodInfo GetKeyMethod Field Value MethodInfo Methods GetKey(ref ReadOnlySpan<byte>) public static ulong GetKey(ref ReadOnlySpan<byte> span) Parameters span ReadOnlySpan<byte> Returns ulong"
  },
  "api/MessagePack.Internal.ByteArrayStringHashTable.html": {
    "href": "api/MessagePack.Internal.ByteArrayStringHashTable.html",
    "title": "Class ByteArrayStringHashTable | Snapshot",
    "keywords": "Class ByteArrayStringHashTable Namespace MessagePack.Internal Assembly MessagePack.dll public class ByteArrayStringHashTable : IEnumerable<KeyValuePair<string, int>>, IEnumerable Inheritance object ByteArrayStringHashTable Implements IEnumerable<KeyValuePair<string, int>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ByteArrayStringHashTable(int) public ByteArrayStringHashTable(int capacity) Parameters capacity int ByteArrayStringHashTable(int, float) public ByteArrayStringHashTable(int capacity, float loadFactor) Parameters capacity int loadFactor float Methods Add(byte[], int) public void Add(byte[] key, int value) Parameters key byte[] value int Add(string, int) public void Add(string key, int value) Parameters key string value int GetEnumerator() public IEnumerator<KeyValuePair<string, int>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, int>> TryGetValue(in ReadOnlySequence<byte>, out int) public bool TryGetValue(in ReadOnlySequence<byte> key, out int value) Parameters key ReadOnlySequence<byte> value int Returns bool TryGetValue(ReadOnlySpan<byte>, out int) public bool TryGetValue(ReadOnlySpan<byte> key, out int value) Parameters key ReadOnlySpan<byte> value int Returns bool"
  },
  "api/MessagePack.Internal.RuntimeTypeHandleEqualityComparer.html": {
    "href": "api/MessagePack.Internal.RuntimeTypeHandleEqualityComparer.html",
    "title": "Class RuntimeTypeHandleEqualityComparer | Snapshot",
    "keywords": "Class RuntimeTypeHandleEqualityComparer Namespace MessagePack.Internal Assembly MessagePack.dll public class RuntimeTypeHandleEqualityComparer : IEqualityComparer<RuntimeTypeHandle> Inheritance object RuntimeTypeHandleEqualityComparer Implements IEqualityComparer<RuntimeTypeHandle> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Default public static readonly IEqualityComparer<RuntimeTypeHandle> Default Field Value IEqualityComparer<RuntimeTypeHandle> Methods Equals(RuntimeTypeHandle, RuntimeTypeHandle) public bool Equals(RuntimeTypeHandle x, RuntimeTypeHandle y) Parameters x RuntimeTypeHandle y RuntimeTypeHandle Returns bool GetHashCode(RuntimeTypeHandle) public int GetHashCode(RuntimeTypeHandle obj) Parameters obj RuntimeTypeHandle Returns int"
  },
  "api/MessagePack.Internal.UnsafeMemory.html": {
    "href": "api/MessagePack.Internal.UnsafeMemory.html",
    "title": "Class UnsafeMemory | Snapshot",
    "keywords": "Class UnsafeMemory Namespace MessagePack.Internal Assembly MessagePack.dll public static class UnsafeMemory Inheritance object UnsafeMemory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Is32Bit public static readonly bool Is32Bit Field Value bool"
  },
  "api/MessagePack.Internal.UnsafeMemory32.html": {
    "href": "api/MessagePack.Internal.UnsafeMemory32.html",
    "title": "Class UnsafeMemory32 | Snapshot",
    "keywords": "Class UnsafeMemory32 Namespace MessagePack.Internal Assembly MessagePack.dll public static class UnsafeMemory32 Inheritance object UnsafeMemory32 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteRaw1(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw1(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw10(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw10(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw11(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw11(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw12(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw12(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw13(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw13(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw14(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw14(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw15(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw15(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw16(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw16(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw17(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw17(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw18(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw18(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw19(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw19(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw2(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw2(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw20(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw20(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw21(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw21(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw22(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw22(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw23(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw23(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw24(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw24(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw25(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw25(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw26(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw26(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw27(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw27(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw28(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw28(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw29(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw29(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw3(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw3(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw30(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw30(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw31(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw31(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw4(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw4(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw5(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw5(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw6(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw6(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw7(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw7(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw8(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw8(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw9(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw9(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte>"
  },
  "api/MessagePack.Internal.UnsafeMemory64.html": {
    "href": "api/MessagePack.Internal.UnsafeMemory64.html",
    "title": "Class UnsafeMemory64 | Snapshot",
    "keywords": "Class UnsafeMemory64 Namespace MessagePack.Internal Assembly MessagePack.dll public static class UnsafeMemory64 Inheritance object UnsafeMemory64 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteRaw1(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw1(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw10(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw10(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw11(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw11(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw12(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw12(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw13(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw13(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw14(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw14(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw15(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw15(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw16(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw16(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw17(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw17(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw18(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw18(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw19(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw19(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw2(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw2(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw20(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw20(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw21(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw21(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw22(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw22(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw23(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw23(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw24(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw24(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw25(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw25(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw26(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw26(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw27(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw27(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw28(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw28(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw29(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw29(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw3(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw3(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw30(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw30(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw31(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw31(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw4(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw4(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw5(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw5(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw6(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw6(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw7(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw7(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw8(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw8(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte> WriteRaw9(ref MessagePackWriter, ReadOnlySpan<byte>) public static void WriteRaw9(ref MessagePackWriter writer, ReadOnlySpan<byte> src) Parameters writer MessagePackWriter src ReadOnlySpan<byte>"
  },
  "api/MessagePack.Internal.html": {
    "href": "api/MessagePack.Internal.html",
    "title": "Namespace MessagePack.Internal | Snapshot",
    "keywords": "Namespace MessagePack.Internal Classes AutomataDictionary AutomataKeyGen ByteArrayStringHashTable RuntimeTypeHandleEqualityComparer UnsafeMemory UnsafeMemory32 UnsafeMemory64"
  },
  "api/MessagePack.KeyAttribute.html": {
    "href": "api/MessagePack.KeyAttribute.html",
    "title": "Class KeyAttribute | Snapshot",
    "keywords": "Class KeyAttribute Namespace MessagePack Assembly MessagePack.Annotations.dll [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public class KeyAttribute : Attribute, _Attribute Inheritance object Attribute KeyAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors KeyAttribute(int) public KeyAttribute(int x) Parameters x int KeyAttribute(string) public KeyAttribute(string x) Parameters x string Properties IntKey public int? IntKey { get; } Property Value int? StringKey public string? StringKey { get; } Property Value string"
  },
  "api/MessagePack.MessagePackCode.html": {
    "href": "api/MessagePack.MessagePackCode.html",
    "title": "Class MessagePackCode | Snapshot",
    "keywords": "Class MessagePackCode Namespace MessagePack Assembly MessagePack.dll The core type codes as defined by msgpack. public static class MessagePackCode Inheritance object MessagePackCode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Array16 public const byte Array16 = 220 Field Value byte Array32 public const byte Array32 = 221 Field Value byte Bin16 public const byte Bin16 = 197 Field Value byte Bin32 public const byte Bin32 = 198 Field Value byte Bin8 public const byte Bin8 = 196 Field Value byte Ext16 public const byte Ext16 = 200 Field Value byte Ext32 public const byte Ext32 = 201 Field Value byte Ext8 public const byte Ext8 = 199 Field Value byte False public const byte False = 194 Field Value byte FixExt1 public const byte FixExt1 = 212 Field Value byte FixExt16 public const byte FixExt16 = 216 Field Value byte FixExt2 public const byte FixExt2 = 213 Field Value byte FixExt4 public const byte FixExt4 = 214 Field Value byte FixExt8 public const byte FixExt8 = 215 Field Value byte Float32 public const byte Float32 = 202 Field Value byte Float64 public const byte Float64 = 203 Field Value byte Int16 public const byte Int16 = 209 Field Value byte Int32 public const byte Int32 = 210 Field Value byte Int64 public const byte Int64 = 211 Field Value byte Int8 public const byte Int8 = 208 Field Value byte Map16 public const byte Map16 = 222 Field Value byte Map32 public const byte Map32 = 223 Field Value byte MaxFixArray public const byte MaxFixArray = 159 Field Value byte MaxFixInt public const byte MaxFixInt = 127 Field Value byte MaxFixMap public const byte MaxFixMap = 143 Field Value byte MaxFixStr public const byte MaxFixStr = 191 Field Value byte MaxNegativeFixInt public const byte MaxNegativeFixInt = 255 Field Value byte MinFixArray public const byte MinFixArray = 144 Field Value byte MinFixInt public const byte MinFixInt = 0 Field Value byte MinFixMap public const byte MinFixMap = 128 Field Value byte MinFixStr public const byte MinFixStr = 160 Field Value byte MinNegativeFixInt public const byte MinNegativeFixInt = 224 Field Value byte NeverUsed public const byte NeverUsed = 193 Field Value byte Nil public const byte Nil = 192 Field Value byte Str16 public const byte Str16 = 218 Field Value byte Str32 public const byte Str32 = 219 Field Value byte Str8 public const byte Str8 = 217 Field Value byte True public const byte True = 195 Field Value byte UInt16 public const byte UInt16 = 205 Field Value byte UInt32 public const byte UInt32 = 206 Field Value byte UInt64 public const byte UInt64 = 207 Field Value byte UInt8 public const byte UInt8 = 204 Field Value byte Methods ToFormatName(byte) public static string ToFormatName(byte code) Parameters code byte Returns string ToMessagePackType(byte) public static MessagePackType ToMessagePackType(byte code) Parameters code byte Returns MessagePackType See Also https://github.com/msgpack/msgpack/blob/master/spec.md#overview"
  },
  "api/MessagePack.MessagePackCompression.html": {
    "href": "api/MessagePack.MessagePackCompression.html",
    "title": "Enum MessagePackCompression | Snapshot",
    "keywords": "Enum MessagePackCompression Namespace MessagePack Assembly MessagePack.dll Identifies the various compression schemes which might be applied at the msgpack level. public enum MessagePackCompression Fields Lz4Block = 1 Compresses an entire msgpack sequence as a single lz4 block format. This is the simple compression that achieves best compression ratio, at the cost of copying the entire sequence when necessary to get contiguous memory. Lz4BlockArray = 2 Compresses an entire msgpack sequence as a array of lz4 block format. This is compressed/decompressed in chunks that do not consume LOH, but the compression ratio is slightly sacrificed. None = 0 No compression is applied at the msgpack level."
  },
  "api/MessagePack.MessagePackFormatterAttribute.html": {
    "href": "api/MessagePack.MessagePackFormatterAttribute.html",
    "title": "Class MessagePackFormatterAttribute | Snapshot",
    "keywords": "Class MessagePackFormatterAttribute Namespace MessagePack Assembly MessagePack.Annotations.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Enum|AttributeTargets.Property|AttributeTargets.Field|AttributeTargets.Interface, AllowMultiple = false, Inherited = true)] public class MessagePackFormatterAttribute : Attribute, _Attribute Inheritance object Attribute MessagePackFormatterAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessagePackFormatterAttribute(Type) public MessagePackFormatterAttribute(Type formatterType) Parameters formatterType Type MessagePackFormatterAttribute(Type, params object?[]?) public MessagePackFormatterAttribute(Type formatterType, params object?[]? arguments) Parameters formatterType Type arguments object[] Properties Arguments public object?[]? Arguments { get; } Property Value object[] FormatterType public Type FormatterType { get; } Property Value Type"
  },
  "api/MessagePack.MessagePackObjectAttribute.html": {
    "href": "api/MessagePack.MessagePackObjectAttribute.html",
    "title": "Class MessagePackObjectAttribute | Snapshot",
    "keywords": "Class MessagePackObjectAttribute Namespace MessagePack Assembly MessagePack.Annotations.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct, AllowMultiple = false, Inherited = true)] public class MessagePackObjectAttribute : Attribute, _Attribute Inheritance object Attribute MessagePackObjectAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessagePackObjectAttribute(bool) public MessagePackObjectAttribute(bool keyAsPropertyName = false) Parameters keyAsPropertyName bool Properties KeyAsPropertyName public bool KeyAsPropertyName { get; } Property Value bool"
  },
  "api/MessagePack.MessagePackRange.html": {
    "href": "api/MessagePack.MessagePackRange.html",
    "title": "Class MessagePackRange | Snapshot",
    "keywords": "Class MessagePackRange Namespace MessagePack Assembly MessagePack.dll public static class MessagePackRange Inheritance object MessagePackRange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxFixArrayCount public const int MaxFixArrayCount = 15 Field Value int MaxFixMapCount public const int MaxFixMapCount = 15 Field Value int MaxFixNegativeInt public const int MaxFixNegativeInt = -1 Field Value int MaxFixPositiveInt public const int MaxFixPositiveInt = 127 Field Value int MaxFixStringLength public const int MaxFixStringLength = 31 Field Value int MinFixNegativeInt public const int MinFixNegativeInt = -32 Field Value int MinFixStringLength public const int MinFixStringLength = 0 Field Value int"
  },
  "api/MessagePack.MessagePackReader.html": {
    "href": "api/MessagePack.MessagePackReader.html",
    "title": "Struct MessagePackReader | Snapshot",
    "keywords": "Struct MessagePackReader Namespace MessagePack Assembly MessagePack.dll A primitive types reader for the MessagePack format. public ref struct MessagePackReader Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks The MessagePack spec.. Constructors MessagePackReader(in ReadOnlySequence<byte>) Initializes a new instance of the MessagePackReader struct. public MessagePackReader(in ReadOnlySequence<byte> readOnlySequence) Parameters readOnlySequence ReadOnlySequence<byte> The sequence to read from. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. MessagePackReader(ReadOnlyMemory<byte>) Initializes a new instance of the MessagePackReader struct. public MessagePackReader(ReadOnlyMemory<byte> memory) Parameters memory ReadOnlyMemory<byte> The buffer to read from. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Properties CancellationToken Gets or sets the cancellation token for this deserialization operation. public CancellationToken CancellationToken { readonly get; set; } Property Value CancellationToken Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Consumed Gets the number of bytes consumed by the reader. public long Consumed { get; } Property Value long Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Depth Gets or sets the present depth of the object graph being deserialized. public int Depth { readonly get; set; } Property Value int Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. End Gets a value indicating whether the reader is at the end of the sequence. public bool End { get; } Property Value bool Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. IsNil Gets a value indicating whether the reader position is pointing at a nil value. public bool IsNil { get; } Property Value bool Exceptions EndOfStreamException Thrown if the end of the sequence provided to the constructor is reached before the expected end of the data. NextCode Gets the type of the next MessagePack block. public byte NextCode { get; } Property Value byte Remarks See MessagePackCode for valid message pack codes and ranges. Exceptions EndOfStreamException Thrown if the end of the sequence provided to the constructor is reached before the expected end of the data. NextMessagePackType Gets the next message pack type to be read. public MessagePackType NextMessagePackType { get; } Property Value MessagePackType Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Position Gets the current position of the reader within Sequence. public SequencePosition Position { get; } Property Value SequencePosition Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Sequence Gets the ReadOnlySequence<T> originally supplied to the constructor. public ReadOnlySequence<byte> Sequence { get; } Property Value ReadOnlySequence<byte> Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. Methods Clone(in ReadOnlySequence<byte>) Initializes a new instance of the MessagePackReader struct, with the same settings as this one, but with its own buffer to read from. public MessagePackReader Clone(in ReadOnlySequence<byte> readOnlySequence) Parameters readOnlySequence ReadOnlySequence<byte> The sequence to read from. Returns MessagePackReader The new reader. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. CreatePeekReader() Creates a new MessagePackReader at this reader's current position. The two readers may then be used independently without impacting each other. public MessagePackReader CreatePeekReader() Returns MessagePackReader A new MessagePackReader. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadArrayHeader() Read an array header from Array16, Array32, or some built-in code between MinFixArray and MaxFixArray. public int ReadArrayHeader() Returns int Exceptions EndOfStreamException Thrown if the header cannot be read in the bytes left in the Sequence or if it is clear that there are insufficient bytes remaining after the header to include all the elements the header claims to be there. MessagePackSerializationException Thrown if a code other than an array header is encountered. ReadBoolean() Reads a boolean value from either a False or True. public bool ReadBoolean() Returns bool The value. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadByte() Reads an byte value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. public byte ReadByte() Returns byte The value. Exceptions OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadBytes() Reads a span of bytes, whose length is determined by a header of one of these types: Bin8, Bin16, Bin32, or to support OldSpec compatibility: Str16, Str32, or something between MinFixStr and MaxFixStr. public ReadOnlySequence<byte>? ReadBytes() Returns ReadOnlySequence<byte>? A sequence of bytes, or null if the read token is Nil. The data is a slice from the original sequence passed to this reader's constructor. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadChar() Reads a char from any of: UInt8, UInt16, or anything between MinFixInt and MaxFixInt. public char ReadChar() Returns char A character. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadDateTime() Reads a DateTime from a value encoded with FixExt4, FixExt8, or Ext8. Expects extension type code DateTime. public DateTime ReadDateTime() Returns DateTime The value. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadDateTime(ExtensionHeader) Reads a DateTime from a value encoded with FixExt4, FixExt8, Ext8. Expects extension type code DateTime. public DateTime ReadDateTime(ExtensionHeader header) Parameters header ExtensionHeader The extension header that was already read. Returns DateTime The value. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadDouble() Reads an double value from any value encoded with: Float64, Float32, Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64, or some value between MinNegativeFixInt and MaxNegativeFixInt, or some value between MinFixInt and MaxFixInt. public double ReadDouble() Returns double The value. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadExtensionFormat() Reads an extension format header and data, based on one of these codes: FixExt1, FixExt2, FixExt4, FixExt8, FixExt16, Ext8, Ext16, or Ext32. public ExtensionResult ReadExtensionFormat() Returns ExtensionResult The extension format. The data is a slice from the original sequence passed to this reader's constructor. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadExtensionFormatHeader() Reads an extension format header, based on one of these codes: FixExt1, FixExt2, FixExt4, FixExt8, FixExt16, Ext8, Ext16, or Ext32. public ExtensionHeader ReadExtensionFormatHeader() Returns ExtensionHeader The extension header. Exceptions EndOfStreamException Thrown if the header cannot be read in the bytes left in the Sequence or if it is clear that there are insufficient bytes remaining after the header to include all the bytes the header claims to be there. MessagePackSerializationException Thrown if a code other than an extension format header is encountered. ReadInt16() Reads an short value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. public short ReadInt16() Returns short The value. Exceptions OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadInt32() Reads an int value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. public int ReadInt32() Returns int The value. Exceptions OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadInt64() Reads an long value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. public long ReadInt64() Returns long The value. Exceptions OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadMapHeader() Read a map header from Map16, Map32, or some built-in code between MinFixMap and MaxFixMap. public int ReadMapHeader() Returns int The number of key=value pairs in the map. Exceptions EndOfStreamException Thrown if the header cannot be read in the bytes left in the Sequence or if it is clear that there are insufficient bytes remaining after the header to include all the elements the header claims to be there. MessagePackSerializationException Thrown if a code other than an map header is encountered. ReadNil() Reads a Nil value. public Nil ReadNil() Returns Nil A nil value. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadRaw() Reads the next MessagePack primitive. public ReadOnlySequence<byte> ReadRaw() Returns ReadOnlySequence<byte> The raw MessagePack sequence. Remarks The entire primitive is read, including content of maps or arrays, or any other type with payloads. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadRaw(long) Reads a sequence of bytes without any decoding. public ReadOnlySequence<byte> ReadRaw(long length) Parameters length long The number of bytes to read. Returns ReadOnlySequence<byte> The sequence of bytes read. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadSByte() Reads an sbyte value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. public sbyte ReadSByte() Returns sbyte The value. Exceptions OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadSingle() Reads an float value from any value encoded with: Float32, Int8, Int16, Int32, Int64, UInt8, UInt16, UInt32, UInt64, or some value between MinNegativeFixInt and MaxNegativeFixInt, or some value between MinFixInt and MaxFixInt. public float ReadSingle() Returns float The value. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadString() Reads a string, whose length is determined by a header of one of these types: Str8, Str16, Str32, or a code between MinFixStr and MaxFixStr. public string? ReadString() Returns string A string, or null if the current msgpack token is Nil. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadStringSequence() Reads a string of bytes, whose length is determined by a header of one of these types: Str8, Str16, Str32, or a code between MinFixStr and MaxFixStr. public ReadOnlySequence<byte>? ReadStringSequence() Returns ReadOnlySequence<byte>? The sequence of bytes, or null if the read token is Nil. The data is a slice from the original sequence passed to this reader's constructor. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. ReadUInt16() Reads an ushort value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. public ushort ReadUInt16() Returns ushort The value. Exceptions OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadUInt32() Reads an uint value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. public uint ReadUInt32() Returns uint The value. Exceptions OverflowException Thrown when the value exceeds what can be stored in the returned type. ReadUInt64() Reads an ulong value from: Some value between MinNegativeFixInt and MaxNegativeFixInt, Some value between MinFixInt and MaxFixInt, or any of the other MsgPack integer types. public ulong ReadUInt64() Returns ulong The value. Exceptions OverflowException Thrown when the value exceeds what can be stored in the returned type. Skip() Advances the reader to the next MessagePack primitive to be read. public void Skip() Remarks The entire primitive is skipped, including content of maps or arrays, or any other type with payloads. To get the raw MessagePack sequence that was skipped, use ReadRaw() instead. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value. TryReadArrayHeader(out int) Reads an array header from Array16, Array32, or some built-in code between MinFixArray and MaxFixArray if there is sufficient buffer to read it. public bool TryReadArrayHeader(out int count) Parameters count int Receives the number of elements in the array if the entire array header could be read. Returns bool true if there was sufficient buffer and an array header was found; false if the buffer incompletely describes an array header. Remarks When this method returns false the position of the reader is left in an undefined position. The caller is expected to recreate the reader (presumably with a longer sequence to read from) before continuing. Exceptions MessagePackSerializationException Thrown if a code other than an array header is encountered. TryReadExtensionFormatHeader(out ExtensionHeader) Reads an extension format header, based on one of these codes: FixExt1, FixExt2, FixExt4, FixExt8, FixExt16, Ext8, Ext16, or Ext32 if there is sufficient buffer to read it. public bool TryReadExtensionFormatHeader(out ExtensionHeader extensionHeader) Parameters extensionHeader ExtensionHeader Receives the extension header if the remaining bytes in the Sequence fully describe the header. Returns bool The number of key=value pairs in the map. Remarks When this method returns false the position of the reader is left in an undefined position. The caller is expected to recreate the reader (presumably with a longer sequence to read from) before continuing. Exceptions MessagePackSerializationException Thrown if a code other than an extension format header is encountered. TryReadMapHeader(out int) Reads a map header from Map16, Map32, or some built-in code between MinFixMap and MaxFixMap if there is sufficient buffer to read it. public bool TryReadMapHeader(out int count) Parameters count int Receives the number of key=value pairs in the map if the entire map header can be read. Returns bool true if there was sufficient buffer and a map header was found; false if the buffer incompletely describes an map header. Remarks When this method returns false the position of the reader is left in an undefined position. The caller is expected to recreate the reader (presumably with a longer sequence to read from) before continuing. Exceptions MessagePackSerializationException Thrown if a code other than an map header is encountered. TryReadNil() Reads nil if it is the next token. public bool TryReadNil() Returns bool true if the next token was nil; false otherwise. Exceptions EndOfStreamException Thrown if the end of the sequence provided to the constructor is reached before the expected end of the data. TryReadStringSpan(out ReadOnlySpan<byte>) Reads a string of bytes, whose length is determined by a header of one of these types: Str8, Str16, Str32, or a code between MinFixStr and MaxFixStr. public bool TryReadStringSpan(out ReadOnlySpan<byte> span) Parameters span ReadOnlySpan<byte> Receives the span to the string. Returns bool true if the string is contiguous in memory such that it could be set as a single span. false if the read token is Nil or the string is not in a contiguous span. Remarks Callers should generally be prepared for a false result and failover to calling ReadStringSequence() which can represent a null result and handle strings that are not contiguous in memory. Exceptions MessagePackSerializationException Thrown when reading methods fail due to invalid data. EndOfStreamException Thrown by reading methods when there are not enough bytes to read the required value."
  },
  "api/MessagePack.MessagePackSecurity.html": {
    "href": "api/MessagePack.MessagePackSecurity.html",
    "title": "Class MessagePackSecurity | Snapshot",
    "keywords": "Class MessagePackSecurity Namespace MessagePack Assembly MessagePack.dll Settings related to security, particularly relevant when deserializing data from untrusted sources. public class MessagePackSecurity Inheritance object MessagePackSecurity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessagePackSecurity(MessagePackSecurity) Initializes a new instance of the MessagePackSecurity class with properties copied from a provided template. protected MessagePackSecurity(MessagePackSecurity copyFrom) Parameters copyFrom MessagePackSecurity The template to copy from. Fields TrustedData Gets an instance preconfigured with settings that omit all protections. Useful for deserializing fully-trusted and valid msgpack sequences. public static readonly MessagePackSecurity TrustedData Field Value MessagePackSecurity UntrustedData Gets an instance preconfigured with protections applied with reasonable settings for deserializing untrusted msgpack sequences. public static readonly MessagePackSecurity UntrustedData Field Value MessagePackSecurity Properties HashCollisionResistant Gets a value indicating whether data to be deserialized is untrusted and thus should not be allowed to create dictionaries or other hash-based collections unless the hashed type has a hash collision resistant implementation available. This can mitigate some denial of service attacks when deserializing untrusted code. public bool HashCollisionResistant { get; } Property Value bool The value is false for TrustedData and true for UntrustedData. MaximumObjectGraphDepth Gets the maximum depth of an object graph that may be deserialized. public int MaximumObjectGraphDepth { get; } Property Value int Remarks This value can be reduced to avoid a stack overflow that would crash the process when deserializing a msgpack sequence designed to cause deep recursion. A very short callstack on a thread with 1MB of total stack space might deserialize ~2000 nested arrays before crashing due to a stack overflow. Since stack space occupied may vary by the kind of object deserialized, a conservative value for this property to defend against stack overflow attacks might be 500. Methods Clone() Creates a new instance that is a copy of this one. protected virtual MessagePackSecurity Clone() Returns MessagePackSecurity Remarks Derived types should override this method to instantiate their own derived type. DepthStep(ref MessagePackReader) Checks the depth of the deserializing graph and increments it by 1. public void DepthStep(ref MessagePackReader reader) Parameters reader MessagePackReader The reader that is involved in deserialization. Remarks Callers should decrement Depth after exiting that edge in the graph. Exceptions InsufficientExecutionStackException Thrown if Depth is already at or exceeds MaximumObjectGraphDepth. GetEqualityComparer() Gets an IEqualityComparer that is suitable to use with a hash-based collection. public IEqualityComparer GetEqualityComparer() Returns IEqualityComparer The IEqualityComparer to use. Remarks When HashCollisionResistant is active, this will be a collision resistant instance which may reject certain key types. When HashCollisionResistant is not active, this will be Default. GetEqualityComparer<T>() Gets an IEqualityComparer<T> that is suitable to use with a hash-based collection. public IEqualityComparer<T> GetEqualityComparer<T>() Returns IEqualityComparer<T> The IEqualityComparer<T> to use. Type Parameters T The type of key that will be hashed in the collection. Remarks When HashCollisionResistant is active, this will be a collision resistant instance which may reject certain key types. When HashCollisionResistant is not active, this will be Default. GetHashCollisionResistantEqualityComparer() Returns a hash collision resistant equality comparer. protected virtual IEqualityComparer GetHashCollisionResistantEqualityComparer() Returns IEqualityComparer A hash collision resistant equality comparer. GetHashCollisionResistantEqualityComparer<T>() Returns a hash collision resistant equality comparer. protected virtual IEqualityComparer<T> GetHashCollisionResistantEqualityComparer<T>() Returns IEqualityComparer<T> A hash collision resistant equality comparer. Type Parameters T The type of key that will be hashed in the collection. WithHashCollisionResistant(bool) Gets a copy of these options with the HashCollisionResistant property set to a new value. public MessagePackSecurity WithHashCollisionResistant(bool hashCollisionResistant) Parameters hashCollisionResistant bool The new value for the HashCollisionResistant property. Returns MessagePackSecurity The new instance; or the original if the value is unchanged. WithMaximumObjectGraphDepth(int) Gets a copy of these options with the MaximumObjectGraphDepth property set to a new value. public MessagePackSecurity WithMaximumObjectGraphDepth(int maximumObjectGraphDepth) Parameters maximumObjectGraphDepth int The new value for the MaximumObjectGraphDepth property. Returns MessagePackSecurity The new instance; or the original if the value is unchanged."
  },
  "api/MessagePack.MessagePackSerializationException.html": {
    "href": "api/MessagePack.MessagePackSerializationException.html",
    "title": "Class MessagePackSerializationException | Snapshot",
    "keywords": "Class MessagePackSerializationException Namespace MessagePack Assembly MessagePack.dll An exception thrown during serializing an object graph or deserializing a messagepack sequence. [Serializable] public class MessagePackSerializationException : Exception, _Exception, ISerializable Inheritance object Exception MessagePackSerializationException Implements _Exception ISerializable Derived FormatterNotRegisteredException TinyJsonException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MessagePackSerializationException() Initializes a new instance of the MessagePackSerializationException class. public MessagePackSerializationException() MessagePackSerializationException(SerializationInfo, StreamingContext) Initializes a new instance of the MessagePackSerializationException class. protected MessagePackSerializationException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo Serialization info. context StreamingContext Serialization context. MessagePackSerializationException(string?) Initializes a new instance of the MessagePackSerializationException class. public MessagePackSerializationException(string? message) Parameters message string The exception message. MessagePackSerializationException(string?, Exception?) Initializes a new instance of the MessagePackSerializationException class. public MessagePackSerializationException(string? message, Exception? inner) Parameters message string The exception message. inner Exception The inner exception."
  },
  "api/MessagePack.MessagePackSerializer.html": {
    "href": "api/MessagePack.MessagePackSerializer.html",
    "title": "Class MessagePackSerializer | Snapshot",
    "keywords": "Class MessagePackSerializer Namespace MessagePack Assembly MessagePack.dll High-Level API of MessagePack for C#. public static class MessagePackSerializer Inheritance object MessagePackSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultOptions Gets or sets the default set of options to use when not explicitly specified for a method call. public static MessagePackSerializerOptions DefaultOptions { get; set; } Property Value MessagePackSerializerOptions The default value is Standard. Remarks This is an AppDomain or process-wide setting. If you're writing a library, you should NOT set or rely on this property but should instead pass in Standard (or the required options) explicitly to every method call to guarantee appropriate behavior in any application. If you are an app author, realize that setting this property impacts the entire application so it should only be set once, and before any use of MessagePackSerializer occurs. Methods ConvertFromJson(TextReader, ref MessagePackWriter, MessagePackSerializerOptions?) Translates the given JSON to MessagePack. public static void ConvertFromJson(TextReader reader, ref MessagePackWriter writer, MessagePackSerializerOptions? options = null) Parameters reader TextReader writer MessagePackWriter options MessagePackSerializerOptions ConvertFromJson(string, MessagePackSerializerOptions?, CancellationToken) Translates the given JSON to MessagePack. public static byte[] ConvertFromJson(string str, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters str string options MessagePackSerializerOptions cancellationToken CancellationToken Returns byte[] ConvertFromJson(string, ref MessagePackWriter, MessagePackSerializerOptions?) Translates the given JSON to MessagePack. public static void ConvertFromJson(string str, ref MessagePackWriter writer, MessagePackSerializerOptions? options = null) Parameters str string writer MessagePackWriter options MessagePackSerializerOptions ConvertToJson(ref MessagePackReader, TextWriter, MessagePackSerializerOptions?) Convert a message-pack binary to a JSON string. public static void ConvertToJson(ref MessagePackReader reader, TextWriter jsonWriter, MessagePackSerializerOptions? options = null) Parameters reader MessagePackReader jsonWriter TextWriter options MessagePackSerializerOptions Exceptions MessagePackSerializationException Thrown if an error occurs while reading the messagepack data or writing out the JSON. ConvertToJson(in ReadOnlySequence<byte>, MessagePackSerializerOptions?, CancellationToken) Convert a message-pack binary to a JSON string. public static string ConvertToJson(in ReadOnlySequence<byte> bytes, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters bytes ReadOnlySequence<byte> options MessagePackSerializerOptions cancellationToken CancellationToken Returns string Exceptions MessagePackSerializationException Thrown if an error occurs while reading the messagepack data or writing out the JSON. ConvertToJson(ReadOnlyMemory<byte>, MessagePackSerializerOptions?, CancellationToken) Convert a message-pack binary to a JSON string. public static string ConvertToJson(ReadOnlyMemory<byte> bytes, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters bytes ReadOnlyMemory<byte> options MessagePackSerializerOptions cancellationToken CancellationToken Returns string Exceptions MessagePackSerializationException Thrown if an error occurs while reading the messagepack data or writing out the JSON. Deserialize(Type, ref MessagePackReader, MessagePackSerializerOptions?) public static object? Deserialize(Type type, ref MessagePackReader reader, MessagePackSerializerOptions? options = null) Parameters type Type reader MessagePackReader options MessagePackSerializerOptions Returns object See Also Deserialize<T>(ref MessagePackReader, MessagePackSerializerOptions?) Deserialize(Type, ReadOnlySequence<byte>, MessagePackSerializerOptions?, CancellationToken) public static object? Deserialize(Type type, ReadOnlySequence<byte> bytes, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters type Type bytes ReadOnlySequence<byte> options MessagePackSerializerOptions cancellationToken CancellationToken Returns object See Also Deserialize<T>(in ReadOnlySequence<byte>, MessagePackSerializerOptions?, CancellationToken) Deserialize(Type, Stream, MessagePackSerializerOptions?, CancellationToken) public static object? Deserialize(Type type, Stream stream, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters type Type stream Stream options MessagePackSerializerOptions cancellationToken CancellationToken Returns object See Also Deserialize<T>(Stream, MessagePackSerializerOptions?, CancellationToken) Deserialize(Type, ReadOnlyMemory<byte>, MessagePackSerializerOptions?, CancellationToken) public static object? Deserialize(Type type, ReadOnlyMemory<byte> bytes, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters type Type bytes ReadOnlyMemory<byte> options MessagePackSerializerOptions cancellationToken CancellationToken Returns object See Also Deserialize<T>(ReadOnlyMemory<byte>, MessagePackSerializerOptions?, CancellationToken) DeserializeAsync(Type, Stream, MessagePackSerializerOptions?, CancellationToken) public static ValueTask<object?> DeserializeAsync(Type type, Stream stream, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters type Type stream Stream options MessagePackSerializerOptions cancellationToken CancellationToken Returns ValueTask<object> See Also DeserializeAsync<T>(Stream, MessagePackSerializerOptions?, CancellationToken) DeserializeAsync<T>(Stream, MessagePackSerializerOptions?, CancellationToken) Deserializes the entire content of a Stream. public static ValueTask<T> DeserializeAsync<T>(Stream stream, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters stream Stream The stream to deserialize from. The entire stream will be read, and the first msgpack token deserialized will be returned. If CanSeek is true on the stream, its position will be set to just after the last deserialized byte. options MessagePackSerializerOptions The options. Use null to use default options. cancellationToken CancellationToken A cancellation token. Returns ValueTask<T> The deserialized value. Type Parameters T The type of value to deserialize. Remarks If multiple top-level msgpack data structures are expected on the stream, use MessagePackStreamReader instead. Exceptions MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(ref MessagePackReader, MessagePackSerializerOptions?) Deserializes a value of a given type from a sequence of bytes. public static T Deserialize<T>(ref MessagePackReader reader, MessagePackSerializerOptions? options = null) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The options. Use null to use default options. Returns T The deserialized value. Type Parameters T The type of value to deserialize. Exceptions MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(in ReadOnlySequence<byte>, MessagePackSerializerOptions?, CancellationToken) Deserializes a value of a given type from a sequence of bytes. public static T Deserialize<T>(in ReadOnlySequence<byte> byteSequence, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters byteSequence ReadOnlySequence<byte> The sequence to deserialize from. options MessagePackSerializerOptions The options. Use null to use default options. cancellationToken CancellationToken A cancellation token. Returns T The deserialized value. Type Parameters T The type of value to deserialize. Exceptions MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(Stream, MessagePackSerializerOptions?, CancellationToken) Deserializes the entire content of a Stream. public static T Deserialize<T>(Stream stream, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters stream Stream The stream to deserialize from. The entire stream will be read, and the first msgpack token deserialized will be returned. If CanSeek is true on the stream, its position will be set to just after the last deserialized byte. options MessagePackSerializerOptions The options. Use null to use default options. cancellationToken CancellationToken A cancellation token. Returns T The deserialized value. Type Parameters T The type of value to deserialize. Remarks If multiple top-level msgpack data structures are expected on the stream, use MessagePackStreamReader instead. Exceptions MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(ReadOnlyMemory<byte>, MessagePackSerializerOptions?, out int, CancellationToken) Deserializes a value of a given type from a sequence of bytes. public static T Deserialize<T>(ReadOnlyMemory<byte> buffer, MessagePackSerializerOptions? options, out int bytesRead, CancellationToken cancellationToken = default) Parameters buffer ReadOnlyMemory<byte> The memory to deserialize from. options MessagePackSerializerOptions The options. Use null to use default options. bytesRead int The number of bytes read. cancellationToken CancellationToken A cancellation token. Returns T The deserialized value. Type Parameters T The type of value to deserialize. Exceptions MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(ReadOnlyMemory<byte>, MessagePackSerializerOptions?, CancellationToken) Deserializes a value of a given type from a sequence of bytes. public static T Deserialize<T>(ReadOnlyMemory<byte> buffer, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters buffer ReadOnlyMemory<byte> The buffer to deserialize from. options MessagePackSerializerOptions The options. Use null to use default options. cancellationToken CancellationToken A cancellation token. Returns T The deserialized value. Type Parameters T The type of value to deserialize. Exceptions MessagePackSerializationException Thrown when any error occurs during deserialization. Deserialize<T>(ReadOnlyMemory<byte>, out int, CancellationToken) Deserializes a value of a given type from a sequence of bytes. public static T Deserialize<T>(ReadOnlyMemory<byte> buffer, out int bytesRead, CancellationToken cancellationToken = default) Parameters buffer ReadOnlyMemory<byte> The memory to deserialize from. bytesRead int The number of bytes read. cancellationToken CancellationToken A cancellation token. Returns T The deserialized value. Type Parameters T The type of value to deserialize. Exceptions MessagePackSerializationException Thrown when any error occurs during deserialization. Serialize(Type, ref MessagePackWriter, object?, MessagePackSerializerOptions?) public static void Serialize(Type type, ref MessagePackWriter writer, object? obj, MessagePackSerializerOptions? options = null) Parameters type Type writer MessagePackWriter obj object options MessagePackSerializerOptions See Also Serialize<T>(ref MessagePackWriter, T, MessagePackSerializerOptions?) Serialize(Type, IBufferWriter<byte>, object?, MessagePackSerializerOptions?, CancellationToken) public static void Serialize(Type type, IBufferWriter<byte> writer, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters type Type writer IBufferWriter<byte> obj object options MessagePackSerializerOptions cancellationToken CancellationToken See Also Serialize<T>(IBufferWriter<byte>, T, MessagePackSerializerOptions?, CancellationToken) Serialize(Type, Stream, object?, MessagePackSerializerOptions?, CancellationToken) public static void Serialize(Type type, Stream stream, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters type Type stream Stream obj object options MessagePackSerializerOptions cancellationToken CancellationToken See Also Serialize<T>(Stream, T, MessagePackSerializerOptions?, CancellationToken) Serialize(Type, object?, MessagePackSerializerOptions?, CancellationToken) public static byte[] Serialize(Type type, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters type Type obj object options MessagePackSerializerOptions cancellationToken CancellationToken Returns byte[] See Also Serialize<T>(T, MessagePackSerializerOptions?, CancellationToken) SerializeAsync(Type, Stream, object?, MessagePackSerializerOptions?, CancellationToken) public static Task SerializeAsync(Type type, Stream stream, object? obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters type Type stream Stream obj object options MessagePackSerializerOptions cancellationToken CancellationToken Returns Task See Also SerializeAsync<T>(Stream, T, MessagePackSerializerOptions?, CancellationToken) SerializeAsync<T>(Stream, T, MessagePackSerializerOptions?, CancellationToken) Serializes a given value to the specified stream. public static Task SerializeAsync<T>(Stream stream, T value, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters stream Stream The stream to serialize to. value T The value to serialize. options MessagePackSerializerOptions The options. Use null to use default options. cancellationToken CancellationToken A cancellation token. Returns Task A task that completes with the result of the async serialization operation. Type Parameters T Exceptions MessagePackSerializationException Thrown when any error occurs during serialization. SerializeToJson<T>(TextWriter, T, MessagePackSerializerOptions?, CancellationToken) Serialize an object to JSON string. public static void SerializeToJson<T>(TextWriter textWriter, T obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters textWriter TextWriter obj T options MessagePackSerializerOptions cancellationToken CancellationToken Type Parameters T Exceptions MessagePackSerializationException Thrown if an error occurs during serialization. SerializeToJson<T>(T, MessagePackSerializerOptions?, CancellationToken) Serialize an object to JSON string. public static string SerializeToJson<T>(T obj, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters obj T options MessagePackSerializerOptions cancellationToken CancellationToken Returns string Type Parameters T Exceptions MessagePackSerializationException Thrown if an error occurs during serialization. Serialize<T>(ref MessagePackWriter, T, MessagePackSerializerOptions?) Serializes a given value with the specified buffer writer. public static void Serialize<T>(ref MessagePackWriter writer, T value, MessagePackSerializerOptions? options = null) Parameters writer MessagePackWriter The buffer writer to serialize with. value T The value to serialize. options MessagePackSerializerOptions The options. Use null to use default options. Type Parameters T Exceptions MessagePackSerializationException Thrown when any error occurs during serialization. Serialize<T>(IBufferWriter<byte>, T, MessagePackSerializerOptions?, CancellationToken) Serializes a given value with the specified buffer writer. public static void Serialize<T>(IBufferWriter<byte> writer, T value, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters writer IBufferWriter<byte> The buffer writer to serialize with. value T The value to serialize. options MessagePackSerializerOptions The options. Use null to use default options. cancellationToken CancellationToken A cancellation token. Type Parameters T Exceptions MessagePackSerializationException Thrown when any error occurs during serialization. Serialize<T>(Stream, T, MessagePackSerializerOptions?, CancellationToken) Serializes a given value to the specified stream. public static void Serialize<T>(Stream stream, T value, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters stream Stream The stream to serialize to. value T The value to serialize. options MessagePackSerializerOptions The options. Use null to use default options. cancellationToken CancellationToken A cancellation token. Type Parameters T Exceptions MessagePackSerializationException Thrown when any error occurs during serialization. Serialize<T>(T, MessagePackSerializerOptions?, CancellationToken) Serializes a given value with the specified buffer writer. public static byte[] Serialize<T>(T value, MessagePackSerializerOptions? options = null, CancellationToken cancellationToken = default) Parameters value T The value to serialize. options MessagePackSerializerOptions The options. Use null to use default options. cancellationToken CancellationToken A cancellation token. Returns byte[] A byte array with the serialized value. Type Parameters T Exceptions MessagePackSerializationException Thrown when any error occurs during serialization."
  },
  "api/MessagePack.MessagePackSerializerOptions.html": {
    "href": "api/MessagePack.MessagePackSerializerOptions.html",
    "title": "Class MessagePackSerializerOptions | Snapshot",
    "keywords": "Class MessagePackSerializerOptions Namespace MessagePack Assembly MessagePack.dll An immutable description of options for running the MessagePackSerializer. public class MessagePackSerializerOptions Inheritance object MessagePackSerializerOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MessagePackSerializerOptions(IFormatterResolver) Initializes a new instance of the MessagePackSerializerOptions class. public MessagePackSerializerOptions(IFormatterResolver resolver) Parameters resolver IFormatterResolver MessagePackSerializerOptions(MessagePackSerializerOptions) Initializes a new instance of the MessagePackSerializerOptions class with members initialized from an existing instance. protected MessagePackSerializerOptions(MessagePackSerializerOptions copyFrom) Parameters copyFrom MessagePackSerializerOptions The options to copy from. Properties AllowAssemblyVersionMismatch Gets a value indicating whether deserialization may instantiate types from an assembly with a different version if a matching version cannot be found. public bool AllowAssemblyVersionMismatch { get; } Property Value bool The default value is false. Compression Gets the compression scheme to apply to serialized sequences. public MessagePackCompression Compression { get; } Property Value MessagePackCompression Remarks When set to something other than None, deserialization can still work on uncompressed sequences, and serialization may not compress if msgpack sequences are short enough that compression would not likely be advantageous. CompressionMinLength Gets the length a serialized msgpack result must equal or exceed before Compression is applied. public int CompressionMinLength { get; } Property Value int The default value is 64. Remarks When compression is not applied due to a short serialized result, deserialization will still succeed even if Compression is set to something other than None. OldSpec Gets a value indicating whether to serialize with OldSpec set to some value causing messagepack spec compliance to be explicitly set to the old or new format. public bool? OldSpec { get; } Property Value bool? A null value means the MessagePackWriter's default or previous setting will be used. A non-null value will be applied to the OldSpec property for the duration of a serialization and then reverted to its prior setting. Remarks Reading always supports both new and old spec. OmitAssemblyVersion Gets a value indicating whether serialization should omit assembly version, culture and public key token metadata when using the typeless formatter. public bool OmitAssemblyVersion { get; } Property Value bool The default value is false. Resolver Gets the resolver to use for complex types. public IFormatterResolver Resolver { get; } Property Value IFormatterResolver An instance of IFormatterResolver. Never null. Exceptions ArgumentNullException Thrown if an attempt is made to set this property to null. Security Gets the security-related options for deserializing messagepack sequences. public MessagePackSecurity Security { get; } Property Value MessagePackSecurity The default value is to use TrustedData. SequencePool Gets a thread-safe pool of reusable Sequence<T> objects. public SequencePool SequencePool { get; } Property Value SequencePool The default value is the Shared instance. Standard Gets a good default set of options that uses the StandardResolver and no compression. public static MessagePackSerializerOptions Standard { get; } Property Value MessagePackSerializerOptions SuggestedContiguousMemorySize Gets the size of contiguous memory blocks in bytes that may be allocated for buffering purposes. public int SuggestedContiguousMemorySize { get; } Property Value int The default value is 1MB. Remarks Larger values may perform a bit faster, but may result in adding a runtime perf tax due to using the Large Object Heap. Methods Clone() Creates a clone of this instance with the same properties set. protected virtual MessagePackSerializerOptions Clone() Returns MessagePackSerializerOptions The cloned instance. Guaranteed to be a new instance. Exceptions NotSupportedException Thrown if this instance is a derived type that doesn't override this method. LoadType(string) Gets a type given a string representation of the type. public virtual Type? LoadType(string typeName) Parameters typeName string The name of the type to load. This is typically the AssemblyQualifiedName but may use the assembly's simple name. Returns Type The loaded type or null if no matching type could be found. ThrowIfDeserializingTypeIsDisallowed(Type) Checks whether a given type may be deserialized. public virtual void ThrowIfDeserializingTypeIsDisallowed(Type type) Parameters type Type The type to be instantiated. Remarks This method provides a means for an important security mitigation when using the Typeless formatter to prevent untrusted messagepack from deserializing objects that may be harmful if instantiated, disposed or finalized. The default implementation throws for only a few known dangerous types. Applications that deserialize from untrusted sources should override this method and throw if the type is not among the expected set. Exceptions TypeAccessException Thrown if the type is not allowed to be deserialized. WithAllowAssemblyVersionMismatch(bool) Gets a copy of these options with the AllowAssemblyVersionMismatch property set to a new value. public MessagePackSerializerOptions WithAllowAssemblyVersionMismatch(bool allowAssemblyVersionMismatch) Parameters allowAssemblyVersionMismatch bool The new value for the AllowAssemblyVersionMismatch property. Returns MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithCompression(MessagePackCompression) Gets a copy of these options with the Compression property set to a new value. public MessagePackSerializerOptions WithCompression(MessagePackCompression compression) Parameters compression MessagePackCompression The new value for the Compression property. Returns MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithCompressionMinLength(int) Gets a copy of these options with the CompressionMinLength property set to a new value. public MessagePackSerializerOptions WithCompressionMinLength(int compressionMinLength) Parameters compressionMinLength int The new value for the CompressionMinLength property. Must be a positive integer. Returns MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithOldSpec(bool?) Gets a copy of these options with the OldSpec property set to a new value. public MessagePackSerializerOptions WithOldSpec(bool? oldSpec = true) Parameters oldSpec bool? The new value for the OldSpec. Returns MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithOmitAssemblyVersion(bool) Gets a copy of these options with the OmitAssemblyVersion property set to a new value. public MessagePackSerializerOptions WithOmitAssemblyVersion(bool omitAssemblyVersion) Parameters omitAssemblyVersion bool The new value for the OmitAssemblyVersion property. Returns MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithPool(SequencePool) Gets a copy of these options with the SequencePool property set to a new value. public MessagePackSerializerOptions WithPool(SequencePool pool) Parameters pool SequencePool The new value for the SequencePool property. Returns MessagePackSerializerOptions The new instance. WithResolver(IFormatterResolver) Gets a copy of these options with the Resolver property set to a new value. public MessagePackSerializerOptions WithResolver(IFormatterResolver resolver) Parameters resolver IFormatterResolver The new value for the Resolver. Returns MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithSecurity(MessagePackSecurity) Gets a copy of these options with the Security property set to a new value. public MessagePackSerializerOptions WithSecurity(MessagePackSecurity security) Parameters security MessagePackSecurity The new value for the Security property. Returns MessagePackSerializerOptions The new instance; or the original if the value is unchanged. WithSuggestedContiguousMemorySize(int) Gets a copy of these options with the SuggestedContiguousMemorySize property set to a new value. public MessagePackSerializerOptions WithSuggestedContiguousMemorySize(int suggestedContiguousMemorySize) Parameters suggestedContiguousMemorySize int The new value for the SuggestedContiguousMemorySize property. Must be at least 256. Returns MessagePackSerializerOptions The new instance; or the original if the value is unchanged."
  },
  "api/MessagePack.MessagePackStreamReader.html": {
    "href": "api/MessagePack.MessagePackStreamReader.html",
    "title": "Class MessagePackStreamReader | Snapshot",
    "keywords": "Class MessagePackStreamReader Namespace MessagePack Assembly MessagePack.dll Reads one or more messagepack data structures from a Stream. public class MessagePackStreamReader : IDisposable Inheritance object MessagePackStreamReader Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is not thread-safe. Do not call more than one member at once and be sure any call completes (including asynchronous tasks) before calling the next one. Constructors MessagePackStreamReader(Stream) Initializes a new instance of the MessagePackStreamReader class. public MessagePackStreamReader(Stream stream) Parameters stream Stream The stream to read from. This stream will be disposed of when this MessagePackStreamReader is disposed. MessagePackStreamReader(Stream, bool) Initializes a new instance of the MessagePackStreamReader class. public MessagePackStreamReader(Stream stream, bool leaveOpen) Parameters stream Stream The stream to read from. leaveOpen bool If true, leaves the stream open after this MessagePackStreamReader is disposed; otherwise, false. MessagePackStreamReader(Stream, bool, SequencePool) Initializes a new instance of the MessagePackStreamReader class. public MessagePackStreamReader(Stream stream, bool leaveOpen, SequencePool sequencePool) Parameters stream Stream The stream to read from. leaveOpen bool If true, leaves the stream open after this MessagePackStreamReader is disposed; otherwise, false. sequencePool SequencePool The pool to rent a Sequence<T> object from. Properties RemainingBytes Gets any bytes that have been read since the last complete message returned from ReadAsync(CancellationToken). public ReadOnlySequence<byte> RemainingBytes { get; } Property Value ReadOnlySequence<byte> Methods DiscardBufferedData() Arranges for the next read operation to start by reading from the underlying Stream instead of any data buffered from a previous read. public void DiscardBufferedData() Remarks This is appropriate if the underlying Stream has been repositioned such that any previously buffered data is no longer applicable to what the caller wants to read. Dispose() public void Dispose() Dispose(bool) Disposes of managed and unmanaged resources. protected virtual void Dispose(bool disposing) Parameters disposing bool true if this instance is being disposed; false if it is being finalized. ReadAsync(CancellationToken) Reads the next whole (top-level) messagepack data structure. public ValueTask<ReadOnlySequence<byte>?> ReadAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken A cancellation token. Returns ValueTask<ReadOnlySequence<byte>?> A task whose result is the next whole data structure from the stream, or null if the stream ends. The returned sequence is valid until this MessagePackStreamReader is disposed or until this method is called again, whichever comes first. Remarks When null is the result of the returned task, any extra bytes read (between the last complete message and the end of the stream) will be available via the RemainingBytes property."
  },
  "api/MessagePack.MessagePackType.html": {
    "href": "api/MessagePack.MessagePackType.html",
    "title": "Enum MessagePackType | Snapshot",
    "keywords": "Enum MessagePackType Namespace MessagePack Assembly MessagePack.dll https://github.com/msgpack/msgpack/blob/master/spec.md#serialization-type-to-format-conversion. public enum MessagePackType : byte Fields Array = 7 Binary = 6 Boolean = 3 Extension = 9 Float = 4 Integer = 1 Map = 8 Nil = 2 String = 5 Unknown = 0"
  },
  "api/MessagePack.MessagePackWriter.html": {
    "href": "api/MessagePack.MessagePackWriter.html",
    "title": "Struct MessagePackWriter | Snapshot",
    "keywords": "Struct MessagePackWriter Namespace MessagePack Assembly MessagePack.dll A primitive types writer for the MessagePack format. public ref struct MessagePackWriter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks The MessagePack spec.. Constructors MessagePackWriter(IBufferWriter<byte>) Initializes a new instance of the MessagePackWriter struct. public MessagePackWriter(IBufferWriter<byte> writer) Parameters writer IBufferWriter<byte> The writer to use. Properties CancellationToken Gets or sets the cancellation token for this serialization operation. public CancellationToken CancellationToken { readonly get; set; } Property Value CancellationToken OldSpec Gets or sets a value indicating whether to write in old spec compatibility mode. public bool OldSpec { readonly get; set; } Property Value bool Methods Advance(int) Commits memory previously returned from GetSpan(int) as initialized. public void Advance(int length) Parameters length int The number of bytes initialized with messagepack data from the previously returned span. See Also Advance(int) Clone(IBufferWriter<byte>) Initializes a new instance of the MessagePackWriter struct, with the same settings as this one, but with its own buffer writer. public MessagePackWriter Clone(IBufferWriter<byte> writer) Parameters writer IBufferWriter<byte> The writer to use for the new instance. Returns MessagePackWriter The new writer. Flush() Ensures everything previously written has been flushed to the underlying IBufferWriter<T>. public void Flush() GetEncodedLength(long) Get the number of bytes required to encode a value in msgpack. public static int GetEncodedLength(long value) Parameters value long The value to encode. Returns int The byte length; One of 1, 2, 3, 5 or 9 bytes. GetEncodedLength(ulong) Get the number of bytes required to encode a value in msgpack. public static int GetEncodedLength(ulong value) Parameters value ulong The value to encode. Returns int The byte length; One of 1, 2, 3, 5 or 9 bytes. GetSpan(int) Gets memory where raw messagepack data can be written. public Span<byte> GetSpan(int length) Parameters length int The size of the memory block required. Returns Span<byte> The span of memory to write to. This may exceed length. Remarks After initializing the resulting memory, always follow up with a call to Advance(int). This is similar in purpose to WriteRaw(ReadOnlySpan<byte>) but provides uninitialized memory for the caller to write to instead of copying initialized memory from elsewhere. See Also GetSpan(int) Write(bool) Writes a bool value using either True or False. public void Write(bool value) Parameters value bool The value. Write(in ReadOnlySequence<byte>) Writes a sequence of bytes, prefixed with a length encoded as the smallest fitting from: Bin8, Bin16, or Bin32. public void Write(in ReadOnlySequence<byte> src) Parameters src ReadOnlySequence<byte> The span of bytes to write. Remarks When OldSpec is true, the msgpack code used is Str8, Str16 or Str32 instead. Write(byte) Writes a byte value using a 1-byte code when possible, otherwise as UInt8. public void Write(byte value) Parameters value byte The value. Write(byte[]?) Writes a byte[], prefixed with a length encoded as the smallest fitting from: Bin8, Bin16, Bin32, or Nil if src is null. public void Write(byte[]? src) Parameters src byte[] The array of bytes to write. May be null. Write(char) Writes a char value using a 1-byte code when possible, otherwise as UInt8 or UInt16. public void Write(char value) Parameters value char The value. Write(DateTime) Writes a DateTime using the message code DateTime. public void Write(DateTime dateTime) Parameters dateTime DateTime The value to write. Exceptions NotSupportedException Thrown when OldSpec is true because the old spec does not define a DateTime format. Write(double) Writes a Float64 value. public void Write(double value) Parameters value double The value. Write(short) Writes a short using a built-in 1-byte code when within specific MessagePack-supported ranges, or the most compact of UInt8, UInt16, Int8, or Int16. public void Write(short value) Parameters value short The value to write. Write(int) Writes an int using a built-in 1-byte code when within specific MessagePack-supported ranges, or the most compact of UInt8, UInt16, UInt32, Int8, Int16, Int32. public void Write(int value) Parameters value int The value to write. Write(long) Writes an long using a built-in 1-byte code when within specific MessagePack-supported ranges, or the most compact of UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64. public void Write(long value) Parameters value long The value to write. Write(ReadOnlySpan<byte>) Writes a span of bytes, prefixed with a length encoded as the smallest fitting from: Bin8, Bin16, or Bin32. public void Write(ReadOnlySpan<byte> src) Parameters src ReadOnlySpan<byte> The span of bytes to write. Remarks When OldSpec is true, the msgpack code used is Str8, Str16 or Str32 instead. Write(ReadOnlySpan<char>) Writes out a string, prefixed with the length using one of these message codes: MinFixStr, Str8, Str16, Str32. public void Write(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The value to write. Write(sbyte) Writes an 8-bit value using a 1-byte code when possible, otherwise as Int8. public void Write(sbyte value) Parameters value sbyte The value. Write(float) Writes a Float32 value. public void Write(float value) Parameters value float The value. Write(string?) Writes out a string, prefixed with the length using one of these message codes: MinFixStr, Str8, Str16, Str32, or Nil if the value is null. public void Write(string? value) Parameters value string The value to write. May be null. Write(ushort) Writes a ushort value using a 1-byte code when possible, otherwise as UInt8 or UInt16. public void Write(ushort value) Parameters value ushort The value. Write(uint) Writes an uint using a built-in 1-byte code when within specific MessagePack-supported ranges, or the most compact of UInt8, UInt16, or UInt32. public void Write(uint value) Parameters value uint The value to write. Write(ulong) Writes an ulong using a built-in 1-byte code when within specific MessagePack-supported ranges, or the most compact of UInt8, UInt16, UInt32, Int8, Int16, Int32. public void Write(ulong value) Parameters value ulong The value to write. WriteArrayHeader(int) Write the length of the next array to be written in the most compact form of MinFixArray, Array16, or Array32. public void WriteArrayHeader(int count) Parameters count int The number of elements that will be written in the array. WriteArrayHeader(uint) Write the length of the next array to be written in the most compact form of MinFixArray, Array16, or Array32. public void WriteArrayHeader(uint count) Parameters count uint The number of elements that will be written in the array. WriteBinHeader(int) Writes the header that precedes a raw binary sequence with a length encoded as the smallest fitting from: Bin8, Bin16, or Bin32. public void WriteBinHeader(int length) Parameters length int The length of bytes that will be written next. Remarks The caller should use WriteRaw(in ReadOnlySequence<byte>) or WriteRaw(ReadOnlySpan<byte>) after calling this method to actually write the content. Alternatively a single call to Write(ReadOnlySpan<byte>) or Write(in ReadOnlySequence<byte>) will take care of the header and content in one call. When OldSpec is true, the msgpack code used is Str8, Str16 or Str32 instead. WriteExtensionFormat(ExtensionResult) Writes an extension format, using the smallest one of these codes: FixExt1, FixExt2, FixExt4, FixExt8, FixExt16, Ext8, Ext16, or Ext32. public void WriteExtensionFormat(ExtensionResult extensionData) Parameters extensionData ExtensionResult The extension data. WriteExtensionFormatHeader(ExtensionHeader) Writes the extension format header, using the smallest one of these codes: FixExt1, FixExt2, FixExt4, FixExt8, FixExt16, Ext8, Ext16, or Ext32. public void WriteExtensionFormatHeader(ExtensionHeader extensionHeader) Parameters extensionHeader ExtensionHeader The extension header. WriteInt16(short) Writes a short using Int16. public void WriteInt16(short value) Parameters value short The value to write. WriteInt32(int) Writes an int using Int32. public void WriteInt32(int value) Parameters value int The value to write. WriteInt64(long) Writes a long using Int64. public void WriteInt64(long value) Parameters value long The value to write. WriteInt8(sbyte) Writes an 8-bit value using Int8. public void WriteInt8(sbyte value) Parameters value sbyte The value. WriteMapHeader(int) Write the length of the next map to be written in the most compact form of MinFixMap, Map16, or Map32. public void WriteMapHeader(int count) Parameters count int The number of key=value pairs that will be written in the map. WriteMapHeader(uint) Write the length of the next map to be written in the most compact form of MinFixMap, Map16, or Map32. public void WriteMapHeader(uint count) Parameters count uint The number of key=value pairs that will be written in the map. WriteNil() Writes a Nil value. public void WriteNil() WriteRaw(in ReadOnlySequence<byte>) Copies bytes directly into the message pack writer. public void WriteRaw(in ReadOnlySequence<byte> rawMessagePackBlock) Parameters rawMessagePackBlock ReadOnlySequence<byte> The span of bytes to copy from. WriteRaw(ReadOnlySpan<byte>) Copies bytes directly into the message pack writer. public void WriteRaw(ReadOnlySpan<byte> rawMessagePackBlock) Parameters rawMessagePackBlock ReadOnlySpan<byte> The span of bytes to copy from. WriteString(in ReadOnlySequence<byte>) Writes out an array of bytes that (may) represent a UTF-8 encoded string, prefixed with the length using one of these message codes: MinFixStr, Str8, Str16, or Str32. public void WriteString(in ReadOnlySequence<byte> utf8stringBytes) Parameters utf8stringBytes ReadOnlySequence<byte> The bytes to write. WriteString(ReadOnlySpan<byte>) Writes out an array of bytes that (may) represent a UTF-8 encoded string, prefixed with the length using one of these message codes: MinFixStr, Str8, Str16, or Str32. public void WriteString(ReadOnlySpan<byte> utf8stringBytes) Parameters utf8stringBytes ReadOnlySpan<byte> The bytes to write. WriteStringHeader(int) Writes out the header that may precede a UTF-8 encoded string, prefixed with the length using one of these message codes: MinFixStr, Str8, Str16, or Str32. public void WriteStringHeader(int byteCount) Parameters byteCount int The number of bytes in the string that will follow this header. Remarks The caller should use WriteRaw(in ReadOnlySequence<byte>) or WriteRaw(ReadOnlySpan<byte>) after calling this method to actually write the content. Alternatively a single call to WriteString(ReadOnlySpan<byte>) or WriteString(in ReadOnlySequence<byte>) will take care of the header and content in one call. WriteUInt16(ushort) Writes a ushort value using UInt16. public void WriteUInt16(ushort value) Parameters value ushort The value. WriteUInt32(uint) Writes an uint using UInt32. public void WriteUInt32(uint value) Parameters value uint The value to write. WriteUInt64(ulong) Writes an ulong using Int32. public void WriteUInt64(ulong value) Parameters value ulong The value to write. WriteUInt8(byte) Writes a byte value using UInt8. public void WriteUInt8(byte value) Parameters value byte The value."
  },
  "api/MessagePack.Nil.html": {
    "href": "api/MessagePack.Nil.html",
    "title": "Struct Nil | Snapshot",
    "keywords": "Struct Nil Namespace MessagePack Assembly MessagePack.dll public struct Nil : IEquatable<Nil> Implements IEquatable<Nil> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Default public static readonly Nil Default Field Value Nil Methods Equals(Nil) public bool Equals(Nil other) Parameters other Nil Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(Nil, Nil) public static bool operator ==(Nil left, Nil right) Parameters left Nil right Nil Returns bool operator !=(Nil, Nil) public static bool operator !=(Nil left, Nil right) Parameters left Nil right Nil Returns bool"
  },
  "api/MessagePack.ReservedMessagePackExtensionTypeCode.html": {
    "href": "api/MessagePack.ReservedMessagePackExtensionTypeCode.html",
    "title": "Class ReservedMessagePackExtensionTypeCode | Snapshot",
    "keywords": "Class ReservedMessagePackExtensionTypeCode Namespace MessagePack Assembly MessagePack.dll The officially defined messagepack extension type codes. public static class ReservedMessagePackExtensionTypeCode Inheritance object ReservedMessagePackExtensionTypeCode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DateTime public const sbyte DateTime = -1 Field Value sbyte"
  },
  "api/MessagePack.Resolvers.AttributeFormatterResolver.html": {
    "href": "api/MessagePack.Resolvers.AttributeFormatterResolver.html",
    "title": "Class AttributeFormatterResolver | Snapshot",
    "keywords": "Class AttributeFormatterResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll Get formatter from MessagePackFormatterAttribute. public sealed class AttributeFormatterResolver : IFormatterResolver Inheritance object AttributeFormatterResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly AttributeFormatterResolver Instance Field Value AttributeFormatterResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.BuiltinResolver.html": {
    "href": "api/MessagePack.Resolvers.BuiltinResolver.html",
    "title": "Class BuiltinResolver | Snapshot",
    "keywords": "Class BuiltinResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll public sealed class BuiltinResolver : IFormatterResolver Inheritance object BuiltinResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly BuiltinResolver Instance Field Value BuiltinResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.CompositeResolver.html": {
    "href": "api/MessagePack.Resolvers.CompositeResolver.html",
    "title": "Class CompositeResolver | Snapshot",
    "keywords": "Class CompositeResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll Represents a collection of formatters and resolvers acting as one. public static class CompositeResolver Inheritance object CompositeResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is not thread-safe for mutations. It is thread-safe when not being written to. Methods Create(params IMessagePackFormatter[]) public static IFormatterResolver Create(params IMessagePackFormatter[] formatters) Parameters formatters IMessagePackFormatter[] Returns IFormatterResolver Create(params IFormatterResolver[]) public static IFormatterResolver Create(params IFormatterResolver[] resolvers) Parameters resolvers IFormatterResolver[] Returns IFormatterResolver Create(IReadOnlyList<IMessagePackFormatter>, IReadOnlyList<IFormatterResolver>) Initializes a new instance of an IFormatterResolver with the specified formatters and sub-resolvers. public static IFormatterResolver Create(IReadOnlyList<IMessagePackFormatter> formatters, IReadOnlyList<IFormatterResolver> resolvers) Parameters formatters IReadOnlyList<IMessagePackFormatter> A list of instances of IMessagePackFormatter<T> to prefer (above the resolvers). The formatters are searched in the order given, so if two formatters support serializing the same type, the first one is used. May not be null, but may be Empty<T>(). resolvers IReadOnlyList<IFormatterResolver> A list of resolvers to use for serializing types for which formatters does not include a formatter. The resolvers are searched in the order given, so if two resolvers support serializing the same type, the first one is used. May not be null, but may be Empty<T>(). Returns IFormatterResolver An instance of IFormatterResolver."
  },
  "api/MessagePack.Resolvers.ContractlessStandardResolver.html": {
    "href": "api/MessagePack.Resolvers.ContractlessStandardResolver.html",
    "title": "Class ContractlessStandardResolver | Snapshot",
    "keywords": "Class ContractlessStandardResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll public sealed class ContractlessStandardResolver : IFormatterResolver Inheritance object ContractlessStandardResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly ContractlessStandardResolver Instance Field Value ContractlessStandardResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.ContractlessStandardResolverAllowPrivate.html": {
    "href": "api/MessagePack.Resolvers.ContractlessStandardResolverAllowPrivate.html",
    "title": "Class ContractlessStandardResolverAllowPrivate | Snapshot",
    "keywords": "Class ContractlessStandardResolverAllowPrivate Namespace MessagePack.Resolvers Assembly MessagePack.dll public sealed class ContractlessStandardResolverAllowPrivate : IFormatterResolver Inheritance object ContractlessStandardResolverAllowPrivate Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly ContractlessStandardResolverAllowPrivate Instance Field Value ContractlessStandardResolverAllowPrivate Options A MessagePackSerializerOptions instance with this formatter pre-configured. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.DynamicContractlessObjectResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicContractlessObjectResolver.html",
    "title": "Class DynamicContractlessObjectResolver | Snapshot",
    "keywords": "Class DynamicContractlessObjectResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll ObjectResolver by dynamic code generation, no needs MessagePackObject attribute and serialized key as string. public sealed class DynamicContractlessObjectResolver : IFormatterResolver Inheritance object DynamicContractlessObjectResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance public static readonly DynamicContractlessObjectResolver Instance Field Value DynamicContractlessObjectResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.DynamicContractlessObjectResolverAllowPrivate.html": {
    "href": "api/MessagePack.Resolvers.DynamicContractlessObjectResolverAllowPrivate.html",
    "title": "Class DynamicContractlessObjectResolverAllowPrivate | Snapshot",
    "keywords": "Class DynamicContractlessObjectResolverAllowPrivate Namespace MessagePack.Resolvers Assembly MessagePack.dll ObjectResolver by dynamic code generation, no needs MessagePackObject attribute and serialized key as string, allow private member. public sealed class DynamicContractlessObjectResolverAllowPrivate : IFormatterResolver Inheritance object DynamicContractlessObjectResolverAllowPrivate Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance public static readonly DynamicContractlessObjectResolverAllowPrivate Instance Field Value DynamicContractlessObjectResolverAllowPrivate Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.DynamicEnumAsStringResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicEnumAsStringResolver.html",
    "title": "Class DynamicEnumAsStringResolver | Snapshot",
    "keywords": "Class DynamicEnumAsStringResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll public sealed class DynamicEnumAsStringResolver : IFormatterResolver Inheritance object DynamicEnumAsStringResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly DynamicEnumAsStringResolver Instance Field Value DynamicEnumAsStringResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.DynamicEnumResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicEnumResolver.html",
    "title": "Class DynamicEnumResolver | Snapshot",
    "keywords": "Class DynamicEnumResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll EnumResolver by dynamic code generation, serialized underlying type. public sealed class DynamicEnumResolver : IFormatterResolver Inheritance object DynamicEnumResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly DynamicEnumResolver Instance Field Value DynamicEnumResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.DynamicGenericResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicGenericResolver.html",
    "title": "Class DynamicGenericResolver | Snapshot",
    "keywords": "Class DynamicGenericResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll public sealed class DynamicGenericResolver : IFormatterResolver Inheritance object DynamicGenericResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly DynamicGenericResolver Instance Field Value DynamicGenericResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.DynamicObjectResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicObjectResolver.html",
    "title": "Class DynamicObjectResolver | Snapshot",
    "keywords": "Class DynamicObjectResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll ObjectResolver by dynamic code generation. public sealed class DynamicObjectResolver : IFormatterResolver Inheritance object DynamicObjectResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly DynamicObjectResolver Instance Field Value DynamicObjectResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.DynamicObjectResolverAllowPrivate.html": {
    "href": "api/MessagePack.Resolvers.DynamicObjectResolverAllowPrivate.html",
    "title": "Class DynamicObjectResolverAllowPrivate | Snapshot",
    "keywords": "Class DynamicObjectResolverAllowPrivate Namespace MessagePack.Resolvers Assembly MessagePack.dll ObjectResolver by dynamic code generation, allow private member. public sealed class DynamicObjectResolverAllowPrivate : IFormatterResolver Inheritance object DynamicObjectResolverAllowPrivate Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance public static readonly DynamicObjectResolverAllowPrivate Instance Field Value DynamicObjectResolverAllowPrivate Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.DynamicUnionResolver.html": {
    "href": "api/MessagePack.Resolvers.DynamicUnionResolver.html",
    "title": "Class DynamicUnionResolver | Snapshot",
    "keywords": "Class DynamicUnionResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll UnionResolver by dynamic code generation. public sealed class DynamicUnionResolver : IFormatterResolver Inheritance object DynamicUnionResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly DynamicUnionResolver Instance Field Value DynamicUnionResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.ExpandoObjectResolver.html": {
    "href": "api/MessagePack.Resolvers.ExpandoObjectResolver.html",
    "title": "Class ExpandoObjectResolver | Snapshot",
    "keywords": "Class ExpandoObjectResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll A resolver for use when deserializing MessagePack data where the schema is not known at compile-time such that strong-types can be instantiated. Instead, ExpandoObject is used wherever a MessagePack map is encountered. public static class ExpandoObjectResolver Inheritance object ExpandoObjectResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Instance The resolver to use to deserialize into C#'s dynamic keyword. public static readonly IFormatterResolver Instance Field Value IFormatterResolver Remarks This resolver includes more than just the ExpandoObjectFormatter. Options A set of options that includes the Instance and puts the deserializer into UntrustedData mode. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions"
  },
  "api/MessagePack.Resolvers.NativeDateTimeResolver.html": {
    "href": "api/MessagePack.Resolvers.NativeDateTimeResolver.html",
    "title": "Class NativeDateTimeResolver | Snapshot",
    "keywords": "Class NativeDateTimeResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll public sealed class NativeDateTimeResolver : IFormatterResolver Inheritance object NativeDateTimeResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly NativeDateTimeResolver Instance Field Value NativeDateTimeResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.NativeDecimalResolver.html": {
    "href": "api/MessagePack.Resolvers.NativeDecimalResolver.html",
    "title": "Class NativeDecimalResolver | Snapshot",
    "keywords": "Class NativeDecimalResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll public sealed class NativeDecimalResolver : IFormatterResolver Inheritance object NativeDecimalResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly NativeDecimalResolver Instance Field Value NativeDecimalResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.NativeGuidResolver.html": {
    "href": "api/MessagePack.Resolvers.NativeGuidResolver.html",
    "title": "Class NativeGuidResolver | Snapshot",
    "keywords": "Class NativeGuidResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll public sealed class NativeGuidResolver : IFormatterResolver Inheritance object NativeGuidResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly NativeGuidResolver Instance Field Value NativeGuidResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.PrimitiveObjectResolver.html": {
    "href": "api/MessagePack.Resolvers.PrimitiveObjectResolver.html",
    "title": "Class PrimitiveObjectResolver | Snapshot",
    "keywords": "Class PrimitiveObjectResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll public sealed class PrimitiveObjectResolver : IFormatterResolver Inheritance object PrimitiveObjectResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly PrimitiveObjectResolver Instance Field Value PrimitiveObjectResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.StandardResolver.html": {
    "href": "api/MessagePack.Resolvers.StandardResolver.html",
    "title": "Class StandardResolver | Snapshot",
    "keywords": "Class StandardResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll Default composited resolver, builtin -> attribute -> dynamic enum -> dynamic generic -> dynamic union -> dynamic object -> primitive. public sealed class StandardResolver : IFormatterResolver Inheritance object StandardResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly StandardResolver Instance Field Value StandardResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.StandardResolverAllowPrivate.html": {
    "href": "api/MessagePack.Resolvers.StandardResolverAllowPrivate.html",
    "title": "Class StandardResolverAllowPrivate | Snapshot",
    "keywords": "Class StandardResolverAllowPrivate Namespace MessagePack.Resolvers Assembly MessagePack.dll public sealed class StandardResolverAllowPrivate : IFormatterResolver Inheritance object StandardResolverAllowPrivate Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly StandardResolverAllowPrivate Instance Field Value StandardResolverAllowPrivate Options A MessagePackSerializerOptions instance with this formatter pre-configured. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.StaticCompositeResolver.html": {
    "href": "api/MessagePack.Resolvers.StaticCompositeResolver.html",
    "title": "Class StaticCompositeResolver | Snapshot",
    "keywords": "Class StaticCompositeResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll Singleton version of CompositeResolver, which can register a collection of formatters and resolvers to a single instance. public class StaticCompositeResolver : IFormatterResolver Inheritance object StaticCompositeResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance public static readonly StaticCompositeResolver Instance Field Value StaticCompositeResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized. Register(params IMessagePackFormatter[]) Initializes a singleton instance with the specified formatters. This method can only call before use StaticCompositeResolver.Instance.GetFormatter. If call twice in the Register methods, registered formatters and resolvers will be overridden. public void Register(params IMessagePackFormatter[] formatters) Parameters formatters IMessagePackFormatter[] A list of instances of IMessagePackFormatter<T>. The formatters are searched in the order given, so if two formatters support serializing the same type, the first one is used. Register(params IFormatterResolver[]) Initializes a singleton instance with the specified formatters and sub-resolvers. This method can only call before use StaticCompositeResolver.Instance.GetFormatter. If call twice in the Register methods, registered formatters and resolvers will be overridden. public void Register(params IFormatterResolver[] resolvers) Parameters resolvers IFormatterResolver[] A list of resolvers to use for serializing types. The resolvers are searched in the order given, so if two resolvers support serializing the same type, the first one is used. Register(IReadOnlyList<IMessagePackFormatter>, IReadOnlyList<IFormatterResolver>) Initializes a singleton instance with the specified formatters and sub-resolvers. This method can only call before use StaticCompositeResolver.Instance.GetFormatter. If call twice in the Register methods, registered formatters and resolvers will be overridden. public void Register(IReadOnlyList<IMessagePackFormatter> formatters, IReadOnlyList<IFormatterResolver> resolvers) Parameters formatters IReadOnlyList<IMessagePackFormatter> A list of instances of IMessagePackFormatter<T>. The formatters are searched in the order given, so if two formatters support serializing the same type, the first one is used. resolvers IReadOnlyList<IFormatterResolver> A list of resolvers to use for serializing types for which formatters does not include a formatter. The resolvers are searched in the order given, so if two resolvers support serializing the same type, the first one is used."
  },
  "api/MessagePack.Resolvers.TypelessContractlessStandardResolver.html": {
    "href": "api/MessagePack.Resolvers.TypelessContractlessStandardResolver.html",
    "title": "Class TypelessContractlessStandardResolver | Snapshot",
    "keywords": "Class TypelessContractlessStandardResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll Embeds the full name of .NET types for object typed fields/collection items Preserves .NET DateTime timezone. public sealed class TypelessContractlessStandardResolver : IFormatterResolver Inheritance object TypelessContractlessStandardResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance The singleton instance that can be used. public static readonly TypelessContractlessStandardResolver Instance Field Value TypelessContractlessStandardResolver Options A MessagePackSerializerOptions instance with this formatter pre-configured. public static readonly MessagePackSerializerOptions Options Field Value MessagePackSerializerOptions Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.TypelessObjectResolver.html": {
    "href": "api/MessagePack.Resolvers.TypelessObjectResolver.html",
    "title": "Class TypelessObjectResolver | Snapshot",
    "keywords": "Class TypelessObjectResolver Namespace MessagePack.Resolvers Assembly MessagePack.dll Used for object fields/collections, ex: var arr = new object[] { 1, \"a\", new Model() }; The runtime type of value in object field, should be covered by one of resolvers in complex/standard resolver. TypelessObjectResolver should be placed before DynamicObjectTypeFallbackResolver and PrimitiveObjectFormatter in resolvers list. Deserializer uses Namespace.TypeName, AssemblyName to get runtime type in destination app, so that combination must be present in destination app. Serialized binary is valid MessagePack binary used ext-format and custom typecode(100). Inside ext - assembly qualified type name, and serialized object. public sealed class TypelessObjectResolver : IFormatterResolver Inheritance object TypelessObjectResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance public static readonly IFormatterResolver Instance Field Value IFormatterResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Resolvers.html": {
    "href": "api/MessagePack.Resolvers.html",
    "title": "Namespace MessagePack.Resolvers | Snapshot",
    "keywords": "Namespace MessagePack.Resolvers Classes AttributeFormatterResolver Get formatter from MessagePackFormatterAttribute. BuiltinResolver CompositeResolver Represents a collection of formatters and resolvers acting as one. ContractlessStandardResolver ContractlessStandardResolverAllowPrivate DynamicContractlessObjectResolver ObjectResolver by dynamic code generation, no needs MessagePackObject attribute and serialized key as string. DynamicContractlessObjectResolverAllowPrivate ObjectResolver by dynamic code generation, no needs MessagePackObject attribute and serialized key as string, allow private member. DynamicEnumAsStringResolver DynamicEnumResolver EnumResolver by dynamic code generation, serialized underlying type. DynamicGenericResolver DynamicObjectResolver ObjectResolver by dynamic code generation. DynamicObjectResolverAllowPrivate ObjectResolver by dynamic code generation, allow private member. DynamicUnionResolver UnionResolver by dynamic code generation. ExpandoObjectResolver A resolver for use when deserializing MessagePack data where the schema is not known at compile-time such that strong-types can be instantiated. Instead, ExpandoObject is used wherever a MessagePack map is encountered. NativeDateTimeResolver NativeDecimalResolver NativeGuidResolver PrimitiveObjectResolver StandardResolver Default composited resolver, builtin -> attribute -> dynamic enum -> dynamic generic -> dynamic union -> dynamic object -> primitive. StandardResolverAllowPrivate StaticCompositeResolver Singleton version of CompositeResolver, which can register a collection of formatters and resolvers to a single instance. TypelessContractlessStandardResolver Embeds the full name of .NET types for object typed fields/collection items Preserves .NET DateTime timezone. TypelessObjectResolver Used for object fields/collections, ex: var arr = new object[] { 1, \"a\", new Model() }; The runtime type of value in object field, should be covered by one of resolvers in complex/standard resolver. TypelessObjectResolver should be placed before DynamicObjectTypeFallbackResolver and PrimitiveObjectFormatter in resolvers list. Deserializer uses Namespace.TypeName, AssemblyName to get runtime type in destination app, so that combination must be present in destination app. Serialized binary is valid MessagePack binary used ext-format and custom typecode(100). Inside ext - assembly qualified type name, and serialized object."
  },
  "api/MessagePack.SequencePool.html": {
    "href": "api/MessagePack.SequencePool.html",
    "title": "Class SequencePool | Snapshot",
    "keywords": "Class SequencePool Namespace MessagePack Assembly MessagePack.dll A thread-safe, alloc-free reusable object pool. public class SequencePool Inheritance object SequencePool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SequencePool() Initializes a new instance of the SequencePool class. public SequencePool() Remarks We use a maxSize that allows every processor to be involved in messagepack serialization concurrently, plus one nested serialization per processor (since LZ4 and sometimes other nested serializations may exist). SequencePool(int) Initializes a new instance of the SequencePool class. public SequencePool(int maxSize) Parameters maxSize int The maximum size to allow the pool to grow. SequencePool(int, ArrayPool<byte>) Initializes a new instance of the SequencePool class. public SequencePool(int maxSize, ArrayPool<byte> arrayPool) Parameters maxSize int The maximum size to allow the pool to grow. arrayPool ArrayPool<byte> Array pool that will be used."
  },
  "api/MessagePack.SerializationConstructorAttribute.html": {
    "href": "api/MessagePack.SerializationConstructorAttribute.html",
    "title": "Class SerializationConstructorAttribute | Snapshot",
    "keywords": "Class SerializationConstructorAttribute Namespace MessagePack Assembly MessagePack.Annotations.dll [AttributeUsage(AttributeTargets.Constructor, AllowMultiple = false, Inherited = true)] public class SerializationConstructorAttribute : Attribute, _Attribute Inheritance object Attribute SerializationConstructorAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MessagePack.TinyJsonException.html": {
    "href": "api/MessagePack.TinyJsonException.html",
    "title": "Class TinyJsonException | Snapshot",
    "keywords": "Class TinyJsonException Namespace MessagePack Assembly MessagePack.dll [Serializable] public class TinyJsonException : MessagePackSerializationException, _Exception, ISerializable Inheritance object Exception MessagePackSerializationException TinyJsonException Implements _Exception ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TinyJsonException(SerializationInfo, StreamingContext) protected TinyJsonException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext TinyJsonException(string) public TinyJsonException(string message) Parameters message string"
  },
  "api/MessagePack.UnionAttribute.html": {
    "href": "api/MessagePack.UnionAttribute.html",
    "title": "Class UnionAttribute | Snapshot",
    "keywords": "Class UnionAttribute Namespace MessagePack Assembly MessagePack.Annotations.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, AllowMultiple = true, Inherited = false)] public class UnionAttribute : Attribute, _Attribute Inheritance object Attribute UnionAttribute Implements _Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UnionAttribute(int, string) Initializes a new instance of the UnionAttribute class. public UnionAttribute(int key, string subType) Parameters key int The distinguishing value that identifies a particular subtype. subType string The full name (should be assembly qualified) of the derived or implementing type. UnionAttribute(int, Type) Initializes a new instance of the UnionAttribute class. public UnionAttribute(int key, Type subType) Parameters key int The distinguishing value that identifies a particular subtype. subType Type The derived or implementing type. Properties Key Gets the distinguishing value that identifies a particular subtype. public int Key { get; } Property Value int SubType Gets the derived or implementing type. public Type SubType { get; } Property Value Type"
  },
  "api/MessagePack.Unity.AnimationCurveFormatter.html": {
    "href": "api/MessagePack.Unity.AnimationCurveFormatter.html",
    "title": "Class AnimationCurveFormatter | Snapshot",
    "keywords": "Class AnimationCurveFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class AnimationCurveFormatter : IMessagePackFormatter<AnimationCurve?> Inheritance object AnimationCurveFormatter Implements IMessagePackFormatter<AnimationCurve> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public AnimationCurve? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.AnimationCurve. Returns AnimationCurve The deserialized value. Serialize(ref MessagePackWriter, AnimationCurve?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, AnimationCurve? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value AnimationCurve The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.AnimationCurve."
  },
  "api/MessagePack.Unity.BoundsFormatter.html": {
    "href": "api/MessagePack.Unity.BoundsFormatter.html",
    "title": "Class BoundsFormatter | Snapshot",
    "keywords": "Class BoundsFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class BoundsFormatter : IMessagePackFormatter<Bounds> Inheritance object BoundsFormatter Implements IMessagePackFormatter<Bounds> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Bounds Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Bounds. Returns Bounds The deserialized value. Serialize(ref MessagePackWriter, Bounds, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Bounds value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Bounds The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Bounds."
  },
  "api/MessagePack.Unity.Color32Formatter.html": {
    "href": "api/MessagePack.Unity.Color32Formatter.html",
    "title": "Class Color32Formatter | Snapshot",
    "keywords": "Class Color32Formatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class Color32Formatter : IMessagePackFormatter<Color32> Inheritance object Color32Formatter Implements IMessagePackFormatter<Color32> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Color32 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Color32. Returns Color32 The deserialized value. Serialize(ref MessagePackWriter, Color32, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Color32 value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Color32 The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Color32."
  },
  "api/MessagePack.Unity.ColorFormatter.html": {
    "href": "api/MessagePack.Unity.ColorFormatter.html",
    "title": "Class ColorFormatter | Snapshot",
    "keywords": "Class ColorFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class ColorFormatter : IMessagePackFormatter<Color> Inheritance object ColorFormatter Implements IMessagePackFormatter<Color> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Color Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Color. Returns Color The deserialized value. Serialize(ref MessagePackWriter, Color, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Color value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Color The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Color."
  },
  "api/MessagePack.Unity.Extension.BoundsArrayBlitFormatter.html": {
    "href": "api/MessagePack.Unity.Extension.BoundsArrayBlitFormatter.html",
    "title": "Class BoundsArrayBlitFormatter | Snapshot",
    "keywords": "Class BoundsArrayBlitFormatter Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public class BoundsArrayBlitFormatter : UnsafeBlitFormatterBase<Bounds>, IMessagePackFormatter<Bounds[]?> Inheritance object UnsafeBlitFormatterBase<Bounds> BoundsArrayBlitFormatter Implements IMessagePackFormatter<Bounds[]> Inherited Members UnsafeBlitFormatterBase<Bounds>.CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<Bounds>) UnsafeBlitFormatterBase<Bounds>.Serialize(ref MessagePackWriter, Bounds[], MessagePackSerializerOptions) UnsafeBlitFormatterBase<Bounds>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected override sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.Unity.Extension.ColorArrayBlitFormatter.html": {
    "href": "api/MessagePack.Unity.Extension.ColorArrayBlitFormatter.html",
    "title": "Class ColorArrayBlitFormatter | Snapshot",
    "keywords": "Class ColorArrayBlitFormatter Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public class ColorArrayBlitFormatter : UnsafeBlitFormatterBase<Color>, IMessagePackFormatter<Color[]?> Inheritance object UnsafeBlitFormatterBase<Color> ColorArrayBlitFormatter Implements IMessagePackFormatter<Color[]> Inherited Members UnsafeBlitFormatterBase<Color>.CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<Color>) UnsafeBlitFormatterBase<Color>.Serialize(ref MessagePackWriter, Color[], MessagePackSerializerOptions) UnsafeBlitFormatterBase<Color>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected override sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.Unity.Extension.DoubleArrayBlitFormatter.html": {
    "href": "api/MessagePack.Unity.Extension.DoubleArrayBlitFormatter.html",
    "title": "Class DoubleArrayBlitFormatter | Snapshot",
    "keywords": "Class DoubleArrayBlitFormatter Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public class DoubleArrayBlitFormatter : UnsafeBlitFormatterBase<double>, IMessagePackFormatter<double[]?> Inheritance object UnsafeBlitFormatterBase<double> DoubleArrayBlitFormatter Implements IMessagePackFormatter<double[]> Inherited Members UnsafeBlitFormatterBase<double>.CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<double>) UnsafeBlitFormatterBase<double>.Serialize(ref MessagePackWriter, double[], MessagePackSerializerOptions) UnsafeBlitFormatterBase<double>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected override sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.Unity.Extension.FloatArrayBlitFormatter.html": {
    "href": "api/MessagePack.Unity.Extension.FloatArrayBlitFormatter.html",
    "title": "Class FloatArrayBlitFormatter | Snapshot",
    "keywords": "Class FloatArrayBlitFormatter Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public class FloatArrayBlitFormatter : UnsafeBlitFormatterBase<float>, IMessagePackFormatter<float[]?> Inheritance object UnsafeBlitFormatterBase<float> FloatArrayBlitFormatter Implements IMessagePackFormatter<float[]> Inherited Members UnsafeBlitFormatterBase<float>.CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<float>) UnsafeBlitFormatterBase<float>.Serialize(ref MessagePackWriter, float[], MessagePackSerializerOptions) UnsafeBlitFormatterBase<float>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected override sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.Unity.Extension.IntArrayBlitFormatter.html": {
    "href": "api/MessagePack.Unity.Extension.IntArrayBlitFormatter.html",
    "title": "Class IntArrayBlitFormatter | Snapshot",
    "keywords": "Class IntArrayBlitFormatter Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public class IntArrayBlitFormatter : UnsafeBlitFormatterBase<int>, IMessagePackFormatter<int[]?> Inheritance object UnsafeBlitFormatterBase<int> IntArrayBlitFormatter Implements IMessagePackFormatter<int[]> Inherited Members UnsafeBlitFormatterBase<int>.CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<int>) UnsafeBlitFormatterBase<int>.Serialize(ref MessagePackWriter, int[], MessagePackSerializerOptions) UnsafeBlitFormatterBase<int>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected override sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.Unity.Extension.QuaternionArrayBlitFormatter.html": {
    "href": "api/MessagePack.Unity.Extension.QuaternionArrayBlitFormatter.html",
    "title": "Class QuaternionArrayBlitFormatter | Snapshot",
    "keywords": "Class QuaternionArrayBlitFormatter Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public class QuaternionArrayBlitFormatter : UnsafeBlitFormatterBase<Quaternion>, IMessagePackFormatter<Quaternion[]?> Inheritance object UnsafeBlitFormatterBase<Quaternion> QuaternionArrayBlitFormatter Implements IMessagePackFormatter<Quaternion[]> Inherited Members UnsafeBlitFormatterBase<Quaternion>.CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<Quaternion>) UnsafeBlitFormatterBase<Quaternion>.Serialize(ref MessagePackWriter, Quaternion[], MessagePackSerializerOptions) UnsafeBlitFormatterBase<Quaternion>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected override sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.Unity.Extension.RectArrayBlitFormatter.html": {
    "href": "api/MessagePack.Unity.Extension.RectArrayBlitFormatter.html",
    "title": "Class RectArrayBlitFormatter | Snapshot",
    "keywords": "Class RectArrayBlitFormatter Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public class RectArrayBlitFormatter : UnsafeBlitFormatterBase<Rect>, IMessagePackFormatter<Rect[]?> Inheritance object UnsafeBlitFormatterBase<Rect> RectArrayBlitFormatter Implements IMessagePackFormatter<Rect[]> Inherited Members UnsafeBlitFormatterBase<Rect>.CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<Rect>) UnsafeBlitFormatterBase<Rect>.Serialize(ref MessagePackWriter, Rect[], MessagePackSerializerOptions) UnsafeBlitFormatterBase<Rect>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected override sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.Unity.Extension.UnityBlitResolver.html": {
    "href": "api/MessagePack.Unity.Extension.UnityBlitResolver.html",
    "title": "Class UnityBlitResolver | Snapshot",
    "keywords": "Class UnityBlitResolver Namespace MessagePack.Unity.Extension Assembly MessagePack.dll Special Resolver for Vector2[], Vector3[], Vector4[], Quaternion[], Color[], Bounds[], Rect[]. public class UnityBlitResolver : IFormatterResolver Inheritance object UnityBlitResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance public static readonly UnityBlitResolver Instance Field Value UnityBlitResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Unity.Extension.UnityBlitWithPrimitiveArrayResolver.html": {
    "href": "api/MessagePack.Unity.Extension.UnityBlitWithPrimitiveArrayResolver.html",
    "title": "Class UnityBlitWithPrimitiveArrayResolver | Snapshot",
    "keywords": "Class UnityBlitWithPrimitiveArrayResolver Namespace MessagePack.Unity.Extension Assembly MessagePack.dll Special Resolver for Vector2[], Vector3[], Vector4[], Quaternion[], Color[], Bounds[], Rect[] + int[], float[], double[]. public class UnityBlitWithPrimitiveArrayResolver : IFormatterResolver Inheritance object UnityBlitWithPrimitiveArrayResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance public static readonly UnityBlitWithPrimitiveArrayResolver Instance Field Value UnityBlitWithPrimitiveArrayResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Unity.Extension.UnsafeBlitFormatterBase-1.html": {
    "href": "api/MessagePack.Unity.Extension.UnsafeBlitFormatterBase-1.html",
    "title": "Class UnsafeBlitFormatterBase<T> | Snapshot",
    "keywords": "Class UnsafeBlitFormatterBase<T> Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public abstract class UnsafeBlitFormatterBase<T> : IMessagePackFormatter<T[]?> where T : struct Type Parameters T Inheritance object UnsafeBlitFormatterBase<T> Implements IMessagePackFormatter<T[]> Derived BoundsArrayBlitFormatter ColorArrayBlitFormatter DoubleArrayBlitFormatter FloatArrayBlitFormatter IntArrayBlitFormatter QuaternionArrayBlitFormatter RectArrayBlitFormatter Vector2ArrayBlitFormatter Vector3ArrayBlitFormatter Vector4ArrayBlitFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected abstract sbyte TypeCode { get; } Property Value sbyte Methods CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<T>) protected void CopyDeserializeUnsafe(ReadOnlySpan<byte> src, Span<T> dest) Parameters src ReadOnlySpan<byte> dest Span<T> Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public T[]? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T. Returns T[] The deserialized value. Serialize(ref MessagePackWriter, T[]?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, T[]? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value T[] The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type T."
  },
  "api/MessagePack.Unity.Extension.Vector2ArrayBlitFormatter.html": {
    "href": "api/MessagePack.Unity.Extension.Vector2ArrayBlitFormatter.html",
    "title": "Class Vector2ArrayBlitFormatter | Snapshot",
    "keywords": "Class Vector2ArrayBlitFormatter Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public class Vector2ArrayBlitFormatter : UnsafeBlitFormatterBase<Vector2>, IMessagePackFormatter<Vector2[]?> Inheritance object UnsafeBlitFormatterBase<Vector2> Vector2ArrayBlitFormatter Implements IMessagePackFormatter<Vector2[]> Inherited Members UnsafeBlitFormatterBase<Vector2>.CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<Vector2>) UnsafeBlitFormatterBase<Vector2>.Serialize(ref MessagePackWriter, Vector2[], MessagePackSerializerOptions) UnsafeBlitFormatterBase<Vector2>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected override sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.Unity.Extension.Vector3ArrayBlitFormatter.html": {
    "href": "api/MessagePack.Unity.Extension.Vector3ArrayBlitFormatter.html",
    "title": "Class Vector3ArrayBlitFormatter | Snapshot",
    "keywords": "Class Vector3ArrayBlitFormatter Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public class Vector3ArrayBlitFormatter : UnsafeBlitFormatterBase<Vector3>, IMessagePackFormatter<Vector3[]?> Inheritance object UnsafeBlitFormatterBase<Vector3> Vector3ArrayBlitFormatter Implements IMessagePackFormatter<Vector3[]> Inherited Members UnsafeBlitFormatterBase<Vector3>.CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<Vector3>) UnsafeBlitFormatterBase<Vector3>.Serialize(ref MessagePackWriter, Vector3[], MessagePackSerializerOptions) UnsafeBlitFormatterBase<Vector3>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected override sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.Unity.Extension.Vector4ArrayBlitFormatter.html": {
    "href": "api/MessagePack.Unity.Extension.Vector4ArrayBlitFormatter.html",
    "title": "Class Vector4ArrayBlitFormatter | Snapshot",
    "keywords": "Class Vector4ArrayBlitFormatter Namespace MessagePack.Unity.Extension Assembly MessagePack.dll public class Vector4ArrayBlitFormatter : UnsafeBlitFormatterBase<Vector4>, IMessagePackFormatter<Vector4[]?> Inheritance object UnsafeBlitFormatterBase<Vector4> Vector4ArrayBlitFormatter Implements IMessagePackFormatter<Vector4[]> Inherited Members UnsafeBlitFormatterBase<Vector4>.CopyDeserializeUnsafe(ReadOnlySpan<byte>, Span<Vector4>) UnsafeBlitFormatterBase<Vector4>.Serialize(ref MessagePackWriter, Vector4[], MessagePackSerializerOptions) UnsafeBlitFormatterBase<Vector4>.Deserialize(ref MessagePackReader, MessagePackSerializerOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties TypeCode protected override sbyte TypeCode { get; } Property Value sbyte"
  },
  "api/MessagePack.Unity.Extension.html": {
    "href": "api/MessagePack.Unity.Extension.html",
    "title": "Namespace MessagePack.Unity.Extension | Snapshot",
    "keywords": "Namespace MessagePack.Unity.Extension Classes BoundsArrayBlitFormatter ColorArrayBlitFormatter DoubleArrayBlitFormatter FloatArrayBlitFormatter IntArrayBlitFormatter QuaternionArrayBlitFormatter RectArrayBlitFormatter UnityBlitResolver Special Resolver for Vector2[], Vector3[], Vector4[], Quaternion[], Color[], Bounds[], Rect[]. UnityBlitWithPrimitiveArrayResolver Special Resolver for Vector2[], Vector3[], Vector4[], Quaternion[], Color[], Bounds[], Rect[] + int[], float[], double[]. UnsafeBlitFormatterBase<T> Vector2ArrayBlitFormatter Vector3ArrayBlitFormatter Vector4ArrayBlitFormatter"
  },
  "api/MessagePack.Unity.GradientAlphaKeyFormatter.html": {
    "href": "api/MessagePack.Unity.GradientAlphaKeyFormatter.html",
    "title": "Class GradientAlphaKeyFormatter | Snapshot",
    "keywords": "Class GradientAlphaKeyFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class GradientAlphaKeyFormatter : IMessagePackFormatter<GradientAlphaKey> Inheritance object GradientAlphaKeyFormatter Implements IMessagePackFormatter<GradientAlphaKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public GradientAlphaKey Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.GradientAlphaKey. Returns GradientAlphaKey The deserialized value. Serialize(ref MessagePackWriter, GradientAlphaKey, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, GradientAlphaKey value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value GradientAlphaKey The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.GradientAlphaKey."
  },
  "api/MessagePack.Unity.GradientColorKeyFormatter.html": {
    "href": "api/MessagePack.Unity.GradientColorKeyFormatter.html",
    "title": "Class GradientColorKeyFormatter | Snapshot",
    "keywords": "Class GradientColorKeyFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class GradientColorKeyFormatter : IMessagePackFormatter<GradientColorKey> Inheritance object GradientColorKeyFormatter Implements IMessagePackFormatter<GradientColorKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public GradientColorKey Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.GradientColorKey. Returns GradientColorKey The deserialized value. Serialize(ref MessagePackWriter, GradientColorKey, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, GradientColorKey value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value GradientColorKey The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.GradientColorKey."
  },
  "api/MessagePack.Unity.GradientFormatter.html": {
    "href": "api/MessagePack.Unity.GradientFormatter.html",
    "title": "Class GradientFormatter | Snapshot",
    "keywords": "Class GradientFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class GradientFormatter : IMessagePackFormatter<Gradient?> Inheritance object GradientFormatter Implements IMessagePackFormatter<Gradient> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Gradient? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Gradient. Returns Gradient The deserialized value. Serialize(ref MessagePackWriter, Gradient?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Gradient? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Gradient The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Gradient."
  },
  "api/MessagePack.Unity.GradientModeFormatter.html": {
    "href": "api/MessagePack.Unity.GradientModeFormatter.html",
    "title": "Class GradientModeFormatter | Snapshot",
    "keywords": "Class GradientModeFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class GradientModeFormatter : IMessagePackFormatter<GradientMode> Inheritance object GradientModeFormatter Implements IMessagePackFormatter<GradientMode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public GradientMode Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.GradientMode. Returns GradientMode The deserialized value. Serialize(ref MessagePackWriter, GradientMode, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, GradientMode value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value GradientMode The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.GradientMode."
  },
  "api/MessagePack.Unity.KeyframeFormatter.html": {
    "href": "api/MessagePack.Unity.KeyframeFormatter.html",
    "title": "Class KeyframeFormatter | Snapshot",
    "keywords": "Class KeyframeFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class KeyframeFormatter : IMessagePackFormatter<Keyframe> Inheritance object KeyframeFormatter Implements IMessagePackFormatter<Keyframe> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Keyframe Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Keyframe. Returns Keyframe The deserialized value. Serialize(ref MessagePackWriter, Keyframe, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Keyframe value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Keyframe The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Keyframe."
  },
  "api/MessagePack.Unity.LayerMaskFormatter.html": {
    "href": "api/MessagePack.Unity.LayerMaskFormatter.html",
    "title": "Class LayerMaskFormatter | Snapshot",
    "keywords": "Class LayerMaskFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class LayerMaskFormatter : IMessagePackFormatter<LayerMask> Inheritance object LayerMaskFormatter Implements IMessagePackFormatter<LayerMask> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public LayerMask Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.LayerMask. Returns LayerMask The deserialized value. Serialize(ref MessagePackWriter, LayerMask, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, LayerMask value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value LayerMask The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.LayerMask."
  },
  "api/MessagePack.Unity.Matrix4x4Formatter.html": {
    "href": "api/MessagePack.Unity.Matrix4x4Formatter.html",
    "title": "Class Matrix4x4Formatter | Snapshot",
    "keywords": "Class Matrix4x4Formatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class Matrix4x4Formatter : IMessagePackFormatter<Matrix4x4> Inheritance object Matrix4x4Formatter Implements IMessagePackFormatter<Matrix4x4> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Matrix4x4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Matrix4x4. Returns Matrix4x4 The deserialized value. Serialize(ref MessagePackWriter, Matrix4x4, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Matrix4x4 value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Matrix4x4 The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Matrix4x4."
  },
  "api/MessagePack.Unity.QuaternionFormatter.html": {
    "href": "api/MessagePack.Unity.QuaternionFormatter.html",
    "title": "Class QuaternionFormatter | Snapshot",
    "keywords": "Class QuaternionFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class QuaternionFormatter : IMessagePackFormatter<Quaternion> Inheritance object QuaternionFormatter Implements IMessagePackFormatter<Quaternion> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Quaternion Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Quaternion. Returns Quaternion The deserialized value. Serialize(ref MessagePackWriter, Quaternion, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Quaternion value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Quaternion The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Quaternion."
  },
  "api/MessagePack.Unity.RectFormatter.html": {
    "href": "api/MessagePack.Unity.RectFormatter.html",
    "title": "Class RectFormatter | Snapshot",
    "keywords": "Class RectFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class RectFormatter : IMessagePackFormatter<Rect> Inheritance object RectFormatter Implements IMessagePackFormatter<Rect> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Rect Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Rect. Returns Rect The deserialized value. Serialize(ref MessagePackWriter, Rect, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Rect value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Rect The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Rect."
  },
  "api/MessagePack.Unity.RectOffsetFormatter.html": {
    "href": "api/MessagePack.Unity.RectOffsetFormatter.html",
    "title": "Class RectOffsetFormatter | Snapshot",
    "keywords": "Class RectOffsetFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class RectOffsetFormatter : IMessagePackFormatter<RectOffset?> Inheritance object RectOffsetFormatter Implements IMessagePackFormatter<RectOffset> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public RectOffset? Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.RectOffset. Returns RectOffset The deserialized value. Serialize(ref MessagePackWriter, RectOffset?, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, RectOffset? value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value RectOffset The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.RectOffset."
  },
  "api/MessagePack.Unity.UnityResolver.html": {
    "href": "api/MessagePack.Unity.UnityResolver.html",
    "title": "Class UnityResolver | Snapshot",
    "keywords": "Class UnityResolver Namespace MessagePack.Unity Assembly MessagePack.dll public class UnityResolver : IFormatterResolver Inheritance object UnityResolver Implements IFormatterResolver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FormatterResolverExtensions.GetFormatterDynamic(IFormatterResolver, Type) FormatterResolverExtensions.GetFormatterWithVerify<T>(IFormatterResolver) Fields Instance public static readonly UnityResolver Instance Field Value UnityResolver Methods GetFormatter<T>() Gets an IMessagePackFormatter<T> instance that can serialize or deserialize some type T. public IMessagePackFormatter<T>? GetFormatter<T>() Returns IMessagePackFormatter<T> A formatter, if this resolver supplies one for type T; otherwise null. Type Parameters T The type of value to be serialized or deserialized."
  },
  "api/MessagePack.Unity.Vector2Formatter.html": {
    "href": "api/MessagePack.Unity.Vector2Formatter.html",
    "title": "Class Vector2Formatter | Snapshot",
    "keywords": "Class Vector2Formatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class Vector2Formatter : IMessagePackFormatter<Vector2> Inheritance object Vector2Formatter Implements IMessagePackFormatter<Vector2> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Vector2 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Vector2. Returns Vector2 The deserialized value. Serialize(ref MessagePackWriter, Vector2, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Vector2 value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Vector2 The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Vector2."
  },
  "api/MessagePack.Unity.Vector3Formatter.html": {
    "href": "api/MessagePack.Unity.Vector3Formatter.html",
    "title": "Class Vector3Formatter | Snapshot",
    "keywords": "Class Vector3Formatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class Vector3Formatter : IMessagePackFormatter<Vector3> Inheritance object Vector3Formatter Implements IMessagePackFormatter<Vector3> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Vector3 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Vector3. Returns Vector3 The deserialized value. Serialize(ref MessagePackWriter, Vector3, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Vector3 value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Vector3 The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Vector3."
  },
  "api/MessagePack.Unity.Vector4Formatter.html": {
    "href": "api/MessagePack.Unity.Vector4Formatter.html",
    "title": "Class Vector4Formatter | Snapshot",
    "keywords": "Class Vector4Formatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class Vector4Formatter : IMessagePackFormatter<Vector4> Inheritance object Vector4Formatter Implements IMessagePackFormatter<Vector4> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public Vector4 Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Vector4. Returns Vector4 The deserialized value. Serialize(ref MessagePackWriter, Vector4, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, Vector4 value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value Vector4 The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.Vector4."
  },
  "api/MessagePack.Unity.WrapModeFormatter.html": {
    "href": "api/MessagePack.Unity.WrapModeFormatter.html",
    "title": "Class WrapModeFormatter | Snapshot",
    "keywords": "Class WrapModeFormatter Namespace MessagePack.Unity Assembly MessagePack.dll public sealed class WrapModeFormatter : IMessagePackFormatter<WrapMode> Inheritance object WrapModeFormatter Implements IMessagePackFormatter<WrapMode> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Deserialize(ref MessagePackReader, MessagePackSerializerOptions) Deserializes a value. public WrapMode Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options) Parameters reader MessagePackReader The reader to deserialize from. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.WrapMode. Returns WrapMode The deserialized value. Serialize(ref MessagePackWriter, WrapMode, MessagePackSerializerOptions) Serializes a value. public void Serialize(ref MessagePackWriter writer, WrapMode value, MessagePackSerializerOptions options) Parameters writer MessagePackWriter The writer to use when serializing the value. value WrapMode The value to be serialized. options MessagePackSerializerOptions The serialization settings to use, including the resolver to use to obtain formatters for types that make up the composite type UnityEngine.WrapMode."
  },
  "api/MessagePack.Unity.html": {
    "href": "api/MessagePack.Unity.html",
    "title": "Namespace MessagePack.Unity | Snapshot",
    "keywords": "Namespace MessagePack.Unity Classes AnimationCurveFormatter BoundsFormatter Color32Formatter ColorFormatter GradientAlphaKeyFormatter GradientColorKeyFormatter GradientFormatter GradientModeFormatter KeyframeFormatter LayerMaskFormatter Matrix4x4Formatter QuaternionFormatter RectFormatter RectOffsetFormatter UnityResolver Vector2Formatter Vector3Formatter Vector4Formatter WrapModeFormatter"
  },
  "api/MessagePack.html": {
    "href": "api/MessagePack.html",
    "title": "Namespace MessagePack | Snapshot",
    "keywords": "Namespace MessagePack Classes FormatterNotRegisteredException FormatterResolverExtensions IgnoreMemberAttribute KeyAttribute MessagePackCode The core type codes as defined by msgpack. MessagePackFormatterAttribute MessagePackObjectAttribute MessagePackRange MessagePackSecurity Settings related to security, particularly relevant when deserializing data from untrusted sources. MessagePackSerializationException An exception thrown during serializing an object graph or deserializing a messagepack sequence. MessagePackSerializer High-Level API of MessagePack for C#. MessagePackSerializerOptions An immutable description of options for running the MessagePackSerializer. MessagePackStreamReader Reads one or more messagepack data structures from a Stream. ReservedMessagePackExtensionTypeCode The officially defined messagepack extension type codes. SequencePool A thread-safe, alloc-free reusable object pool. SerializationConstructorAttribute TinyJsonException UnionAttribute Structs ExtensionHeader ExtensionResult MessagePackReader A primitive types reader for the MessagePack format. MessagePackWriter A primitive types writer for the MessagePack format. Nil Interfaces IFormatterResolver Allows querying for a formatter for serializing or deserializing a particular Type. IMessagePackSerializationCallbackReceiver Enums MessagePackCompression Identifies the various compression schemes which might be applied at the msgpack level. MessagePackType https://github.com/msgpack/msgpack/blob/master/spec.md#serialization-type-to-format-conversion."
  },
  "api/ProposedArchitecture.Common.html": {
    "href": "api/ProposedArchitecture.Common.html",
    "title": "Class Common | Snapshot",
    "keywords": "Class Common Namespace ProposedArchitecture Assembly com.mad.snapshot.dll Manager hub [DefaultExecutionOrder(-500)] public class Common : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Common Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields Instance Returns the Common singleton public static Common Instance Field Value Common Properties SaveManager Returns the SaveManager reference public SaveManager SaveManager { get; } Property Value SaveManager WorldLoader Returns the WorldLoader reference public WorldLoader WorldLoader { get; } Property Value WorldLoader"
  },
  "api/ProposedArchitecture.GlobalProperties.html": {
    "href": "api/ProposedArchitecture.GlobalProperties.html",
    "title": "Class GlobalProperties | Snapshot",
    "keywords": "Class GlobalProperties Namespace ProposedArchitecture Assembly com.mad.snapshot.dll Stores global game values and constants public static class GlobalProperties Inheritance object GlobalProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SaveFolderName The save folder name. public const string SaveFolderName = \"SnapshotSaves\" Field Value string SavePath The save directory absolute path public static readonly string SavePath Field Value string"
  },
  "api/ProposedArchitecture.ISnapshot.html": {
    "href": "api/ProposedArchitecture.ISnapshot.html",
    "title": "Interface ISnapshot | Snapshot",
    "keywords": "Interface ISnapshot Namespace ProposedArchitecture Assembly com.mad.snapshot.dll Marks a class as ISnapshot-able public interface ISnapshot Properties Smri The class should have an SMRI field uint Smri { get; } Property Value uint Methods CacheModel() void CacheModel() ConstructModel() ISnapshotModel ConstructModel() Returns ISnapshotModel GetSnapshotModelType() Type GetSnapshotModelType() Returns Type LoadModel(ISnapshotModel) void LoadModel(ISnapshotModel _model) Parameters _model ISnapshotModel RegisterToSaveManager() void RegisterToSaveManager() RetrieveReferences(int[]) void RetrieveReferences(int[] _refSmris) Parameters _refSmris int[] UnregisterToSaveManager() void UnregisterToSaveManager()"
  },
  "api/ProposedArchitecture.ISnapshotModel.html": {
    "href": "api/ProposedArchitecture.ISnapshotModel.html",
    "title": "Interface ISnapshotModel | Snapshot",
    "keywords": "Interface ISnapshotModel Namespace ProposedArchitecture Assembly com.mad.snapshot.dll public interface ISnapshotModel Properties RefSmris The class/struct should have an int array to store its references SMRIs int[] RefSmris { get; set; } Property Value int[] Smri The class/struct should have an SMRI field uint Smri { get; set; } Property Value uint"
  },
  "api/ProposedArchitecture.Inventory.html": {
    "href": "api/ProposedArchitecture.Inventory.html",
    "title": "Class Inventory | Snapshot",
    "keywords": "Class Inventory Namespace ProposedArchitecture Assembly com.mad.snapshot.dll public class Inventory : MonoBehaviour, ISnapshot Inheritance object Object Component Behaviour MonoBehaviour Inventory Implements ISnapshot Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Smri Returns this ISnapshots SMRI public uint Smri { get; } Property Value uint Methods AddWeapon(Weapon) Adds the passed weapon in the inventory public void AddWeapon(Weapon _weapon) Parameters _weapon Weapon The weapon to add CacheModel() Dynamically called when its time to save public void CacheModel() ConstructModel() Returns an ISnapshotModel with the inventory needed data. public ISnapshotModel ConstructModel() Returns ISnapshotModel GetSnapshotModelType() Returns the type of the ISnapshotModel this ISnapshot's data get represented. public Type GetSnapshotModelType() Returns Type LoadModel(ISnapshotModel) Sets the playe fields from the incoming deserialized model public void LoadModel(ISnapshotModel _model) Parameters _model ISnapshotModel SInventory model containing the deserialized data RegisterToSaveManager() Register the inventory to the save manager and set its SMRI public void RegisterToSaveManager() RetrieveReferences(int[]) Sets any reference the inventory may have, like its weapons. public void RetrieveReferences(int[] _refSmris) Parameters _refSmris int[] UnregisterToSaveManager() Unregisters the reference from the save manager public void UnregisterToSaveManager()"
  },
  "api/ProposedArchitecture.Player.html": {
    "href": "api/ProposedArchitecture.Player.html",
    "title": "Class Player | Snapshot",
    "keywords": "Class Player Namespace ProposedArchitecture Assembly com.mad.snapshot.dll public class Player : MonoBehaviour, ISnapshot Inheritance object Object Component Behaviour MonoBehaviour Player Implements ISnapshot Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Smri Returns this ISnapshots SMRI public uint Smri { get; } Property Value uint Methods CacheModel() Dynamically called when its time to save public void CacheModel() ConstructModel() Returns an ISnapshotModel with the player needed data. public ISnapshotModel ConstructModel() Returns ISnapshotModel GetSnapshotModelType() Returns the type of the ISnapshotModel this ISnapshot's data get represented. public Type GetSnapshotModelType() Returns Type LoadModel(ISnapshotModel) Sets the player fields from the incoming deserialized model public void LoadModel(ISnapshotModel _model) Parameters _model ISnapshotModel SPlayer model containing the deserialized data RegisterToSaveManager() Register the player to the save manager and set its SMRI public void RegisterToSaveManager() RetrieveReferences(int[]) Sets any reference the player may have, like its inventory. public void RetrieveReferences(int[] _refSmris) Parameters _refSmris int[] UnregisterToSaveManager() Unregisters the reference from the save manager public void UnregisterToSaveManager()"
  },
  "api/ProposedArchitecture.SInventory.html": {
    "href": "api/ProposedArchitecture.SInventory.html",
    "title": "Struct SInventory | Snapshot",
    "keywords": "Struct SInventory Namespace ProposedArchitecture Assembly com.mad.snapshot.dll [MessagePackObject(false)] public struct SInventory : ISnapshotModel Implements ISnapshotModel Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields _MaxItems [Key(2)] public int _MaxItems Field Value int _Position [Key(3)] public Vector3 _Position Field Value Vector3 _Rotation [Key(4)] public Quaternion _Rotation Field Value Quaternion Properties RefSmris The class/struct should have an int array to store its references SMRIs [Key(1)] public int[] RefSmris { readonly get; set; } Property Value int[] Smri The class/struct should have an SMRI field [Key(0)] public uint Smri { readonly get; set; } Property Value uint"
  },
  "api/ProposedArchitecture.SPlayer.html": {
    "href": "api/ProposedArchitecture.SPlayer.html",
    "title": "Struct SPlayer | Snapshot",
    "keywords": "Struct SPlayer Namespace ProposedArchitecture Assembly com.mad.snapshot.dll [MessagePackObject(false)] public struct SPlayer : ISnapshotModel Implements ISnapshotModel Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields _Health [Key(2)] public float _Health Field Value float _IsAlive [Key(5)] public bool _IsAlive Field Value bool _Position [Key(6)] public Vector3 _Position Field Value Vector3 _Rotation [Key(7)] public Quaternion _Rotation Field Value Quaternion _Shield [Key(4)] public float _Shield Field Value float _Stamina [Key(3)] public float _Stamina Field Value float Properties RefSmris The class/struct should have an int array to store its references SMRIs [Key(1)] public int[] RefSmris { readonly get; set; } Property Value int[] Smri The class/struct should have an SMRI field [Key(0)] public uint Smri { readonly get; set; } Property Value uint"
  },
  "api/ProposedArchitecture.SWeapon.html": {
    "href": "api/ProposedArchitecture.SWeapon.html",
    "title": "Struct SWeapon | Snapshot",
    "keywords": "Struct SWeapon Namespace ProposedArchitecture Assembly com.mad.snapshot.dll [MessagePackObject(false)] public struct SWeapon : ISnapshotModel Implements ISnapshotModel Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields _Ammo [Key(2)] public int _Ammo Field Value int _Loaded [Key(3)] public bool _Loaded Field Value bool _Position [Key(4)] public Vector3 _Position Field Value Vector3 _Rotation [Key(5)] public Quaternion _Rotation Field Value Quaternion Properties RefSmris The class/struct should have an int array to store its references SMRIs [Key(1)] public int[] RefSmris { readonly get; set; } Property Value int[] Smri The class/struct should have an SMRI field [Key(0)] public uint Smri { readonly get; set; } Property Value uint"
  },
  "api/ProposedArchitecture.SaveManager.html": {
    "href": "api/ProposedArchitecture.SaveManager.html",
    "title": "Class SaveManager | Snapshot",
    "keywords": "Class SaveManager Namespace ProposedArchitecture Assembly com.mad.snapshot.dll Responsible for handling the SnapshotWrapper, ISnapshot and ISnapshotModel instances. Hands out SMRIs. public class SaveManager Inheritance object SaveManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SaveManager(Common) Creates a SaveManager instance public SaveManager(Common _common) Parameters _common Common Reference to the Common instance Properties Snapshots Returns a read only collection of the Snapshot reference cache. public IReadOnlyList<ISnapshot> Snapshots { get; } Property Value IReadOnlyList<ISnapshot> Methods CacheModel(ISnapshotModel) Stores the passed model to the SaveManager data container list. public void CacheModel(ISnapshotModel _model) Parameters _model ISnapshotModel The snapshot data container instance Cleanup() Resets the dll library caches and SMRI. public bool Cleanup() Returns bool LoadSaveFile(string) Kicks off the Unpacking mechanism contained in the passed fileName. The deserialized data are stored inside the SaveManager ISnapshotModel cache for accessing. Each cached ISnapshot.LoadModel and ISnapshot.RetrieveReferences method gets called after each data retrieval from the dll cache. public void LoadSaveFile(string _fileName) Parameters _fileName string RegisterModel(ISnapshot) Registers the passed ISnapshot instance to the serialization event handler and adds it to the ISnapshot reference list. public uint RegisterModel(ISnapshot _snapshot) Parameters _snapshot ISnapshot The snapshot instance Returns uint The SMRI of the registered model. Save() Kicks off the packing sequence. All the cached ISnapshot.CacheData methods get called and their data are serialized and passed to the internal DLL library cache. The cached SaveManager models list gets cleared afterwards. public void Save() UnregisterFromSnapshot(ISnapshot) Unregisters the passed ISnapshot from data caching upon packing. The passed snapshot is also removed from the Snapshot list. public void UnregisterFromSnapshot(ISnapshot _snapshot) Parameters _snapshot ISnapshot"
  },
  "api/ProposedArchitecture.Weapon.html": {
    "href": "api/ProposedArchitecture.Weapon.html",
    "title": "Class Weapon | Snapshot",
    "keywords": "Class Weapon Namespace ProposedArchitecture Assembly com.mad.snapshot.dll public class Weapon : MonoBehaviour, ISnapshot Inheritance object Object Component Behaviour MonoBehaviour Weapon Implements ISnapshot Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Smri Returns this ISnapshots SMRI public uint Smri { get; } Property Value uint Methods CacheModel() Dynamically called when its time to save public void CacheModel() ConstructModel() Returns an ISnapshotModel with the player needed data. public ISnapshotModel ConstructModel() Returns ISnapshotModel GetSnapshotModelType() Returns the type of the ISnapshotModel this ISnapshot's data get represented. public Type GetSnapshotModelType() Returns Type LoadModel(ISnapshotModel) Sets the weapon fields from the incoming deserialized model public void LoadModel(ISnapshotModel _model) Parameters _model ISnapshotModel SWeapon model containing the deserialized data RegisterToSaveManager() Register the weapon to the save manager and set its SMRI public void RegisterToSaveManager() RetrieveReferences(int[]) Sets any reference the weapon may have, like its inventory. public void RetrieveReferences(int[] _refSmris) Parameters _refSmris int[] SetInventory(Inventory) Sets the inventory this weapon belongs to. public void SetInventory(Inventory _inventory) Parameters _inventory Inventory The inventory reference UnregisterToSaveManager() Unregisters the reference from the save manager public void UnregisterToSaveManager()"
  },
  "api/ProposedArchitecture.WorldLoader.html": {
    "href": "api/ProposedArchitecture.WorldLoader.html",
    "title": "Class WorldLoader | Snapshot",
    "keywords": "Class WorldLoader Namespace ProposedArchitecture Assembly com.mad.snapshot.dll Handles the world creation and order of SMRIs simultaneously. [DefaultExecutionOrder(-250)] public class WorldLoader : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour WorldLoader Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FromLoad Is the start-up a load procedure? public bool FromLoad { get; } Property Value bool"
  },
  "api/ProposedArchitecture.html": {
    "href": "api/ProposedArchitecture.html",
    "title": "Namespace ProposedArchitecture | Snapshot",
    "keywords": "Namespace ProposedArchitecture Classes Common Manager hub GlobalProperties Stores global game values and constants Inventory Player SaveManager Responsible for handling the SnapshotWrapper, ISnapshot and ISnapshotModel instances. Hands out SMRIs. Weapon WorldLoader Handles the world creation and order of SMRIs simultaneously. Structs SInventory SPlayer SWeapon Interfaces ISnapshot Marks a class as ISnapshot-able ISnapshotModel"
  },
  "api/Snapshot.SnapshotWrapper.html": {
    "href": "api/Snapshot.SnapshotWrapper.html",
    "title": "Class SnapshotWrapper | Snapshot",
    "keywords": "Class SnapshotWrapper Namespace Snapshot Assembly com.mad.snapshot.dll C# library wrapper of SnapshotLib x64-bit dll. public static class SnapshotWrapper Inheritance object SnapshotWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CacheData(uint, byte[], int[]) Caches the passed data and references SMRIs inside the dll cache. Values are copies so it's safe to also delete them if you want. public static bool CacheData(uint _smri, byte[] _data, int[] _refSmris) Parameters _smri uint The SMRI to associate the data array to _data byte[] The data to copy over to the dll _refSmris int[] The references SMRI this SMRI needs. Returns bool True if the caching was successful, false otherwise. DecreaseSmri() Decreases the global SMRI by 1. Use when GetSmri() fails. public static void DecreaseSmri() Exceptions Exception Could not decrease SMRI from DLL DeleteSmriData(uint) Deletes the data associated with the passed SMRI inside the dll. public static bool DeleteSmriData(uint _smri) Parameters _smri uint The SMRI to delete data from Returns bool True if the deletion was successful, false otherwise. Exceptions Exception Could not delete the smri data GetCurrentSmri() Returns the current non-incremented global SMRI from the DLL. public static int GetCurrentSmri() Returns int Exceptions Exception Could not retrieve current SMRI from DLL GetData(uint) Returns the associated byte array of the passed smri from the dll. public static byte[] GetData(uint _smri) Parameters _smri uint The SMRI to retrieve data for Returns byte[] A byte array containing the deserialized data or null. GetLoadFileName() Returns the cached save file name from inside the dll. public static string GetLoadFileName() Returns string The saved file name stored in the dll. Can be an empty string. Exceptions Exception Could not get the current load from filename from DLL GetRefSmris(uint) Returns an int array containing the referenced SMRI of the passed SMRI from the dll. public static int[] GetRefSmris(uint _parentSmri) Parameters _parentSmri uint The SMRI to retrieve referenced SMRIs for. Returns int[] A byte array containing the data or null. GetSavePath() Returns the absolute save path from inside the dll. public static string GetSavePath() Returns string Returns the absolute save path from inside the dll. Exceptions Exception Could not get the current save path from DLL GetSmri() Increases and returns the global DLL SMRI used for data storing and reference preservation. public static uint GetSmri() Returns uint A uint representing the SMRI in the DLL Exceptions Exception Could not retrieve SMRI from DLL. PackData() Starts the packing sequence of the cached data inside the dll. public static bool PackData() Returns bool True if packing was successful, false otherwise. ResetCache() Deallocates the dll data cache and clears it. Resets the set saved directory value to empty. Resets the set file name value to empty. public static bool ResetCache() Returns bool True if the reset was successful, false otherwise. ResetSmri() Resets the DLL global SMRI back to its default value: -1. public static bool ResetSmri() Returns bool True if the reset was succesful, false otherwise with an error log. SetLoadFileName(string) Sets the save file name inside the dll. public static bool SetLoadFileName(string _loadFromFileName) Parameters _loadFromFileName string The save file name to unpack from. Returns bool True if set was successful, false otherwise. SetSavePath(string) Sets the save path inside the dll. public static bool SetSavePath(string _path) Parameters _path string The absolute path to the save directory Returns bool True if the set was successful, false otherwise. UnpackData() Starts the unpacking sequence inside the dll to deserialize the serialized data and store them in the dll cache. GlobalSMRI is set to be equal to the unpacked data size. Cached datas are overwritten. public static bool UnpackData() Returns bool True if unpacking was successful, false otherwise."
  },
  "api/Snapshot.html": {
    "href": "api/Snapshot.html",
    "title": "Namespace Snapshot | Snapshot",
    "keywords": "Namespace Snapshot Classes SnapshotWrapper C# library wrapper of SnapshotLib x64-bit dll."
  },
  "api/UnityEditor.EventSystems.EventSystemEditor.html": {
    "href": "api/UnityEditor.EventSystems.EventSystemEditor.html",
    "title": "Class EventSystemEditor | Snapshot",
    "keywords": "Class EventSystemEditor Namespace UnityEditor.EventSystems Assembly UnityEditor.UI.dll [CustomEditor(typeof(EventSystem), true)] public class EventSystemEditor : Editor Inheritance object Object ScriptableObject Editor EventSystemEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties previewLabelStyle protected GUIStyle previewLabelStyle { get; } Property Value GUIStyle Methods HasPreviewGUI() Override this method in subclasses if you implement OnPreviewGUI. public override bool HasPreviewGUI() Returns bool True if this component can be Previewed in its current state. OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI() OnPreviewGUI(Rect, GUIStyle) <p>Creates a custom preview for the preview area of the Inspector, the headers of the primary Editor, and the object selector. You must implement Editor.HasPreviewGUI for this method to be called. public override void OnPreviewGUI(Rect rect, GUIStyle background) Parameters rect Rect background GUIStyle Background image. RequiresConstantRepaint() Checks if this editor requires constant repaints in its current state. public override bool RequiresConstantRepaint() Returns bool"
  },
  "api/UnityEditor.EventSystems.EventTriggerEditor.html": {
    "href": "api/UnityEditor.EventSystems.EventTriggerEditor.html",
    "title": "Class EventTriggerEditor | Snapshot",
    "keywords": "Class EventTriggerEditor Namespace UnityEditor.EventSystems Assembly UnityEditor.UI.dll [CustomEditor(typeof(EventTrigger), true)] public class EventTriggerEditor : Editor Inheritance object Object ScriptableObject Editor EventTriggerEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.EventSystems.Physics2DRaycasterEditor.html": {
    "href": "api/UnityEditor.EventSystems.Physics2DRaycasterEditor.html",
    "title": "Class Physics2DRaycasterEditor | Snapshot",
    "keywords": "Class Physics2DRaycasterEditor Namespace UnityEditor.EventSystems Assembly UnityEditor.UI.dll [CustomEditor(typeof(Physics2DRaycaster), true)] public class Physics2DRaycasterEditor : Editor Inheritance object Object ScriptableObject Editor Physics2DRaycasterEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.EventSystems.PhysicsRaycasterEditor.html": {
    "href": "api/UnityEditor.EventSystems.PhysicsRaycasterEditor.html",
    "title": "Class PhysicsRaycasterEditor | Snapshot",
    "keywords": "Class PhysicsRaycasterEditor Namespace UnityEditor.EventSystems Assembly UnityEditor.UI.dll [CustomEditor(typeof(PhysicsRaycaster), true)] public class PhysicsRaycasterEditor : Editor Inheritance object Object ScriptableObject Editor PhysicsRaycasterEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.EventSystems.html": {
    "href": "api/UnityEditor.EventSystems.html",
    "title": "Namespace UnityEditor.EventSystems | Snapshot",
    "keywords": "Namespace UnityEditor.EventSystems Classes EventSystemEditor EventTriggerEditor Physics2DRaycasterEditor PhysicsRaycasterEditor"
  },
  "api/UnityEditor.UI.AnimationTriggersDrawer.html": {
    "href": "api/UnityEditor.UI.AnimationTriggersDrawer.html",
    "title": "Class AnimationTriggersDrawer | Snapshot",
    "keywords": "Class AnimationTriggersDrawer Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomPropertyDrawer(typeof(AnimationTriggers), true)] public class AnimationTriggersDrawer : PropertyDrawer Inheritance object GUIDrawer PropertyDrawer AnimationTriggersDrawer Inherited Members PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreatePropertyGUI(SerializedProperty) Override this method to make your own UI Toolkit based GUI for the property. public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters property SerializedProperty The SerializedProperty to make the custom GUI for. Returns VisualElement The element containing the custom GUI. GetPropertyHeight(SerializedProperty, GUIContent) Override this method to specify how tall the GUI for this field is in pixels. public override float GetPropertyHeight(SerializedProperty prop, GUIContent label) Parameters prop SerializedProperty label GUIContent The label of this property. Returns float The height in pixels. OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. public override void OnGUI(Rect rect, SerializedProperty prop, GUIContent label) Parameters rect Rect prop SerializedProperty label GUIContent The label of this property."
  },
  "api/UnityEditor.UI.AspectRatioFitterEditor.html": {
    "href": "api/UnityEditor.UI.AspectRatioFitterEditor.html",
    "title": "Class AspectRatioFitterEditor | Snapshot",
    "keywords": "Class AspectRatioFitterEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(AspectRatioFitter), true)] [CanEditMultipleObjects] public class AspectRatioFitterEditor : SelfControllerEditor Inheritance object Object ScriptableObject Editor SelfControllerEditor AspectRatioFitterEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnDisable() protected virtual void OnDisable() OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.ButtonEditor.html": {
    "href": "api/UnityEditor.UI.ButtonEditor.html",
    "title": "Class ButtonEditor | Snapshot",
    "keywords": "Class ButtonEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(Button), true)] [CanEditMultipleObjects] public class ButtonEditor : SelectableEditor Inheritance object Object ScriptableObject Editor SelectableEditor ButtonEditor Inherited Members SelectableEditor.OnDisable() Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected override void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.CanvasScalerEditor.html": {
    "href": "api/UnityEditor.UI.CanvasScalerEditor.html",
    "title": "Class CanvasScalerEditor | Snapshot",
    "keywords": "Class CanvasScalerEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(CanvasScaler), true)] [CanEditMultipleObjects] public class CanvasScalerEditor : Editor Inheritance object Object ScriptableObject Editor CanvasScalerEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.ColorBlockDrawer.html": {
    "href": "api/UnityEditor.UI.ColorBlockDrawer.html",
    "title": "Class ColorBlockDrawer | Snapshot",
    "keywords": "Class ColorBlockDrawer Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomPropertyDrawer(typeof(ColorBlock), true)] public class ColorBlockDrawer : PropertyDrawer Inheritance object GUIDrawer PropertyDrawer ColorBlockDrawer Inherited Members PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreatePropertyGUI(SerializedProperty) Override this method to make your own UI Toolkit based GUI for the property. public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters property SerializedProperty The SerializedProperty to make the custom GUI for. Returns VisualElement The element containing the custom GUI. GetPropertyHeight(SerializedProperty, GUIContent) Override this method to specify how tall the GUI for this field is in pixels. public override float GetPropertyHeight(SerializedProperty prop, GUIContent label) Parameters prop SerializedProperty label GUIContent The label of this property. Returns float The height in pixels. OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. public override void OnGUI(Rect rect, SerializedProperty prop, GUIContent label) Parameters rect Rect prop SerializedProperty label GUIContent The label of this property."
  },
  "api/UnityEditor.UI.ContentSizeFitterEditor.html": {
    "href": "api/UnityEditor.UI.ContentSizeFitterEditor.html",
    "title": "Class ContentSizeFitterEditor | Snapshot",
    "keywords": "Class ContentSizeFitterEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(ContentSizeFitter), true)] [CanEditMultipleObjects] public class ContentSizeFitterEditor : SelfControllerEditor Inheritance object Object ScriptableObject Editor SelfControllerEditor ContentSizeFitterEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.DropdownEditor.html": {
    "href": "api/UnityEditor.UI.DropdownEditor.html",
    "title": "Class DropdownEditor | Snapshot",
    "keywords": "Class DropdownEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(Dropdown), true)] [CanEditMultipleObjects] public class DropdownEditor : SelectableEditor Inheritance object Object ScriptableObject Editor SelectableEditor DropdownEditor Inherited Members SelectableEditor.OnDisable() Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected override void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.FontDataDrawer.html": {
    "href": "api/UnityEditor.UI.FontDataDrawer.html",
    "title": "Class FontDataDrawer | Snapshot",
    "keywords": "Class FontDataDrawer Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomPropertyDrawer(typeof(FontData), true)] public class FontDataDrawer : PropertyDrawer Inheritance object GUIDrawer PropertyDrawer FontDataDrawer Inherited Members PropertyDrawer.CreatePropertyGUI(SerializedProperty) PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetPropertyHeight(SerializedProperty, GUIContent) Override this method to specify how tall the GUI for this field is in pixels. public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters property SerializedProperty The SerializedProperty to make the custom GUI for. label GUIContent The label of this property. Returns float The height in pixels. Init(SerializedProperty) protected void Init(SerializedProperty property) Parameters property SerializedProperty OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters position Rect Rectangle on the screen to use for the property GUI. property SerializedProperty The SerializedProperty to make the custom GUI for. label GUIContent The label of this property."
  },
  "api/UnityEditor.UI.GraphicEditor.html": {
    "href": "api/UnityEditor.UI.GraphicEditor.html",
    "title": "Class GraphicEditor | Snapshot",
    "keywords": "Class GraphicEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll Editor class used to edit UI Graphics. Extend this class to write your own graphic editor. [CustomEditor(typeof(MaskableGraphic), false)] [CanEditMultipleObjects] public class GraphicEditor : Editor Inheritance object Object ScriptableObject Editor GraphicEditor Derived ImageEditor RawImageEditor TextEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields m_Color protected SerializedProperty m_Color Field Value SerializedProperty m_Maskable protected SerializedProperty m_Maskable Field Value SerializedProperty m_Material protected SerializedProperty m_Material Field Value SerializedProperty m_RaycastPadding protected SerializedProperty m_RaycastPadding Field Value SerializedProperty m_RaycastTarget protected SerializedProperty m_RaycastTarget Field Value SerializedProperty m_Script protected SerializedProperty m_Script Field Value SerializedProperty m_ShowNativeSize protected AnimBool m_ShowNativeSize Field Value AnimBool Methods AppearanceControlsGUI() GUI related to the appearance of the Graphic. Color and Material properties appear here. protected void AppearanceControlsGUI() MaskableControlsGUI() protected void MaskableControlsGUI() NativeSizeButtonGUI() GUI for showing a button that sets the size of the RectTransform to the native size for this Graphic. protected void NativeSizeButtonGUI() OnDisable() protected virtual void OnDisable() OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI() RaycastControlsGUI() GUI related to the Raycasting settings for the graphic. protected void RaycastControlsGUI() SetShowNativeSize(bool, bool) Set if the 'Set Native Size' button should be visible for this editor. protected void SetShowNativeSize(bool show, bool instant) Parameters show bool Are we showing or hiding the AnimBool for the size. instant bool Should the size AnimBool change instantly."
  },
  "api/UnityEditor.UI.GridLayoutGroupEditor.html": {
    "href": "api/UnityEditor.UI.GridLayoutGroupEditor.html",
    "title": "Class GridLayoutGroupEditor | Snapshot",
    "keywords": "Class GridLayoutGroupEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(GridLayoutGroup), true)] [CanEditMultipleObjects] public class GridLayoutGroupEditor : Editor Inheritance object Object ScriptableObject Editor GridLayoutGroupEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.HorizontalOrVerticalLayoutGroupEditor.html": {
    "href": "api/UnityEditor.UI.HorizontalOrVerticalLayoutGroupEditor.html",
    "title": "Class HorizontalOrVerticalLayoutGroupEditor | Snapshot",
    "keywords": "Class HorizontalOrVerticalLayoutGroupEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(HorizontalOrVerticalLayoutGroup), true)] [CanEditMultipleObjects] public class HorizontalOrVerticalLayoutGroupEditor : Editor Inheritance object Object ScriptableObject Editor HorizontalOrVerticalLayoutGroupEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.ImageEditor.html": {
    "href": "api/UnityEditor.UI.ImageEditor.html",
    "title": "Class ImageEditor | Snapshot",
    "keywords": "Class ImageEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll Editor class used to edit UI Sprites. [CustomEditor(typeof(Image), true)] [CanEditMultipleObjects] public class ImageEditor : GraphicEditor Inheritance object Object ScriptableObject Editor GraphicEditor ImageEditor Inherited Members GraphicEditor.m_Script GraphicEditor.m_Color GraphicEditor.m_Material GraphicEditor.m_RaycastTarget GraphicEditor.m_RaycastPadding GraphicEditor.m_Maskable GraphicEditor.m_ShowNativeSize GraphicEditor.SetShowNativeSize(bool, bool) GraphicEditor.NativeSizeButtonGUI() GraphicEditor.MaskableControlsGUI() GraphicEditor.AppearanceControlsGUI() GraphicEditor.RaycastControlsGUI() Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods GetInfoString() A string containing the Image details to be used as a overlay on the component Preview. public override string GetInfoString() Returns string The Image details. HasPreviewGUI() All graphics have a preview. public override bool HasPreviewGUI() Returns bool OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI() OnPreviewGUI(Rect, GUIStyle) Draw the Image preview. public override void OnPreviewGUI(Rect rect, GUIStyle background) Parameters rect Rect background GUIStyle SpriteGUI() Draw the atlas and Image selection fields. protected void SpriteGUI() TypeGUI() Sprites's custom properties based on the type. protected void TypeGUI()"
  },
  "api/UnityEditor.UI.InputFieldEditor.html": {
    "href": "api/UnityEditor.UI.InputFieldEditor.html",
    "title": "Class InputFieldEditor | Snapshot",
    "keywords": "Class InputFieldEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CanEditMultipleObjects] [CustomEditor(typeof(InputField), true)] public class InputFieldEditor : SelectableEditor Inheritance object Object ScriptableObject Editor SelectableEditor InputFieldEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.LayoutElementEditor.html": {
    "href": "api/UnityEditor.UI.LayoutElementEditor.html",
    "title": "Class LayoutElementEditor | Snapshot",
    "keywords": "Class LayoutElementEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(LayoutElement), true)] [CanEditMultipleObjects] public class LayoutElementEditor : Editor Inheritance object Object ScriptableObject Editor LayoutElementEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.MaskEditor.html": {
    "href": "api/UnityEditor.UI.MaskEditor.html",
    "title": "Class MaskEditor | Snapshot",
    "keywords": "Class MaskEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(Mask), true)] [CanEditMultipleObjects] public class MaskEditor : Editor Inheritance object Object ScriptableObject Editor MaskEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.NavigationDrawer.html": {
    "href": "api/UnityEditor.UI.NavigationDrawer.html",
    "title": "Class NavigationDrawer | Snapshot",
    "keywords": "Class NavigationDrawer Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomPropertyDrawer(typeof(Navigation), true)] public class NavigationDrawer : PropertyDrawer Inheritance object GUIDrawer PropertyDrawer NavigationDrawer Inherited Members PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreatePropertyGUI(SerializedProperty) Override this method to make your own UI Toolkit based GUI for the property. public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters property SerializedProperty The SerializedProperty to make the custom GUI for. Returns VisualElement The element containing the custom GUI. GetPropertyHeight(SerializedProperty, GUIContent) Override this method to specify how tall the GUI for this field is in pixels. public override float GetPropertyHeight(SerializedProperty prop, GUIContent label) Parameters prop SerializedProperty label GUIContent The label of this property. Returns float The height in pixels. OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. public override void OnGUI(Rect pos, SerializedProperty prop, GUIContent label) Parameters pos Rect prop SerializedProperty label GUIContent The label of this property."
  },
  "api/UnityEditor.UI.RawImageEditor.html": {
    "href": "api/UnityEditor.UI.RawImageEditor.html",
    "title": "Class RawImageEditor | Snapshot",
    "keywords": "Class RawImageEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(RawImage), true)] [CanEditMultipleObjects] public class RawImageEditor : GraphicEditor Inheritance object Object ScriptableObject Editor GraphicEditor RawImageEditor Inherited Members GraphicEditor.m_Script GraphicEditor.m_Color GraphicEditor.m_Material GraphicEditor.m_RaycastTarget GraphicEditor.m_RaycastPadding GraphicEditor.m_Maskable GraphicEditor.m_ShowNativeSize GraphicEditor.OnDisable() GraphicEditor.SetShowNativeSize(bool, bool) GraphicEditor.NativeSizeButtonGUI() GraphicEditor.MaskableControlsGUI() GraphicEditor.AppearanceControlsGUI() GraphicEditor.RaycastControlsGUI() Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods GetInfoString() Info String drawn at the bottom of the Preview public override string GetInfoString() Returns string HasPreviewGUI() Allow the texture to be previewed. public override bool HasPreviewGUI() Returns bool OnEnable() protected override void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI() OnPreviewGUI(Rect, GUIStyle) Draw the Image preview. public override void OnPreviewGUI(Rect rect, GUIStyle background) Parameters rect Rect background GUIStyle"
  },
  "api/UnityEditor.UI.RectMask2DEditor.html": {
    "href": "api/UnityEditor.UI.RectMask2DEditor.html",
    "title": "Class RectMask2DEditor | Snapshot",
    "keywords": "Class RectMask2DEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(RectMask2D), true)] [CanEditMultipleObjects] public class RectMask2DEditor : Editor Inheritance object Object ScriptableObject Editor RectMask2DEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.ScrollRectEditor.html": {
    "href": "api/UnityEditor.UI.ScrollRectEditor.html",
    "title": "Class ScrollRectEditor | Snapshot",
    "keywords": "Class ScrollRectEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(ScrollRect), true)] [CanEditMultipleObjects] public class ScrollRectEditor : Editor Inheritance object Object ScriptableObject Editor ScrollRectEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnDisable() protected virtual void OnDisable() OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.ScrollbarEditor.html": {
    "href": "api/UnityEditor.UI.ScrollbarEditor.html",
    "title": "Class ScrollbarEditor | Snapshot",
    "keywords": "Class ScrollbarEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(Scrollbar), true)] [CanEditMultipleObjects] public class ScrollbarEditor : SelectableEditor Inheritance object Object ScriptableObject Editor SelectableEditor ScrollbarEditor Inherited Members SelectableEditor.OnDisable() Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected override void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.SelectableEditor.html": {
    "href": "api/UnityEditor.UI.SelectableEditor.html",
    "title": "Class SelectableEditor | Snapshot",
    "keywords": "Class SelectableEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(Selectable), true)] public class SelectableEditor : Editor Inheritance object Object ScriptableObject Editor SelectableEditor Derived ButtonEditor DropdownEditor InputFieldEditor ScrollbarEditor SliderEditor ToggleEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnDisable() protected virtual void OnDisable() OnEnable() protected virtual void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.SelfControllerEditor.html": {
    "href": "api/UnityEditor.UI.SelfControllerEditor.html",
    "title": "Class SelfControllerEditor | Snapshot",
    "keywords": "Class SelfControllerEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll Base class for custom editors that are for components that implement the SelfControllerEditor interface. public class SelfControllerEditor : Editor Inheritance object Object ScriptableObject Editor SelfControllerEditor Derived AspectRatioFitterEditor ContentSizeFitterEditor Inherited Members Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.SliderEditor.html": {
    "href": "api/UnityEditor.UI.SliderEditor.html",
    "title": "Class SliderEditor | Snapshot",
    "keywords": "Class SliderEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(Slider), true)] [CanEditMultipleObjects] public class SliderEditor : SelectableEditor Inheritance object Object ScriptableObject Editor SelectableEditor SliderEditor Inherited Members SelectableEditor.OnDisable() Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected override void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.SpriteStateDrawer.html": {
    "href": "api/UnityEditor.UI.SpriteStateDrawer.html",
    "title": "Class SpriteStateDrawer | Snapshot",
    "keywords": "Class SpriteStateDrawer Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomPropertyDrawer(typeof(SpriteState), true)] public class SpriteStateDrawer : PropertyDrawer Inheritance object GUIDrawer PropertyDrawer SpriteStateDrawer Inherited Members PropertyDrawer.CanCacheInspectorGUI(SerializedProperty) PropertyDrawer.attribute PropertyDrawer.fieldInfo PropertyDrawer.preferredLabel object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreatePropertyGUI(SerializedProperty) Override this method to make your own UI Toolkit based GUI for the property. public override VisualElement CreatePropertyGUI(SerializedProperty property) Parameters property SerializedProperty The SerializedProperty to make the custom GUI for. Returns VisualElement The element containing the custom GUI. GetPropertyHeight(SerializedProperty, GUIContent) Override this method to specify how tall the GUI for this field is in pixels. public override float GetPropertyHeight(SerializedProperty prop, GUIContent label) Parameters prop SerializedProperty label GUIContent The label of this property. Returns float The height in pixels. OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own IMGUI based GUI for the property. public override void OnGUI(Rect rect, SerializedProperty prop, GUIContent label) Parameters rect Rect prop SerializedProperty label GUIContent The label of this property."
  },
  "api/UnityEditor.UI.TextEditor.html": {
    "href": "api/UnityEditor.UI.TextEditor.html",
    "title": "Class TextEditor | Snapshot",
    "keywords": "Class TextEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(Text), true)] [CanEditMultipleObjects] public class TextEditor : GraphicEditor Inheritance object Object ScriptableObject Editor GraphicEditor TextEditor Inherited Members GraphicEditor.m_Script GraphicEditor.m_Color GraphicEditor.m_Material GraphicEditor.m_RaycastTarget GraphicEditor.m_RaycastPadding GraphicEditor.m_Maskable GraphicEditor.m_ShowNativeSize GraphicEditor.OnDisable() GraphicEditor.SetShowNativeSize(bool, bool) GraphicEditor.NativeSizeButtonGUI() GraphicEditor.MaskableControlsGUI() GraphicEditor.AppearanceControlsGUI() GraphicEditor.RaycastControlsGUI() Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected override void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.ToggleEditor.html": {
    "href": "api/UnityEditor.UI.ToggleEditor.html",
    "title": "Class ToggleEditor | Snapshot",
    "keywords": "Class ToggleEditor Namespace UnityEditor.UI Assembly UnityEditor.UI.dll [CustomEditor(typeof(Toggle), true)] [CanEditMultipleObjects] public class ToggleEditor : SelectableEditor Inheritance object Object ScriptableObject Editor SelectableEditor ToggleEditor Inherited Members SelectableEditor.OnDisable() Editor.SaveChanges() Editor.DiscardChanges() Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, ref Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, ref Editor) Editor.CreateCachedEditor(Object, Type, ref Editor) Editor.CreateCachedEditor(Object[], Type, ref Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, params string[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, ref Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(string, Object[], int, int) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.MoveNextTarget() Editor.ResetTarget() Editor.hasUnsavedChanges Editor.saveChangesMessage Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods OnEnable() protected override void OnEnable() OnInspectorGUI() Implement this function to make a custom inspector. public override void OnInspectorGUI()"
  },
  "api/UnityEditor.UI.html": {
    "href": "api/UnityEditor.UI.html",
    "title": "Namespace UnityEditor.UI | Snapshot",
    "keywords": "Namespace UnityEditor.UI Classes AnimationTriggersDrawer AspectRatioFitterEditor ButtonEditor CanvasScalerEditor ColorBlockDrawer ContentSizeFitterEditor DropdownEditor FontDataDrawer GraphicEditor Editor class used to edit UI Graphics. Extend this class to write your own graphic editor. GridLayoutGroupEditor HorizontalOrVerticalLayoutGroupEditor ImageEditor Editor class used to edit UI Sprites. InputFieldEditor LayoutElementEditor MaskEditor NavigationDrawer RawImageEditor RectMask2DEditor ScrollRectEditor ScrollbarEditor SelectableEditor SelfControllerEditor Base class for custom editors that are for components that implement the SelfControllerEditor interface. SliderEditor SpriteStateDrawer TextEditor ToggleEditor"
  },
  "api/UnityEngine.EventSystems.AbstractEventData.html": {
    "href": "api/UnityEngine.EventSystems.AbstractEventData.html",
    "title": "Class AbstractEventData | Snapshot",
    "keywords": "Class AbstractEventData Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll A class that can be used for sending simple events via the event system. public abstract class AbstractEventData Inheritance object AbstractEventData Derived BaseEventData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields m_Used protected bool m_Used Field Value bool Properties used Is the event used? public virtual bool used { get; } Property Value bool Methods Reset() Reset the event. public virtual void Reset() Use() Use the event. public virtual void Use() Remarks Internally sets a flag that can be checked via used to see if further processing should happen."
  },
  "api/UnityEngine.EventSystems.AxisEventData.html": {
    "href": "api/UnityEngine.EventSystems.AxisEventData.html",
    "title": "Class AxisEventData | Snapshot",
    "keywords": "Class AxisEventData Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Event Data associated with Axis Events (Controller / Keyboard). public class AxisEventData : BaseEventData Inheritance object AbstractEventData BaseEventData AxisEventData Inherited Members BaseEventData.currentInputModule BaseEventData.selectedObject AbstractEventData.m_Used AbstractEventData.Reset() AbstractEventData.Use() AbstractEventData.used object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AxisEventData(EventSystem) public AxisEventData(EventSystem eventSystem) Parameters eventSystem EventSystem Properties moveDir MoveDirection for this event. public MoveDirection moveDir { get; set; } Property Value MoveDirection moveVector Raw input vector associated with this event. public Vector2 moveVector { get; set; } Property Value Vector2"
  },
  "api/UnityEngine.EventSystems.BaseEventData.html": {
    "href": "api/UnityEngine.EventSystems.BaseEventData.html",
    "title": "Class BaseEventData | Snapshot",
    "keywords": "Class BaseEventData Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll A class that contains the base event data that is common to all event types in the new EventSystem. public class BaseEventData : AbstractEventData Inheritance object AbstractEventData BaseEventData Derived AxisEventData PointerEventData Inherited Members AbstractEventData.m_Used AbstractEventData.Reset() AbstractEventData.Use() AbstractEventData.used object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseEventData(EventSystem) public BaseEventData(EventSystem eventSystem) Parameters eventSystem EventSystem Properties currentInputModule A reference to the BaseInputModule that sent this event. public BaseInputModule currentInputModule { get; } Property Value BaseInputModule selectedObject The object currently considered selected by the EventSystem. public GameObject selectedObject { get; set; } Property Value GameObject"
  },
  "api/UnityEngine.EventSystems.BaseInput.html": {
    "href": "api/UnityEngine.EventSystems.BaseInput.html",
    "title": "Class BaseInput | Snapshot",
    "keywords": "Class BaseInput Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to the Input system used by the BaseInputModule. With this it is possible to bypass the Input system with your own but still use the same InputModule. For example this can be used to feed fake input into the UI or interface with a different input system. public class BaseInput : UIBehaviour Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseInput Inherited Members UIBehaviour.Awake() UIBehaviour.OnEnable() UIBehaviour.Start() UIBehaviour.OnDisable() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties compositionCursorPos Interface to Input.compositionCursorPos. Can be overridden to provide custom input instead of using the Input class. public virtual Vector2 compositionCursorPos { get; set; } Property Value Vector2 compositionString Interface to Input.compositionString. Can be overridden to provide custom input instead of using the Input class. public virtual string compositionString { get; } Property Value string imeCompositionMode Interface to Input.imeCompositionMode. Can be overridden to provide custom input instead of using the Input class. public virtual IMECompositionMode imeCompositionMode { get; set; } Property Value IMECompositionMode mousePosition Interface to Input.mousePosition. Can be overridden to provide custom input instead of using the Input class. public virtual Vector2 mousePosition { get; } Property Value Vector2 mousePresent Interface to Input.mousePresent. Can be overridden to provide custom input instead of using the Input class. public virtual bool mousePresent { get; } Property Value bool mouseScrollDelta Interface to Input.mouseScrollDelta. Can be overridden to provide custom input instead of using the Input class. public virtual Vector2 mouseScrollDelta { get; } Property Value Vector2 touchCount Interface to Input.touchCount. Can be overridden to provide custom input instead of using the Input class. public virtual int touchCount { get; } Property Value int touchSupported Interface to Input.touchSupported. Can be overridden to provide custom input instead of using the Input class. public virtual bool touchSupported { get; } Property Value bool Methods GetAxisRaw(string) Interface to Input.GetAxisRaw. Can be overridden to provide custom input instead of using the Input class. public virtual float GetAxisRaw(string axisName) Parameters axisName string Axis name to check Returns float GetButtonDown(string) Interface to Input.GetButtonDown. Can be overridden to provide custom input instead of using the Input class. public virtual bool GetButtonDown(string buttonName) Parameters buttonName string Button name to get Returns bool GetMouseButton(int) Interface to Input.GetMouseButton. Can be overridden to provide custom input instead of using the Input class. public virtual bool GetMouseButton(int button) Parameters button int Returns bool GetMouseButtonDown(int) Interface to Input.GetMouseButtonDown. Can be overridden to provide custom input instead of using the Input class. public virtual bool GetMouseButtonDown(int button) Parameters button int Returns bool GetMouseButtonUp(int) Interface to Input.GetMouseButtonUp. Can be overridden to provide custom input instead of using the Input class. public virtual bool GetMouseButtonUp(int button) Parameters button int Returns bool GetTouch(int) Interface to Input.GetTouch. Can be overridden to provide custom input instead of using the Input class. public virtual Touch GetTouch(int index) Parameters index int Touch index to get Returns Touch"
  },
  "api/UnityEngine.EventSystems.BaseInputModule.html": {
    "href": "api/UnityEngine.EventSystems.BaseInputModule.html",
    "title": "Class BaseInputModule | Snapshot",
    "keywords": "Class BaseInputModule Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll [RequireComponent(typeof(EventSystem))] public abstract class BaseInputModule : UIBehaviour Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseInputModule Derived PointerInputModule Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields m_InputOverride protected BaseInput m_InputOverride Field Value BaseInput m_RaycastResultCache [NonSerialized] protected List<RaycastResult> m_RaycastResultCache Field Value List<RaycastResult> Properties eventSystem protected EventSystem eventSystem { get; } Property Value EventSystem input The current BaseInput being used by the input module. public BaseInput input { get; } Property Value BaseInput inputOverride Used to override the default BaseInput for the input module. public BaseInput inputOverride { get; set; } Property Value BaseInput Remarks With this it is possible to bypass the Input system with your own but still use the same InputModule. For example this can be used to feed fake input into the UI or interface with a different input system. Methods ActivateModule() Called when the module is activated. Override this if you want custom code to execute when you activate your module. public virtual void ActivateModule() ConvertUIToolkitPointerId(PointerEventData) Returns Id of the pointer following UnityEngine.UIElements.PointerId convention. public virtual int ConvertUIToolkitPointerId(PointerEventData sourcePointerData) Parameters sourcePointerData PointerEventData PointerEventData whose pointerId will be converted to UI Toolkit pointer convention. Returns int See Also IPointerEvent DeactivateModule() Called when the module is deactivated. Override this if you want custom code to execute when you deactivate your module. public virtual void DeactivateModule() DetermineMoveDirection(float, float) Given an input movement, determine the best MoveDirection. protected static MoveDirection DetermineMoveDirection(float x, float y) Parameters x float X movement. y float Y movement. Returns MoveDirection DetermineMoveDirection(float, float, float) Given an input movement, determine the best MoveDirection. protected static MoveDirection DetermineMoveDirection(float x, float y, float deadZone) Parameters x float X movement. y float Y movement. deadZone float Dead zone. Returns MoveDirection FindCommonRoot(GameObject, GameObject) Given 2 GameObjects, return a common root GameObject (or null). protected static GameObject FindCommonRoot(GameObject g1, GameObject g2) Parameters g1 GameObject GameObject to compare g2 GameObject GameObject to compare Returns GameObject FindFirstRaycast(List<RaycastResult>) Return the first valid RaycastResult. protected static RaycastResult FindFirstRaycast(List<RaycastResult> candidates) Parameters candidates List<RaycastResult> Returns RaycastResult GetAxisEventData(float, float, float) Given some input data generate an AxisEventData that can be used by the event system. protected virtual AxisEventData GetAxisEventData(float x, float y, float moveDeadZone) Parameters x float X movement. y float Y movement. moveDeadZone float Returns AxisEventData GetBaseEventData() Generate a BaseEventData that can be used by the EventSystem. protected virtual BaseEventData GetBaseEventData() Returns BaseEventData HandlePointerExitAndEnter(PointerEventData, GameObject) protected void HandlePointerExitAndEnter(PointerEventData currentPointerData, GameObject newEnterTarget) Parameters currentPointerData PointerEventData newEnterTarget GameObject IsModuleSupported() Check to see if the module is supported. Override this if you have a platform specific module (eg. TouchInputModule that you do not want to activate on standalone.) public virtual bool IsModuleSupported() Returns bool Is the module supported. IsPointerOverGameObject(int) If the module is pointer based, then override this to return true if the pointer is over an event system object. public virtual bool IsPointerOverGameObject(int pointerId) Parameters pointerId int Pointer ID Returns bool Is the given pointer over an event system object? OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() Process() Process the current tick for the module. public abstract void Process() ShouldActivateModule() Should the module be activated. public virtual bool ShouldActivateModule() Returns bool UpdateModule() Update the internal state of the Module. public virtual void UpdateModule()"
  },
  "api/UnityEngine.EventSystems.BaseRaycaster.html": {
    "href": "api/UnityEngine.EventSystems.BaseRaycaster.html",
    "title": "Class BaseRaycaster | Snapshot",
    "keywords": "Class BaseRaycaster Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Base class for any RayCaster. public abstract class BaseRaycaster : UIBehaviour Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseRaycaster Derived PhysicsRaycaster GraphicRaycaster Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks A Raycaster is responsible for raycasting against scene elements to determine if the cursor is over them. Default Raycasters include PhysicsRaycaster, Physics2DRaycaster, GraphicRaycaster. Custom raycasters can be added by extending this class. Properties eventCamera The camera that will generate rays for this raycaster. public abstract Camera eventCamera { get; } Property Value Camera priority [Obsolete(\"Please use sortOrderPriority and renderOrderPriority\", false)] public virtual int priority { get; } Property Value int renderOrderPriority Priority of the raycaster based upon render order. public virtual int renderOrderPriority { get; } Property Value int rootRaycaster Raycaster on root canvas public BaseRaycaster rootRaycaster { get; } Property Value BaseRaycaster sortOrderPriority Priority of the raycaster based upon sort order. public virtual int sortOrderPriority { get; } Property Value int Methods OnCanvasHierarchyChanged() Called when the state of the parent Canvas is changed. protected override void OnCanvasHierarchyChanged() OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnTransformParentChanged() protected override void OnTransformParentChanged() Raycast(PointerEventData, List<RaycastResult>) Raycast against the scene. public abstract void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters eventData PointerEventData Current event data. resultAppendList List<RaycastResult> List of hit Objects. ToString() Returns the name of the object. public override string ToString() Returns string The name returned by ToString."
  },
  "api/UnityEngine.EventSystems.EventHandle.html": {
    "href": "api/UnityEngine.EventSystems.EventHandle.html",
    "title": "Enum EventHandle | Snapshot",
    "keywords": "Enum EventHandle Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll [Flags] public enum EventHandle Fields Unused = 0 Used = 1"
  },
  "api/UnityEngine.EventSystems.EventSystem.html": {
    "href": "api/UnityEngine.EventSystems.EventSystem.html",
    "title": "Class EventSystem | Snapshot",
    "keywords": "Class EventSystem Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll [AddComponentMenu(\"Event/Event System\")] [DisallowMultipleComponent] public class EventSystem : UIBehaviour Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour EventSystem Inherited Members UIBehaviour.Awake() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EventSystem() protected EventSystem() Properties alreadySelecting Returns true if the EventSystem is already in a SetSelectedGameObject. public bool alreadySelecting { get; } Property Value bool current Return the current EventSystem. public static EventSystem current { get; set; } Property Value EventSystem currentInputModule The currently active EventSystems.BaseInputModule. public BaseInputModule currentInputModule { get; } Property Value BaseInputModule currentSelectedGameObject The GameObject currently considered active by the EventSystem. public GameObject currentSelectedGameObject { get; } Property Value GameObject firstSelectedGameObject Only one object can be selected at a time. Think: controller-selected button. public GameObject firstSelectedGameObject { get; set; } Property Value GameObject isFocused Flag to say whether the EventSystem thinks it should be paused or not based upon focused state. public bool isFocused { get; } Property Value bool Remarks Used to determine inside the individual InputModules if the module should be ticked while the application doesnt have focus. lastSelectedGameObject [Obsolete(\"lastSelectedGameObject is no longer supported\")] public GameObject lastSelectedGameObject { get; } Property Value GameObject pixelDragThreshold The soft area for dragging in pixels. public int pixelDragThreshold { get; set; } Property Value int sendNavigationEvents Should the EventSystem allow navigation events (move / submit / cancel). public bool sendNavigationEvents { get; set; } Property Value bool Methods IsPointerOverGameObject() Is the pointer with the given ID over an EventSystem object? public bool IsPointerOverGameObject() Returns bool IsPointerOverGameObject(int) Is the pointer with the given ID over an EventSystem object? public bool IsPointerOverGameObject(int pointerId) Parameters pointerId int Returns bool Examples using UnityEngine; using System.Collections; using UnityEngine.EventSystems; public class MouseExample : MonoBehaviour { void Update() { // Check if the left mouse button was clicked if (Input.GetMouseButtonDown(0)) { // Check if the mouse was clicked over a UI element if (EventSystem.current.IsPointerOverGameObject()) { Debug.Log(\"Clicked on the UI\"); } } } } Remarks If you use IsPointerOverGameObject() without a parameter, it points to the \"left mouse button\" (pointerId = -1); therefore when you use IsPointerOverGameObject for touch, you should consider passing a pointerId to it Note that for touch, IsPointerOverGameObject should be used with ''OnMouseDown()'' or ''Input.GetMouseButtonDown(0)'' or ''Input.GetTouch(0).phase == TouchPhase.Began''. OnApplicationFocus(bool) protected virtual void OnApplicationFocus(bool hasFocus) Parameters hasFocus bool OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() RaycastAll(PointerEventData, List<RaycastResult>) Raycast into the scene using all configured BaseRaycasters. public void RaycastAll(PointerEventData eventData, List<RaycastResult> raycastResults) Parameters eventData PointerEventData Current pointer data. raycastResults List<RaycastResult> List of 'hits' to populate. SetSelectedGameObject(GameObject) Set the object as selected. Will send an OnDeselect the the old selected object and OnSelect to the new selected object. public void SetSelectedGameObject(GameObject selected) Parameters selected GameObject GameObject to select. SetSelectedGameObject(GameObject, BaseEventData) Set the object as selected. Will send an OnDeselect the the old selected object and OnSelect to the new selected object. public void SetSelectedGameObject(GameObject selected, BaseEventData pointer) Parameters selected GameObject GameObject to select. pointer BaseEventData Associated EventData. SetUITookitEventSystemOverride(EventSystem, bool, bool) Sets how UI Toolkit runtime panels receive events and handle selection when interacting with other objects that use the EventSystem, such as components from the Unity UI package. public static void SetUITookitEventSystemOverride(EventSystem activeEventSystem, bool sendEvents = true, bool createPanelGameObjectsOnStart = true) Parameters activeEventSystem EventSystem The EventSystem used to override UI Toolkit panel events and selection. If activeEventSystem is null, UI Toolkit panels will use current enabled EventSystem or, if there is none, the default InputManager-based event system will be used. sendEvents bool If true, UI Toolkit events will come from this EventSystem instead of the default InputManager-based event system. createPanelGameObjectsOnStart bool If true, UI Toolkit panels' unassigned selectableGameObject will be automatically initialized with children GameObjects of this EventSystem on Start. Start() protected override void Start() ToString() Returns the name of the object. public override string ToString() Returns string The name returned by ToString. Update() protected virtual void Update() UpdateModules() Recalculate the internal list of BaseInputModules. public void UpdateModules()"
  },
  "api/UnityEngine.EventSystems.EventTrigger.Entry.html": {
    "href": "api/UnityEngine.EventSystems.EventTrigger.Entry.html",
    "title": "Class EventTrigger.Entry | Snapshot",
    "keywords": "Class EventTrigger.Entry Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll [Serializable] public class EventTrigger.Entry Inheritance object EventTrigger.Entry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields callback The desired TriggerEvent to be Invoked. public EventTrigger.TriggerEvent callback Field Value EventTrigger.TriggerEvent eventID What type of event is the associated callback listening for. public EventTriggerType eventID Field Value EventTriggerType"
  },
  "api/UnityEngine.EventSystems.EventTrigger.TriggerEvent.html": {
    "href": "api/UnityEngine.EventSystems.EventTrigger.TriggerEvent.html",
    "title": "Class EventTrigger.TriggerEvent | Snapshot",
    "keywords": "Class EventTrigger.TriggerEvent Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll [Serializable] public class EventTrigger.TriggerEvent : UnityEvent<BaseEventData>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<BaseEventData> EventTrigger.TriggerEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<BaseEventData>.AddListener(UnityAction<BaseEventData>) UnityEvent<BaseEventData>.RemoveListener(UnityAction<BaseEventData>) UnityEvent<BaseEventData>.FindMethod_Impl(string, Type) UnityEvent<BaseEventData>.Invoke(BaseEventData) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.EventSystems.EventTrigger.html": {
    "href": "api/UnityEngine.EventSystems.EventTrigger.html",
    "title": "Class EventTrigger | Snapshot",
    "keywords": "Class EventTrigger Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll [AddComponentMenu(\"Event/Event Trigger\")] public class EventTrigger : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IInitializePotentialDragHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler Inheritance object Object Component Behaviour MonoBehaviour EventTrigger Implements IPointerEnterHandler IPointerExitHandler IPointerDownHandler IPointerUpHandler IPointerClickHandler IInitializePotentialDragHandler IBeginDragHandler IDragHandler IEndDragHandler IDropHandler IScrollHandler IUpdateSelectedHandler ISelectHandler IDeselectHandler IMoveHandler ISubmitHandler ICancelHandler IEventSystemHandler Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors EventTrigger() protected EventTrigger() Properties triggers All the functions registered in this EventTrigger public List<EventTrigger.Entry> triggers { get; set; } Property Value List<EventTrigger.Entry> Methods OnBeginDrag(PointerEventData) Called before a drag is started. public virtual void OnBeginDrag(PointerEventData eventData) Parameters eventData PointerEventData OnCancel(BaseEventData) Called by the EventSystem when a Cancel event occurs. public virtual void OnCancel(BaseEventData eventData) Parameters eventData BaseEventData OnDeselect(BaseEventData) Called by the EventSystem when a new object is being selected. public virtual void OnDeselect(BaseEventData eventData) Parameters eventData BaseEventData OnDrag(PointerEventData) Called by the EventSystem every time the pointer is moved during dragging. public virtual void OnDrag(PointerEventData eventData) Parameters eventData PointerEventData OnDrop(PointerEventData) Called by the EventSystem when an object accepts a drop. public virtual void OnDrop(PointerEventData eventData) Parameters eventData PointerEventData OnEndDrag(PointerEventData) Called by the EventSystem once dragging ends. public virtual void OnEndDrag(PointerEventData eventData) Parameters eventData PointerEventData OnInitializePotentialDrag(PointerEventData) Called by the EventSystem when a drag has been found, but before it is valid to begin the drag. public virtual void OnInitializePotentialDrag(PointerEventData eventData) Parameters eventData PointerEventData OnMove(AxisEventData) Called by the EventSystem when a Move event occurs. public virtual void OnMove(AxisEventData eventData) Parameters eventData AxisEventData OnPointerClick(PointerEventData) Called by the EventSystem when a Click event occurs. public virtual void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData OnPointerDown(PointerEventData) Called by the EventSystem when a PointerDown event occurs. public virtual void OnPointerDown(PointerEventData eventData) Parameters eventData PointerEventData OnPointerEnter(PointerEventData) Called by the EventSystem when the pointer enters the object associated with this EventTrigger. public virtual void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData OnPointerExit(PointerEventData) Called by the EventSystem when the pointer exits the object associated with this EventTrigger. public virtual void OnPointerExit(PointerEventData eventData) Parameters eventData PointerEventData OnPointerUp(PointerEventData) Called by the EventSystem when a PointerUp event occurs. public virtual void OnPointerUp(PointerEventData eventData) Parameters eventData PointerEventData OnScroll(PointerEventData) Called by the EventSystem when a new Scroll event occurs. public virtual void OnScroll(PointerEventData eventData) Parameters eventData PointerEventData OnSelect(BaseEventData) Called by the EventSystem when a Select event occurs. public virtual void OnSelect(BaseEventData eventData) Parameters eventData BaseEventData OnSubmit(BaseEventData) Called by the EventSystem when a Submit event occurs. public virtual void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData OnUpdateSelected(BaseEventData) Called by the EventSystem when the object associated with this EventTrigger is updated. public virtual void OnUpdateSelected(BaseEventData eventData) Parameters eventData BaseEventData"
  },
  "api/UnityEngine.EventSystems.EventTriggerType.html": {
    "href": "api/UnityEngine.EventSystems.EventTriggerType.html",
    "title": "Enum EventTriggerType | Snapshot",
    "keywords": "Enum EventTriggerType Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll This class is capable of triggering one or more remote functions from a specified event. Usage: Attach it to an object with a collider, or to a GUI Graphic of your choice. NOTE: Doing this will make this object intercept ALL events, and no event bubbling will occur from this object! public enum EventTriggerType Fields BeginDrag = 13 Intercepts IBeginDragHandler.OnBeginDrag. Cancel = 16 Intercepts ICancelHandler.OnCancel. Deselect = 10 Intercepts a IDeselectHandler.OnDeselect. Drag = 5 Intercepts a IDragHandler.OnDrag. Drop = 6 Intercepts a IDropHandler.OnDrop. EndDrag = 14 Intercepts IEndDragHandler.OnEndDrag. InitializePotentialDrag = 12 Intercepts IInitializePotentialDrag.InitializePotentialDrag. Move = 11 Intercepts a IMoveHandler.OnMove. PointerClick = 4 Intercepts a IPointerClickHandler.OnPointerClick. PointerDown = 2 Intercepts a IPointerDownHandler.OnPointerDown. PointerEnter = 0 Intercepts a IPointerEnterHandler.OnPointerEnter. PointerExit = 1 Intercepts a IPointerExitHandler.OnPointerExit. PointerUp = 3 Intercepts a IPointerUpHandler.OnPointerUp. Scroll = 7 Intercepts a IScrollHandler.OnScroll. Select = 9 Intercepts a ISelectHandler.OnSelect. Submit = 15 Intercepts ISubmitHandler.Submit. UpdateSelected = 8 Intercepts a IUpdateSelectedHandler.OnUpdateSelected."
  },
  "api/UnityEngine.EventSystems.ExecuteEvents.EventFunction-1.html": {
    "href": "api/UnityEngine.EventSystems.ExecuteEvents.EventFunction-1.html",
    "title": "Delegate ExecuteEvents.EventFunction<T1> | Snapshot",
    "keywords": "Delegate ExecuteEvents.EventFunction<T1> Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll public delegate void ExecuteEvents.EventFunction<T1>(T1 handler, BaseEventData eventData) Parameters handler T1 eventData BaseEventData Type Parameters T1"
  },
  "api/UnityEngine.EventSystems.ExecuteEvents.html": {
    "href": "api/UnityEngine.EventSystems.ExecuteEvents.html",
    "title": "Class ExecuteEvents | Snapshot",
    "keywords": "Class ExecuteEvents Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll public static class ExecuteEvents Inheritance object ExecuteEvents Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties beginDragHandler public static ExecuteEvents.EventFunction<IBeginDragHandler> beginDragHandler { get; } Property Value ExecuteEvents.EventFunction<IBeginDragHandler> cancelHandler public static ExecuteEvents.EventFunction<ICancelHandler> cancelHandler { get; } Property Value ExecuteEvents.EventFunction<ICancelHandler> deselectHandler public static ExecuteEvents.EventFunction<IDeselectHandler> deselectHandler { get; } Property Value ExecuteEvents.EventFunction<IDeselectHandler> dragHandler public static ExecuteEvents.EventFunction<IDragHandler> dragHandler { get; } Property Value ExecuteEvents.EventFunction<IDragHandler> dropHandler public static ExecuteEvents.EventFunction<IDropHandler> dropHandler { get; } Property Value ExecuteEvents.EventFunction<IDropHandler> endDragHandler public static ExecuteEvents.EventFunction<IEndDragHandler> endDragHandler { get; } Property Value ExecuteEvents.EventFunction<IEndDragHandler> initializePotentialDrag public static ExecuteEvents.EventFunction<IInitializePotentialDragHandler> initializePotentialDrag { get; } Property Value ExecuteEvents.EventFunction<IInitializePotentialDragHandler> moveHandler public static ExecuteEvents.EventFunction<IMoveHandler> moveHandler { get; } Property Value ExecuteEvents.EventFunction<IMoveHandler> pointerClickHandler public static ExecuteEvents.EventFunction<IPointerClickHandler> pointerClickHandler { get; } Property Value ExecuteEvents.EventFunction<IPointerClickHandler> pointerDownHandler public static ExecuteEvents.EventFunction<IPointerDownHandler> pointerDownHandler { get; } Property Value ExecuteEvents.EventFunction<IPointerDownHandler> pointerEnterHandler public static ExecuteEvents.EventFunction<IPointerEnterHandler> pointerEnterHandler { get; } Property Value ExecuteEvents.EventFunction<IPointerEnterHandler> pointerExitHandler public static ExecuteEvents.EventFunction<IPointerExitHandler> pointerExitHandler { get; } Property Value ExecuteEvents.EventFunction<IPointerExitHandler> pointerMoveHandler public static ExecuteEvents.EventFunction<IPointerMoveHandler> pointerMoveHandler { get; } Property Value ExecuteEvents.EventFunction<IPointerMoveHandler> pointerUpHandler public static ExecuteEvents.EventFunction<IPointerUpHandler> pointerUpHandler { get; } Property Value ExecuteEvents.EventFunction<IPointerUpHandler> scrollHandler public static ExecuteEvents.EventFunction<IScrollHandler> scrollHandler { get; } Property Value ExecuteEvents.EventFunction<IScrollHandler> selectHandler public static ExecuteEvents.EventFunction<ISelectHandler> selectHandler { get; } Property Value ExecuteEvents.EventFunction<ISelectHandler> submitHandler public static ExecuteEvents.EventFunction<ISubmitHandler> submitHandler { get; } Property Value ExecuteEvents.EventFunction<ISubmitHandler> updateSelectedHandler public static ExecuteEvents.EventFunction<IUpdateSelectedHandler> updateSelectedHandler { get; } Property Value ExecuteEvents.EventFunction<IUpdateSelectedHandler> Methods CanHandleEvent<T>(GameObject) Whether the specified game object will be able to handle the specified event. public static bool CanHandleEvent<T>(GameObject go) where T : IEventSystemHandler Parameters go GameObject Returns bool Type Parameters T ExecuteHierarchy<T>(GameObject, BaseEventData, EventFunction<T>) public static GameObject ExecuteHierarchy<T>(GameObject root, BaseEventData eventData, ExecuteEvents.EventFunction<T> callbackFunction) where T : IEventSystemHandler Parameters root GameObject eventData BaseEventData callbackFunction ExecuteEvents.EventFunction<T> Returns GameObject Type Parameters T Execute<T>(GameObject, BaseEventData, EventFunction<T>) public static bool Execute<T>(GameObject target, BaseEventData eventData, ExecuteEvents.EventFunction<T> functor) where T : IEventSystemHandler Parameters target GameObject eventData BaseEventData functor ExecuteEvents.EventFunction<T> Returns bool Type Parameters T GetEventHandler<T>(GameObject) Bubble the specified event on the game object, figuring out which object will actually receive the event. public static GameObject GetEventHandler<T>(GameObject root) where T : IEventSystemHandler Parameters root GameObject Returns GameObject Type Parameters T ValidateEventData<T>(BaseEventData) public static T ValidateEventData<T>(BaseEventData data) where T : class Parameters data BaseEventData Returns T Type Parameters T"
  },
  "api/UnityEngine.EventSystems.IBeginDragHandler.html": {
    "href": "api/UnityEngine.EventSystems.IBeginDragHandler.html",
    "title": "Interface IBeginDragHandler | Snapshot",
    "keywords": "Interface IBeginDragHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnBeginDrag callbacks. Note: You need to implement IDragHandler in addition to IBeginDragHandler. public interface IBeginDragHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnBeginDrag(PointerEventData) Called by a BaseInputModule before a drag is started. void OnBeginDrag(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.ICancelHandler.html": {
    "href": "api/UnityEngine.EventSystems.ICancelHandler.html",
    "title": "Interface ICancelHandler | Snapshot",
    "keywords": "Interface ICancelHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnCancel callbacks. public interface ICancelHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnCancel(BaseEventData) void OnCancel(BaseEventData eventData) Parameters eventData BaseEventData"
  },
  "api/UnityEngine.EventSystems.IDeselectHandler.html": {
    "href": "api/UnityEngine.EventSystems.IDeselectHandler.html",
    "title": "Interface IDeselectHandler | Snapshot",
    "keywords": "Interface IDeselectHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnDeselect callbacks. public interface IDeselectHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnDeselect(BaseEventData) Called by the EventSystem when a new object is being selected. void OnDeselect(BaseEventData eventData) Parameters eventData BaseEventData"
  },
  "api/UnityEngine.EventSystems.IDragHandler.html": {
    "href": "api/UnityEngine.EventSystems.IDragHandler.html",
    "title": "Interface IDragHandler | Snapshot",
    "keywords": "Interface IDragHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnDrag callbacks. public interface IDragHandler : IEventSystemHandler Examples using UnityEngine; using UnityEngine.EventSystems; using UnityEngine.UI; [RequireComponent(typeof(Image))] public class DragMe : MonoBehaviour, IBeginDragHandler, IDragHandler, IEndDragHandler { public bool dragOnSurfaces = true; private GameObject m_DraggingIcon; private RectTransform m_DraggingPlane; public void OnBeginDrag(PointerEventData eventData) { var canvas = FindInParents<Canvas>(gameObject); if (canvas == null) return; // We have clicked something that can be dragged. // What we want to do is create an icon for this. m_DraggingIcon = new GameObject(\"icon\"); m_DraggingIcon.transform.SetParent(canvas.transform, false); m_DraggingIcon.transform.SetAsLastSibling(); var image = m_DraggingIcon.AddComponent<Image>(); image.sprite = GetComponent<Image>().sprite; image.SetNativeSize(); if (dragOnSurfaces) m_DraggingPlane = transform as RectTransform; else m_DraggingPlane = canvas.transform as RectTransform; SetDraggedPosition(eventData); } public void OnDrag(PointerEventData data) { if (m_DraggingIcon != null) SetDraggedPosition(data); } private void SetDraggedPosition(PointerEventData data) { if (dragOnSurfaces && data.pointerEnter != null && data.pointerEnter.transform as RectTransform != null) m_DraggingPlane = data.pointerEnter.transform as RectTransform; var rt = m_DraggingIcon.GetComponent<RectTransform>(); Vector3 globalMousePos; if (RectTransformUtility.ScreenPointToWorldPointInRectangle(m_DraggingPlane, data.position, data.pressEventCamera, out globalMousePos)) { rt.position = globalMousePos; rt.rotation = m_DraggingPlane.rotation; } } public void OnEndDrag(PointerEventData eventData) { if (m_DraggingIcon != null) Destroy(m_DraggingIcon); } static public T FindInParents<T>(GameObject go) where T : Component { if (go == null) return null; var comp = go.GetComponent<T>(); if (comp != null) return comp; Transform t = go.transform.parent; while (t != null && comp == null) { comp = t.gameObject.GetComponent<T>(); t = t.parent; } return comp; } } Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnDrag(PointerEventData) When dragging is occurring this will be called every time the cursor is moved. void OnDrag(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.IDropHandler.html": {
    "href": "api/UnityEngine.EventSystems.IDropHandler.html",
    "title": "Interface IDropHandler | Snapshot",
    "keywords": "Interface IDropHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnDrop callbacks. public interface IDropHandler : IEventSystemHandler Examples using UnityEngine; using UnityEngine.EventSystems; public class DropMe : MonoBehaviour, IDropHandler { public void OnDrop(PointerEventData data) { if (data.pointerDrag != null) { Debug.Log (\"Dropped object was: \" + data.pointerDrag); } } } Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnDrop(PointerEventData) Called by a BaseInputModule on a target that can accept a drop. void OnDrop(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.IEndDragHandler.html": {
    "href": "api/UnityEngine.EventSystems.IEndDragHandler.html",
    "title": "Interface IEndDragHandler | Snapshot",
    "keywords": "Interface IEndDragHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnEndDrag callbacks. Note: You need to implement IDragHandler in addition to IEndDragHandler. public interface IEndDragHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnEndDrag(PointerEventData) Called by a BaseInputModule when a drag is ended. void OnEndDrag(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.IEventSystemHandler.html": {
    "href": "api/UnityEngine.EventSystems.IEventSystemHandler.html",
    "title": "Interface IEventSystemHandler | Snapshot",
    "keywords": "Interface IEventSystemHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Base class that all EventSystem events inherit from. public interface IEventSystemHandler"
  },
  "api/UnityEngine.EventSystems.IInitializePotentialDragHandler.html": {
    "href": "api/UnityEngine.EventSystems.IInitializePotentialDragHandler.html",
    "title": "Interface IInitializePotentialDragHandler | Snapshot",
    "keywords": "Interface IInitializePotentialDragHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnInitializePotentialDrag callbacks. public interface IInitializePotentialDragHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnInitializePotentialDrag(PointerEventData) Called by a BaseInputModule when a drag has been found but before it is valid to begin the drag. void OnInitializePotentialDrag(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.IMoveHandler.html": {
    "href": "api/UnityEngine.EventSystems.IMoveHandler.html",
    "title": "Interface IMoveHandler | Snapshot",
    "keywords": "Interface IMoveHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnMove callbacks. public interface IMoveHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnMove(AxisEventData) Called by a BaseInputModule when a move event occurs. void OnMove(AxisEventData eventData) Parameters eventData AxisEventData"
  },
  "api/UnityEngine.EventSystems.IPointerClickHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerClickHandler.html",
    "title": "Interface IPointerClickHandler | Snapshot",
    "keywords": "Interface IPointerClickHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnPointerClick callbacks. public interface IPointerClickHandler : IEventSystemHandler Examples using UnityEngine; using UnityEngine.EventSystems; public class Example : MonoBehaviour, IPointerClickHandler { //Detect if a click occurs public void OnPointerClick(PointerEventData pointerEventData) { //Output to console the clicked GameObject's name and the following message. You can replace this with your own actions for when clicking the GameObject. Debug.Log(name + \" Game Object Clicked!\"); } } Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnPointerClick(PointerEventData) Use this callback to detect clicks. void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.IPointerDownHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerDownHandler.html",
    "title": "Interface IPointerDownHandler | Snapshot",
    "keywords": "Interface IPointerDownHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnPointerDown callbacks. public interface IPointerDownHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnPointerDown(PointerEventData) Use this callback to detect pointer down events. void OnPointerDown(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.IPointerEnterHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerEnterHandler.html",
    "title": "Interface IPointerEnterHandler | Snapshot",
    "keywords": "Interface IPointerEnterHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnPointerEnter callbacks. public interface IPointerEnterHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnPointerEnter(PointerEventData) Use this callback to detect pointer enter events void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.IPointerExitHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerExitHandler.html",
    "title": "Interface IPointerExitHandler | Snapshot",
    "keywords": "Interface IPointerExitHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnPointerExit callbacks. public interface IPointerExitHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnPointerExit(PointerEventData) Use this callback to detect pointer exit events void OnPointerExit(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.IPointerMoveHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerMoveHandler.html",
    "title": "Interface IPointerMoveHandler | Snapshot",
    "keywords": "Interface IPointerMoveHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnPointerMove callbacks. public interface IPointerMoveHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnPointerMove(PointerEventData) Use this callback to detect pointer move events void OnPointerMove(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.IPointerUpHandler.html": {
    "href": "api/UnityEngine.EventSystems.IPointerUpHandler.html",
    "title": "Interface IPointerUpHandler | Snapshot",
    "keywords": "Interface IPointerUpHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnPointerUp callbacks. Note: In order to receive OnPointerUp callbacks, you must also implement the EventSystems.IPointerDownHandler|IPointerDownHandler interface public interface IPointerUpHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnPointerUp(PointerEventData) Use this callback to detect pointer up events. void OnPointerUp(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.IScrollHandler.html": {
    "href": "api/UnityEngine.EventSystems.IScrollHandler.html",
    "title": "Interface IScrollHandler | Snapshot",
    "keywords": "Interface IScrollHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnScroll callbacks. public interface IScrollHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnScroll(PointerEventData) Use this callback to detect scroll events. void OnScroll(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.EventSystems.ISelectHandler.html": {
    "href": "api/UnityEngine.EventSystems.ISelectHandler.html",
    "title": "Interface ISelectHandler | Snapshot",
    "keywords": "Interface ISelectHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnSelect callbacks. public interface ISelectHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnSelect(BaseEventData) void OnSelect(BaseEventData eventData) Parameters eventData BaseEventData"
  },
  "api/UnityEngine.EventSystems.ISubmitHandler.html": {
    "href": "api/UnityEngine.EventSystems.ISubmitHandler.html",
    "title": "Interface ISubmitHandler | Snapshot",
    "keywords": "Interface ISubmitHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnSubmit callbacks. public interface ISubmitHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnSubmit(BaseEventData) void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData"
  },
  "api/UnityEngine.EventSystems.IUpdateSelectedHandler.html": {
    "href": "api/UnityEngine.EventSystems.IUpdateSelectedHandler.html",
    "title": "Interface IUpdateSelectedHandler | Snapshot",
    "keywords": "Interface IUpdateSelectedHandler Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Interface to implement if you wish to receive OnUpdateSelected callbacks. public interface IUpdateSelectedHandler : IEventSystemHandler Remarks Criteria for this event is implementation dependent. For example see StandAloneInputModule. Methods OnUpdateSelected(BaseEventData) Called by the EventSystem when the object associated with this EventTrigger is updated. void OnUpdateSelected(BaseEventData eventData) Parameters eventData BaseEventData Examples using UnityEngine; using UnityEngine.EventSystems; public class UpdateSelectedExample : MonoBehaviour, IUpdateSelectedHandler { public void OnUpdateSelected(BaseEventData data) { Debug.Log(\"OnUpdateSelected called.\"); } }"
  },
  "api/UnityEngine.EventSystems.MoveDirection.html": {
    "href": "api/UnityEngine.EventSystems.MoveDirection.html",
    "title": "Enum MoveDirection | Snapshot",
    "keywords": "Enum MoveDirection Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll This is an 4 direction movement enum. public enum MoveDirection Fields Down = 3 The Down State of MoveDirection. Assign functionality for moving in a downward direction. Left = 0 This is the Left state of MoveDirection. Assign functionality for moving to the left. None = 4 This is the None state. Assign functionality that stops movement. Right = 2 This is the Right state of MoveDirection. Assign functionality for moving to the right. Up = 1 This is the Up state of MoveDirection. Assign functionality for moving in an upward direction. Examples //This is a full example of how a GameObject changes direction using MoveDirection states //Assign this script to a visible GameObject (with a Rigidbody attached) to see it in action using UnityEngine; using UnityEngine.EventSystems; public class Example : MonoBehaviour { Vector3 m_StartPosition, m_StartForce; Rigidbody m_Rigidbody; //Use Enum for easy switching between direction states MoveDirection m_MoveDirection; //Use these Vectors for moving Rigidbody components Vector3 m_ResetVector; Vector3 m_UpVector; Vector3 m_RightVector; const float speed = 5.0f; void Start() { //You get the Rigidbody component attached to the GameObject m_Rigidbody = GetComponent<Rigidbody>(); //This starts with the Rigidbody not moving in any direction at all m_MoveDirection = MoveDirection.None; //These are the GameObject’s starting position and Rigidbody position m_StartPosition = transform.position; m_StartForce = m_Rigidbody.transform.position; //This Vector is set to 1 in the y axis (for moving upwards) m_UpVector = Vector3.up; //This Vector is set to 1 in the x axis (for moving in the right direction) m_RightVector = Vector3.right; //This Vector is zeroed out for when the Rigidbody should not move m_ResetVector = Vector3.zero; } void Update() { //This switches the direction depending on button presses switch (m_MoveDirection) { //The starting state which resets the object case MoveDirection.None: //Reset to the starting position of the GameObject and Rigidbody transform.position = m_StartPosition; m_Rigidbody.transform.position = m_StartForce; //This resets the velocity of the Rigidbody m_Rigidbody.velocity = m_ResetVector; break; //This is for moving in an upwards direction case MoveDirection.Up: //Change the velocity so that the Rigidbody travels upwards m_Rigidbody.velocity = m_UpVector * speed; break; //This is for moving left case MoveDirection.Left: //This moves the Rigidbody to the left (minus right Vector) m_Rigidbody.velocity = -m_RightVector * speed; break; //This is for moving right case MoveDirection.Right: //This moves the Rigidbody to the right m_Rigidbody.velocity = m_RightVector * speed; break; //This is for moving down case MoveDirection.Down: //This moves the Rigidbody down m_Rigidbody.velocity = -m_UpVector * speed; break; } } void OnGUI() { //Press the reset Button to switch to no mode if (GUI.Button(new Rect(100, 0, 150, 30), \"Reset\")) { //Switch to start/reset case m_MoveDirection = MoveDirection.None; } //Press the Left button to switch the Rigidbody direction to the left if (GUI.Button(new Rect(100, 30, 150, 30), \"Move Left\")) { //Switch to the left direction m_MoveDirection = MoveDirection.Left; } //Press the Up button to switch the Rigidbody direction to upwards if (GUI.Button(new Rect(100, 60, 150, 30), \"Move Up\")) { //Switch to Up Direction m_MoveDirection = MoveDirection.Up; } //Press the Down button to switch the direction to down if (GUI.Button(new Rect(100, 90, 150, 30), \"Move Down\")) { //Switch to Down Direction m_MoveDirection = MoveDirection.Down; } //Press the right button to switch to the right direction if (GUI.Button(new Rect(100, 120, 150, 30), \"Move Right\")) { //Switch to Right Direction m_MoveDirection = MoveDirection.Right; } } } Remarks MoveDirection provides a way of switching between moving states. You must assign these states to actions, such as moving the GameObject by an up vector when in the Up state. Having states like these are easier to identify than always having to include a large amount of vectors and calculations.Instead, you define what you want the state to do in only one part, and switch to the appropriate state when it is needed."
  },
  "api/UnityEngine.EventSystems.Physics2DRaycaster.html": {
    "href": "api/UnityEngine.EventSystems.Physics2DRaycaster.html",
    "title": "Class Physics2DRaycaster | Snapshot",
    "keywords": "Class Physics2DRaycaster Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Simple event system using physics raycasts. [AddComponentMenu(\"Event/Physics 2D Raycaster\")] [RequireComponent(typeof(Camera))] public class Physics2DRaycaster : PhysicsRaycaster Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseRaycaster PhysicsRaycaster Physics2DRaycaster Inherited Members PhysicsRaycaster.kNoEventMaskSet PhysicsRaycaster.m_EventCamera PhysicsRaycaster.m_EventMask PhysicsRaycaster.m_MaxRayIntersections PhysicsRaycaster.m_LastMaxRayIntersections PhysicsRaycaster.eventCamera PhysicsRaycaster.depth PhysicsRaycaster.finalEventMask PhysicsRaycaster.eventMask PhysicsRaycaster.maxRayIntersections PhysicsRaycaster.ComputeRayAndDistance(PointerEventData, ref Ray, ref int, ref float) BaseRaycaster.priority BaseRaycaster.sortOrderPriority BaseRaycaster.renderOrderPriority BaseRaycaster.rootRaycaster BaseRaycaster.ToString() BaseRaycaster.OnEnable() BaseRaycaster.OnDisable() BaseRaycaster.OnCanvasHierarchyChanged() BaseRaycaster.OnTransformParentChanged() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Physics2DRaycaster() protected Physics2DRaycaster() Methods Raycast(PointerEventData, List<RaycastResult>) Raycast against 2D elements in the scene. public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters eventData PointerEventData resultAppendList List<RaycastResult>"
  },
  "api/UnityEngine.EventSystems.PhysicsRaycaster.html": {
    "href": "api/UnityEngine.EventSystems.PhysicsRaycaster.html",
    "title": "Class PhysicsRaycaster | Snapshot",
    "keywords": "Class PhysicsRaycaster Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Simple event system using physics raycasts. [AddComponentMenu(\"Event/Physics Raycaster\")] [RequireComponent(typeof(Camera))] public class PhysicsRaycaster : BaseRaycaster Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseRaycaster PhysicsRaycaster Derived Physics2DRaycaster Inherited Members BaseRaycaster.priority BaseRaycaster.sortOrderPriority BaseRaycaster.renderOrderPriority BaseRaycaster.rootRaycaster BaseRaycaster.ToString() BaseRaycaster.OnEnable() BaseRaycaster.OnDisable() BaseRaycaster.OnCanvasHierarchyChanged() BaseRaycaster.OnTransformParentChanged() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PhysicsRaycaster() protected PhysicsRaycaster() Fields kNoEventMaskSet Const to use for clarity when no event mask is set protected const int kNoEventMaskSet = -1 Field Value int m_EventCamera protected Camera m_EventCamera Field Value Camera m_EventMask Layer mask used to filter events. Always combined with the camera's culling mask if a camera is used. [SerializeField] protected LayerMask m_EventMask Field Value LayerMask m_LastMaxRayIntersections protected int m_LastMaxRayIntersections Field Value int m_MaxRayIntersections The max number of intersections allowed. 0 = allocating version anything else is non alloc. [SerializeField] protected int m_MaxRayIntersections Field Value int Properties depth Depth used to determine the order of event processing. public virtual int depth { get; } Property Value int eventCamera The camera that will generate rays for this raycaster. public override Camera eventCamera { get; } Property Value Camera eventMask Layer mask used to filter events. Always combined with the camera's culling mask if a camera is used. public LayerMask eventMask { get; set; } Property Value LayerMask finalEventMask Event mask used to determine which objects will receive events. public int finalEventMask { get; } Property Value int maxRayIntersections Max number of ray intersection allowed to be found. public int maxRayIntersections { get; set; } Property Value int Remarks A value of zero will represent using the allocating version of the raycast function where as any other value will use the non allocating version. Methods ComputeRayAndDistance(PointerEventData, ref Ray, ref int, ref float) Returns a ray going from camera through the event position and the distance between the near and far clipping planes along that ray. protected bool ComputeRayAndDistance(PointerEventData eventData, ref Ray ray, ref int eventDisplayIndex, ref float distanceToClipPlane) Parameters eventData PointerEventData The pointer event for which we will cast a ray. ray Ray The ray to use. eventDisplayIndex int The display index used. distanceToClipPlane float The distance between the near and far clipping planes along the ray. Returns bool True if the operation was successful. false if it was not possible to compute, such as the eventPosition being outside of the view. Raycast(PointerEventData, List<RaycastResult>) Raycast against the scene. public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters eventData PointerEventData Current event data. resultAppendList List<RaycastResult> List of hit Objects."
  },
  "api/UnityEngine.EventSystems.PointerEventData.FramePressState.html": {
    "href": "api/UnityEngine.EventSystems.PointerEventData.FramePressState.html",
    "title": "Enum PointerEventData.FramePressState | Snapshot",
    "keywords": "Enum PointerEventData.FramePressState Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll The state of a press for the given frame. public enum PointerEventData.FramePressState Fields NotChanged = 3 Same as last frame. Pressed = 0 Button was pressed this frame. PressedAndReleased = 2 Button was pressed and released this frame. Released = 1 Button was released this frame."
  },
  "api/UnityEngine.EventSystems.PointerEventData.InputButton.html": {
    "href": "api/UnityEngine.EventSystems.PointerEventData.InputButton.html",
    "title": "Enum PointerEventData.InputButton | Snapshot",
    "keywords": "Enum PointerEventData.InputButton Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Input press tracking. public enum PointerEventData.InputButton Fields Left = 0 Left button Middle = 2 Middle button Right = 1 Right button."
  },
  "api/UnityEngine.EventSystems.PointerEventData.html": {
    "href": "api/UnityEngine.EventSystems.PointerEventData.html",
    "title": "Class PointerEventData | Snapshot",
    "keywords": "Class PointerEventData Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Each touch event creates one of these containing all the relevant information. public class PointerEventData : BaseEventData Inheritance object AbstractEventData BaseEventData PointerEventData Inherited Members BaseEventData.currentInputModule BaseEventData.selectedObject AbstractEventData.m_Used AbstractEventData.Reset() AbstractEventData.Use() AbstractEventData.used object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PointerEventData(EventSystem) public PointerEventData(EventSystem eventSystem) Parameters eventSystem EventSystem See Also IPointerEvent Fields hovered public List<GameObject> hovered Field Value List<GameObject> Properties altitudeAngle The angle of the stylus relative to the surface, in radians public float altitudeAngle { get; set; } Property Value float Remarks A value of 0 indicates that the stylus is parallel to the surface. A value of pi/2 indicates that it is perpendicular to the surface. See Also IPointerEvent azimuthAngle The angle of the stylus relative to the x-axis, in radians. public float azimuthAngle { get; set; } Property Value float Remarks A value of 0 indicates that the stylus is pointed along the x-axis of the device. See Also IPointerEvent button The EventSystems.PointerEventData.InputButton for this event. public PointerEventData.InputButton button { get; set; } Property Value PointerEventData.InputButton clickCount Number of clicks in a row. public int clickCount { get; set; } Property Value int Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerDownHandler { public void OnPointerDown(PointerEventData eventData) { //Grab the number of consecutive clicks and assign it to an integer varible. int i = eventData.clickCount; //Display the click count. Debug.Log(i); } } clickTime The last time a click event was sent. Used for double click public float clickTime { get; set; } Property Value float delta Pointer delta since last update. public Vector2 delta { get; set; } Property Value Vector2 displayIndex The index of the display that this pointer event comes from. public int displayIndex { get; set; } Property Value int dragging Is a drag operation currently occuring. public bool dragging { get; set; } Property Value bool eligibleForClick Is it possible to click this frame public bool eligibleForClick { get; set; } Property Value bool enterEventCamera The camera associated with the last OnPointerEnter event. public Camera enterEventCamera { get; } Property Value Camera fullyExited Specifies in the case of a pointer exit if the pointer has fully exited the area or if it has just entered a child. public bool fullyExited { get; set; } Property Value bool lastPress The raw GameObject for the last press event. This means that it is the 'pressed' GameObject even if it can not receive the press event itself. public GameObject lastPress { get; } Property Value GameObject penStatus Specifies the state of the pen. For example, whether the pen is in contact with the screen or tablet, whether the pen is inverted, and whether buttons are pressed. public PenStatus penStatus { get; set; } Property Value PenStatus See Also IPointerEvent pointerClick The object that should receive the 'OnPointerClick' event. public GameObject pointerClick { get; set; } Property Value GameObject pointerCurrentRaycast RaycastResult associated with the current event. public RaycastResult pointerCurrentRaycast { get; set; } Property Value RaycastResult pointerDrag The object that is receiving 'OnDrag'. public GameObject pointerDrag { get; set; } Property Value GameObject pointerEnter The object that received 'OnPointerEnter'. public GameObject pointerEnter { get; set; } Property Value GameObject pointerId Id of the pointer (touch id). public int pointerId { get; set; } Property Value int pointerPress The GameObject that received the OnPointerDown. public GameObject pointerPress { get; set; } Property Value GameObject pointerPressRaycast RaycastResult associated with the pointer press. public RaycastResult pointerPressRaycast { get; set; } Property Value RaycastResult position Current pointer position. public Vector2 position { get; set; } Property Value Vector2 pressEventCamera The camera associated with the last OnPointerPress event. public Camera pressEventCamera { get; } Property Value Camera pressPosition Position of the press. public Vector2 pressPosition { get; set; } Property Value Vector2 pressure The amount of pressure currently applied by a touch. public float pressure { get; set; } Property Value float Remarks If the device does not report pressure, the value of this property is 1.0f. See Also IPointerEvent radius An estimate of the radius of a touch. public Vector2 radius { get; set; } Property Value Vector2 Remarks Add radiusVariance to get the maximum touch radius, subtract it to get the minimum touch radius. See Also IPointerEvent radiusVariance The accuracy of the touch radius. public Vector2 radiusVariance { get; set; } Property Value Vector2 Remarks Add this value to the radius to get the maximum touch radius, subtract it to get the minimum touch radius. rawPointerPress The object that the press happened on even if it can not handle the press event. public GameObject rawPointerPress { get; set; } Property Value GameObject reentered Specifies in the case of a pointer enter if the pointer has entered a new area or if it has just reentered a parent after leaving a child. public bool reentered { get; set; } Property Value bool scrollDelta The amount of scroll since the last update. public Vector2 scrollDelta { get; set; } Property Value Vector2 tangentialPressure The pressure applied to an additional pressure-sensitive control on the stylus. public float tangentialPressure { get; set; } Property Value float See Also IPointerEvent tilt public Vector2 tilt { get; set; } Property Value Vector2 twist The rotation of the stylus around its axis, in radians. public float twist { get; set; } Property Value float See Also IPointerEvent useDragThreshold Should a drag threshold be used? public bool useDragThreshold { get; set; } Property Value bool Remarks If you do not want a drag threshold set this to false in IInitializePotentialDragHandler.OnInitializePotentialDrag. worldNormal World-space normal where a ray cast into the screen hits something [Obsolete(\"Use either pointerCurrentRaycast.worldNormal or pointerPressRaycast.worldNormal\")] public Vector3 worldNormal { get; set; } Property Value Vector3 worldPosition World-space position where a ray cast into the screen hits something [Obsolete(\"Use either pointerCurrentRaycast.worldPosition or pointerPressRaycast.worldPosition\")] public Vector3 worldPosition { get; set; } Property Value Vector3 Methods IsPointerMoving() Is the pointer moving. public bool IsPointerMoving() Returns bool IsScrolling() Is scroll being used on the input device. public bool IsScrolling() Returns bool ToString() public override string ToString() Returns string"
  },
  "api/UnityEngine.EventSystems.PointerInputModule.ButtonState.html": {
    "href": "api/UnityEngine.EventSystems.PointerInputModule.ButtonState.html",
    "title": "Class PointerInputModule.ButtonState | Snapshot",
    "keywords": "Class PointerInputModule.ButtonState Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll protected class PointerInputModule.ButtonState Inheritance object PointerInputModule.ButtonState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties button public PointerEventData.InputButton button { get; set; } Property Value PointerEventData.InputButton eventData public PointerInputModule.MouseButtonEventData eventData { get; set; } Property Value PointerInputModule.MouseButtonEventData"
  },
  "api/UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.html": {
    "href": "api/UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData.html",
    "title": "Class PointerInputModule.MouseButtonEventData | Snapshot",
    "keywords": "Class PointerInputModule.MouseButtonEventData Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Information about a mouse button event. public class PointerInputModule.MouseButtonEventData Inheritance object PointerInputModule.MouseButtonEventData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields buttonData Pointer data associated with the mouse event. public PointerEventData buttonData Field Value PointerEventData buttonState The state of the button this frame. public PointerEventData.FramePressState buttonState Field Value PointerEventData.FramePressState Methods PressedThisFrame() Was the button pressed this frame? public bool PressedThisFrame() Returns bool ReleasedThisFrame() Was the button released this frame? public bool ReleasedThisFrame() Returns bool"
  },
  "api/UnityEngine.EventSystems.PointerInputModule.MouseState.html": {
    "href": "api/UnityEngine.EventSystems.PointerInputModule.MouseState.html",
    "title": "Class PointerInputModule.MouseState | Snapshot",
    "keywords": "Class PointerInputModule.MouseState Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll protected class PointerInputModule.MouseState Inheritance object PointerInputModule.MouseState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AnyPressesThisFrame() public bool AnyPressesThisFrame() Returns bool AnyReleasesThisFrame() public bool AnyReleasesThisFrame() Returns bool GetButtonState(InputButton) public PointerInputModule.ButtonState GetButtonState(PointerEventData.InputButton button) Parameters button PointerEventData.InputButton Returns PointerInputModule.ButtonState SetButtonState(InputButton, FramePressState, PointerEventData) public void SetButtonState(PointerEventData.InputButton button, PointerEventData.FramePressState stateForMouseButton, PointerEventData data) Parameters button PointerEventData.InputButton stateForMouseButton PointerEventData.FramePressState data PointerEventData"
  },
  "api/UnityEngine.EventSystems.PointerInputModule.html": {
    "href": "api/UnityEngine.EventSystems.PointerInputModule.html",
    "title": "Class PointerInputModule | Snapshot",
    "keywords": "Class PointerInputModule Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll A BaseInputModule for pointer input. public abstract class PointerInputModule : BaseInputModule Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseInputModule PointerInputModule Derived StandaloneInputModule TouchInputModule Inherited Members BaseInputModule.m_RaycastResultCache BaseInputModule.m_InputOverride BaseInputModule.input BaseInputModule.inputOverride BaseInputModule.eventSystem BaseInputModule.OnEnable() BaseInputModule.OnDisable() BaseInputModule.Process() BaseInputModule.FindFirstRaycast(List<RaycastResult>) BaseInputModule.DetermineMoveDirection(float, float) BaseInputModule.DetermineMoveDirection(float, float, float) BaseInputModule.FindCommonRoot(GameObject, GameObject) BaseInputModule.HandlePointerExitAndEnter(PointerEventData, GameObject) BaseInputModule.GetAxisEventData(float, float, float) BaseInputModule.GetBaseEventData() BaseInputModule.ShouldActivateModule() BaseInputModule.DeactivateModule() BaseInputModule.ActivateModule() BaseInputModule.UpdateModule() BaseInputModule.IsModuleSupported() BaseInputModule.ConvertUIToolkitPointerId(PointerEventData) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields kFakeTouchesId Touch id for when simulating touches on a non touch device. public const int kFakeTouchesId = -4 Field Value int kMouseLeftId Id of the cached left mouse pointer event. public const int kMouseLeftId = -1 Field Value int kMouseMiddleId Id of the cached middle mouse pointer event. public const int kMouseMiddleId = -3 Field Value int kMouseRightId Id of the cached right mouse pointer event. public const int kMouseRightId = -2 Field Value int m_PointerData protected Dictionary<int, PointerEventData> m_PointerData Field Value Dictionary<int, PointerEventData> Methods ClearSelection() Clear all pointers and deselect any selected objects in the EventSystem. protected void ClearSelection() CopyFromTo(PointerEventData, PointerEventData) Copy one PointerEventData to another. protected void CopyFromTo(PointerEventData from, PointerEventData to) Parameters from PointerEventData to PointerEventData DeselectIfSelectionChanged(GameObject, BaseEventData) Deselect the current selected GameObject if the currently pointed-at GameObject is different. protected void DeselectIfSelectionChanged(GameObject currentOverGo, BaseEventData pointerEvent) Parameters currentOverGo GameObject The GameObject the pointer is currently over. pointerEvent BaseEventData Current event data. GetLastPointerEventData(int) Return the last PointerEventData for the given touch / mouse id. protected PointerEventData GetLastPointerEventData(int id) Parameters id int Returns PointerEventData GetMousePointerEventData() Return the current MouseState. Using the default pointer. protected virtual PointerInputModule.MouseState GetMousePointerEventData() Returns PointerInputModule.MouseState GetMousePointerEventData(int) Return the current MouseState. protected virtual PointerInputModule.MouseState GetMousePointerEventData(int id) Parameters id int Returns PointerInputModule.MouseState GetPointerData(int, out PointerEventData, bool) Search the cache for currently active pointers, return true if found. protected bool GetPointerData(int id, out PointerEventData data, bool create) Parameters id int Touch ID data PointerEventData Found data create bool If not found should it be created Returns bool True if pointer is found. GetTouchPointerEventData(Touch, out bool, out bool) Given a touch populate the PointerEventData and return if we are pressed or released. protected PointerEventData GetTouchPointerEventData(Touch input, out bool pressed, out bool released) Parameters input Touch Touch being processed pressed bool Are we pressed this frame released bool Are we released this frame Returns PointerEventData IsPointerOverGameObject(int) If the module is pointer based, then override this to return true if the pointer is over an event system object. public override bool IsPointerOverGameObject(int pointerId) Parameters pointerId int Pointer ID Returns bool Is the given pointer over an event system object? ProcessDrag(PointerEventData) Process the drag for the current frame with the given pointer event. protected virtual void ProcessDrag(PointerEventData pointerEvent) Parameters pointerEvent PointerEventData ProcessMove(PointerEventData) Process movement for the current frame with the given pointer event. protected virtual void ProcessMove(PointerEventData pointerEvent) Parameters pointerEvent PointerEventData RemovePointerData(PointerEventData) Remove the PointerEventData from the cache. protected void RemovePointerData(PointerEventData data) Parameters data PointerEventData StateForMouseButton(int) Given a mouse button return the current state for the frame. protected PointerEventData.FramePressState StateForMouseButton(int buttonId) Parameters buttonId int Mouse button ID Returns PointerEventData.FramePressState ToString() Returns the name of the object. public override string ToString() Returns string The name returned by ToString."
  },
  "api/UnityEngine.EventSystems.RaycastResult.html": {
    "href": "api/UnityEngine.EventSystems.RaycastResult.html",
    "title": "Struct RaycastResult | Snapshot",
    "keywords": "Struct RaycastResult Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll A hit result from a BaseRaycaster. public struct RaycastResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields depth Used by raycasters where elements may have the same unit distance, but have specific ordering. public int depth Field Value int displayIndex The display index from which the raycast was generated. public int displayIndex Field Value int distance Distance to the hit. public float distance Field Value float index Hit index public float index Field Value float module BaseRaycaster that raised the hit. public BaseRaycaster module Field Value BaseRaycaster screenPosition The screen position from which the raycast was generated. public Vector2 screenPosition Field Value Vector2 sortingGroupID The sorting group ID when the hit object is influenced by a SortingGroup. public int sortingGroupID Field Value int Remarks For UI.Graphic elements will always be 0. For 3D objects this will always be 0. For 2D objects if a SortingOrder is influencing the same object as the hit collider then the renderers sortingGroupID will be used; otherwise SortingGroup.invalidSortingGroupID. sortingGroupOrder The sorting group order when the hit object is influenced by a SortingGroup. public int sortingGroupOrder Field Value int Remarks For UI.Graphic elements this will always be 0. For 3D objects this will always be 0. For 2D objects if a SortingOrder is influencing the same object as the hit collider then the renderers sortingGroupOrder will be used. sortingLayer The SortingLayer of the hit object. public int sortingLayer Field Value int Remarks For UI.Graphic elements this will be the values from that graphic's Canvas For 3D objects this will always be 0. For 2D objects if a 2D Renderer (Sprite, Tilemap, SpriteShape) is attached to the same object as the hit collider that sortingLayerID will be used. sortingOrder The SortingOrder for the hit object. public int sortingOrder Field Value int Remarks For Graphic elements this will be the values from that graphics Canvas For 3D objects this will always be 0. For 2D objects if a 2D Renderer (Sprite, Tilemap, SpriteShape) is attached to the same object as the hit collider that sortingOrder will be used. worldNormal The normal at the hit location of the raycast. public Vector3 worldNormal Field Value Vector3 worldPosition The world position of the where the raycast has hit. public Vector3 worldPosition Field Value Vector3 Properties gameObject The GameObject that was hit by the raycast. public GameObject gameObject { get; set; } Property Value GameObject isValid Is there an associated module and a hit GameObject. public bool isValid { get; } Property Value bool Methods Clear() Reset the result. public void Clear() ToString() public override string ToString() Returns string"
  },
  "api/UnityEngine.EventSystems.RaycasterManager.html": {
    "href": "api/UnityEngine.EventSystems.RaycasterManager.html",
    "title": "Class RaycasterManager | Snapshot",
    "keywords": "Class RaycasterManager Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll public static class RaycasterManager Inheritance object RaycasterManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetRaycasters() List of BaseRaycasters that has been registered. public static List<BaseRaycaster> GetRaycasters() Returns List<BaseRaycaster>"
  },
  "api/UnityEngine.EventSystems.StandaloneInputModule.InputMode.html": {
    "href": "api/UnityEngine.EventSystems.StandaloneInputModule.InputMode.html",
    "title": "Enum StandaloneInputModule.InputMode | Snapshot",
    "keywords": "Enum StandaloneInputModule.InputMode Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll [Obsolete(\"Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously.\", false)] public enum StandaloneInputModule.InputMode Fields Buttons = 1 Mouse = 0"
  },
  "api/UnityEngine.EventSystems.StandaloneInputModule.html": {
    "href": "api/UnityEngine.EventSystems.StandaloneInputModule.html",
    "title": "Class StandaloneInputModule | Snapshot",
    "keywords": "Class StandaloneInputModule Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll [AddComponentMenu(\"Event/Standalone Input Module\")] public class StandaloneInputModule : PointerInputModule Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseInputModule PointerInputModule StandaloneInputModule Inherited Members PointerInputModule.kMouseLeftId PointerInputModule.kMouseRightId PointerInputModule.kMouseMiddleId PointerInputModule.kFakeTouchesId PointerInputModule.m_PointerData PointerInputModule.GetPointerData(int, out PointerEventData, bool) PointerInputModule.RemovePointerData(PointerEventData) PointerInputModule.GetTouchPointerEventData(Touch, out bool, out bool) PointerInputModule.CopyFromTo(PointerEventData, PointerEventData) PointerInputModule.StateForMouseButton(int) PointerInputModule.GetMousePointerEventData() PointerInputModule.GetMousePointerEventData(int) PointerInputModule.GetLastPointerEventData(int) PointerInputModule.ProcessMove(PointerEventData) PointerInputModule.ProcessDrag(PointerEventData) PointerInputModule.IsPointerOverGameObject(int) PointerInputModule.ClearSelection() PointerInputModule.ToString() PointerInputModule.DeselectIfSelectionChanged(GameObject, BaseEventData) BaseInputModule.m_RaycastResultCache BaseInputModule.m_InputOverride BaseInputModule.input BaseInputModule.inputOverride BaseInputModule.eventSystem BaseInputModule.OnEnable() BaseInputModule.OnDisable() BaseInputModule.FindFirstRaycast(List<RaycastResult>) BaseInputModule.DetermineMoveDirection(float, float) BaseInputModule.DetermineMoveDirection(float, float, float) BaseInputModule.FindCommonRoot(GameObject, GameObject) BaseInputModule.HandlePointerExitAndEnter(PointerEventData, GameObject) BaseInputModule.GetAxisEventData(float, float, float) BaseInputModule.GetBaseEventData() BaseInputModule.IsModuleSupported() BaseInputModule.ConvertUIToolkitPointerId(PointerEventData) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StandaloneInputModule() protected StandaloneInputModule() Properties allowActivationOnMobileDevice [Obsolete(\"allowActivationOnMobileDevice has been deprecated. Use forceModuleActive instead (UnityUpgradable) -> forceModuleActive\")] public bool allowActivationOnMobileDevice { get; set; } Property Value bool cancelButton Input manager name for the 'cancel' button. public string cancelButton { get; set; } Property Value string forceModuleActive Force this module to be active. [Obsolete(\"forceModuleActive has been deprecated. There is no need to force the module awake as StandaloneInputModule works for all platforms\")] public bool forceModuleActive { get; set; } Property Value bool Remarks If there is no module active with higher priority (ordered in the inspector) this module will be forced active even if valid enabling conditions are not met. horizontalAxis Name of the horizontal axis for movement (if axis events are used). public string horizontalAxis { get; set; } Property Value string inputActionsPerSecond Number of keyboard / controller inputs allowed per second. public float inputActionsPerSecond { get; set; } Property Value float inputMode [Obsolete(\"Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously.\", false)] public StandaloneInputModule.InputMode inputMode { get; } Property Value StandaloneInputModule.InputMode repeatDelay Delay in seconds before the input actions per second repeat rate takes effect. public float repeatDelay { get; set; } Property Value float Remarks If the same direction is sustained, the inputActionsPerSecond property can be used to control the rate at which events are fired. However, it can be desirable that the first repetition is delayed, so the user doesn't get repeated actions by accident. submitButton Maximum number of input events handled per second. public string submitButton { get; set; } Property Value string verticalAxis Name of the vertical axis for movement (if axis events are used). public string verticalAxis { get; set; } Property Value string Methods ActivateModule() See BaseInputModule. public override void ActivateModule() DeactivateModule() See BaseInputModule. public override void DeactivateModule() ForceAutoSelect() [Obsolete(\"This method is no longer checked, overriding it with return true does nothing!\")] protected virtual bool ForceAutoSelect() Returns bool GetCurrentFocusedGameObject() protected GameObject GetCurrentFocusedGameObject() Returns GameObject Process() Process the current tick for the module. public override void Process() ProcessMouseEvent() protected void ProcessMouseEvent() ProcessMouseEvent(int) Process all mouse events. protected void ProcessMouseEvent(int id) Parameters id int ProcessMousePress(MouseButtonEventData) Calculate and process any mouse button state changes. protected void ProcessMousePress(PointerInputModule.MouseButtonEventData data) Parameters data PointerInputModule.MouseButtonEventData ProcessTouchPress(PointerEventData, bool, bool) This method is called by Unity whenever a touch event is processed. Override this method with a custom implementation to process touch events yourself. protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released) Parameters pointerEvent PointerEventData Event data relating to the touch event, such as position and ID to be passed to the touch event destination object. pressed bool This is true for the first frame of a touch event, and false thereafter. This can therefore be used to determine the instant a touch event occurred. released bool This is true only for the last frame of a touch event. Remarks This method can be overridden in derived classes to change how touch press events are handled. SendMoveEventToSelectedObject() Calculate and send a move event to the current selected object. protected bool SendMoveEventToSelectedObject() Returns bool If the move event was used by the selected object. SendSubmitEventToSelectedObject() Calculate and send a submit event to the current selected object. protected bool SendSubmitEventToSelectedObject() Returns bool If the submit event was used by the selected object. SendUpdateEventToSelectedObject() protected bool SendUpdateEventToSelectedObject() Returns bool ShouldActivateModule() Should the module be activated. public override bool ShouldActivateModule() Returns bool UpdateModule() Update the internal state of the Module. public override void UpdateModule()"
  },
  "api/UnityEngine.EventSystems.TouchInputModule.html": {
    "href": "api/UnityEngine.EventSystems.TouchInputModule.html",
    "title": "Class TouchInputModule | Snapshot",
    "keywords": "Class TouchInputModule Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll [Obsolete(\"TouchInputModule is no longer required as Touch input is now handled in StandaloneInputModule.\")] [AddComponentMenu(\"Event/Touch Input Module\")] public class TouchInputModule : PointerInputModule Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseInputModule PointerInputModule TouchInputModule Inherited Members PointerInputModule.kMouseLeftId PointerInputModule.kMouseRightId PointerInputModule.kMouseMiddleId PointerInputModule.kFakeTouchesId PointerInputModule.m_PointerData PointerInputModule.GetPointerData(int, out PointerEventData, bool) PointerInputModule.RemovePointerData(PointerEventData) PointerInputModule.GetTouchPointerEventData(Touch, out bool, out bool) PointerInputModule.CopyFromTo(PointerEventData, PointerEventData) PointerInputModule.StateForMouseButton(int) PointerInputModule.GetMousePointerEventData() PointerInputModule.GetMousePointerEventData(int) PointerInputModule.GetLastPointerEventData(int) PointerInputModule.ProcessMove(PointerEventData) PointerInputModule.ProcessDrag(PointerEventData) PointerInputModule.IsPointerOverGameObject(int) PointerInputModule.ClearSelection() PointerInputModule.DeselectIfSelectionChanged(GameObject, BaseEventData) BaseInputModule.m_RaycastResultCache BaseInputModule.m_InputOverride BaseInputModule.input BaseInputModule.inputOverride BaseInputModule.eventSystem BaseInputModule.OnEnable() BaseInputModule.OnDisable() BaseInputModule.FindFirstRaycast(List<RaycastResult>) BaseInputModule.DetermineMoveDirection(float, float) BaseInputModule.DetermineMoveDirection(float, float, float) BaseInputModule.FindCommonRoot(GameObject, GameObject) BaseInputModule.HandlePointerExitAndEnter(PointerEventData, GameObject) BaseInputModule.GetAxisEventData(float, float, float) BaseInputModule.GetBaseEventData() BaseInputModule.ActivateModule() BaseInputModule.ConvertUIToolkitPointerId(PointerEventData) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TouchInputModule() protected TouchInputModule() Properties allowActivationOnStandalone [Obsolete(\"allowActivationOnStandalone has been deprecated. Use forceModuleActive instead (UnityUpgradable) -> forceModuleActive\")] public bool allowActivationOnStandalone { get; set; } Property Value bool forceModuleActive public bool forceModuleActive { get; set; } Property Value bool Methods DeactivateModule() Called when the module is deactivated. Override this if you want custom code to execute when you deactivate your module. public override void DeactivateModule() IsModuleSupported() Check to see if the module is supported. Override this if you have a platform specific module (eg. TouchInputModule that you do not want to activate on standalone.) public override bool IsModuleSupported() Returns bool Is the module supported. Process() Process the current tick for the module. public override void Process() ProcessTouchPress(PointerEventData, bool, bool) protected void ProcessTouchPress(PointerEventData pointerEvent, bool pressed, bool released) Parameters pointerEvent PointerEventData pressed bool released bool ShouldActivateModule() Should the module be activated. public override bool ShouldActivateModule() Returns bool ToString() Returns the name of the object. public override string ToString() Returns string The name returned by ToString. UpdateModule() Update the internal state of the Module. public override void UpdateModule()"
  },
  "api/UnityEngine.EventSystems.UIBehaviour.html": {
    "href": "api/UnityEngine.EventSystems.UIBehaviour.html",
    "title": "Class UIBehaviour | Snapshot",
    "keywords": "Class UIBehaviour Namespace UnityEngine.EventSystems Assembly UnityEngine.UI.dll Base behaviour that has protected implementations of Unity lifecycle functions. public abstract class UIBehaviour : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Derived BaseInput BaseInputModule BaseRaycaster EventSystem AspectRatioFitter BaseMeshEffect CanvasScaler ContentSizeFitter Graphic LayoutElement LayoutGroup Mask RectMask2D ScrollRect Selectable ToggleGroup Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Awake() protected virtual void Awake() IsActive() Returns true if the GameObject and the Component are active. public virtual bool IsActive() Returns bool IsDestroyed() Returns true if the native representation of the behaviour has been destroyed. public bool IsDestroyed() Returns bool Remarks When a parent canvas is either enabled, disabled or a nested canvas's OverrideSorting is changed this function is called. You can for example use this to modify objects below a canvas that may depend on a parent canvas - for example, if a canvas is disabled you may want to halt some processing of a UI element. OnBeforeTransformParentChanged() protected virtual void OnBeforeTransformParentChanged() OnCanvasGroupChanged() protected virtual void OnCanvasGroupChanged() OnCanvasHierarchyChanged() Called when the state of the parent Canvas is changed. protected virtual void OnCanvasHierarchyChanged() OnDestroy() protected virtual void OnDestroy() OnDidApplyAnimationProperties() protected virtual void OnDidApplyAnimationProperties() OnDisable() protected virtual void OnDisable() OnEnable() protected virtual void OnEnable() OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). protected virtual void OnRectTransformDimensionsChange() OnTransformParentChanged() protected virtual void OnTransformParentChanged() Start() protected virtual void Start()"
  },
  "api/UnityEngine.EventSystems.html": {
    "href": "api/UnityEngine.EventSystems.html",
    "title": "Namespace UnityEngine.EventSystems | Snapshot",
    "keywords": "Namespace UnityEngine.EventSystems Classes AbstractEventData A class that can be used for sending simple events via the event system. AxisEventData Event Data associated with Axis Events (Controller / Keyboard). BaseEventData A class that contains the base event data that is common to all event types in the new EventSystem. BaseInput Interface to the Input system used by the BaseInputModule. With this it is possible to bypass the Input system with your own but still use the same InputModule. For example this can be used to feed fake input into the UI or interface with a different input system. BaseInputModule BaseRaycaster Base class for any RayCaster. EventSystem EventTrigger EventTrigger.Entry EventTrigger.TriggerEvent ExecuteEvents Physics2DRaycaster Simple event system using physics raycasts. PhysicsRaycaster Simple event system using physics raycasts. PointerEventData Each touch event creates one of these containing all the relevant information. PointerInputModule A BaseInputModule for pointer input. PointerInputModule.ButtonState PointerInputModule.MouseButtonEventData Information about a mouse button event. PointerInputModule.MouseState RaycasterManager StandaloneInputModule TouchInputModule UIBehaviour Base behaviour that has protected implementations of Unity lifecycle functions. Structs RaycastResult A hit result from a BaseRaycaster. Interfaces IBeginDragHandler Interface to implement if you wish to receive OnBeginDrag callbacks. Note: You need to implement IDragHandler in addition to IBeginDragHandler. ICancelHandler Interface to implement if you wish to receive OnCancel callbacks. IDeselectHandler Interface to implement if you wish to receive OnDeselect callbacks. IDragHandler Interface to implement if you wish to receive OnDrag callbacks. IDropHandler Interface to implement if you wish to receive OnDrop callbacks. IEndDragHandler Interface to implement if you wish to receive OnEndDrag callbacks. Note: You need to implement IDragHandler in addition to IEndDragHandler. IEventSystemHandler Base class that all EventSystem events inherit from. IInitializePotentialDragHandler Interface to implement if you wish to receive OnInitializePotentialDrag callbacks. IMoveHandler Interface to implement if you wish to receive OnMove callbacks. IPointerClickHandler Interface to implement if you wish to receive OnPointerClick callbacks. IPointerDownHandler Interface to implement if you wish to receive OnPointerDown callbacks. IPointerEnterHandler Interface to implement if you wish to receive OnPointerEnter callbacks. IPointerExitHandler Interface to implement if you wish to receive OnPointerExit callbacks. IPointerMoveHandler Interface to implement if you wish to receive OnPointerMove callbacks. IPointerUpHandler Interface to implement if you wish to receive OnPointerUp callbacks. Note: In order to receive OnPointerUp callbacks, you must also implement the EventSystems.IPointerDownHandler|IPointerDownHandler interface IScrollHandler Interface to implement if you wish to receive OnScroll callbacks. ISelectHandler Interface to implement if you wish to receive OnSelect callbacks. ISubmitHandler Interface to implement if you wish to receive OnSubmit callbacks. IUpdateSelectedHandler Interface to implement if you wish to receive OnUpdateSelected callbacks. Enums EventHandle EventTriggerType This class is capable of triggering one or more remote functions from a specified event. Usage: Attach it to an object with a collider, or to a GUI Graphic of your choice. NOTE: Doing this will make this object intercept ALL events, and no event bubbling will occur from this object! MoveDirection This is an 4 direction movement enum. PointerEventData.FramePressState The state of a press for the given frame. PointerEventData.InputButton Input press tracking. StandaloneInputModule.InputMode Delegates ExecuteEvents.EventFunction<T1>"
  },
  "api/UnityEngine.UI.AnimationTriggers.html": {
    "href": "api/UnityEngine.UI.AnimationTriggers.html",
    "title": "Class AnimationTriggers | Snapshot",
    "keywords": "Class AnimationTriggers Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Structure that stores the state of an animation transition on a Selectable. [Serializable] public class AnimationTriggers Inheritance object AnimationTriggers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties disabledTrigger Trigger to send to animator when entering disabled state. public string disabledTrigger { get; set; } Property Value string Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Animator buttonAnimator; public Button button; void SomeFunction() { //Sets the button to the Disabled state (Useful when making tutorials). buttonAnimator.SetTrigger(button.animationTriggers.disabledTrigger); } } highlightedTrigger Trigger to send to animator when entering highlighted state. public string highlightedTrigger { get; set; } Property Value string Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Animator buttonAnimator; public Button button; void SomeFunction() { //Sets the button to the Highlighted state (Useful when making tutorials). buttonAnimator.SetTrigger(button.animationTriggers.highlightedTrigger); } } normalTrigger Trigger to send to animator when entering normal state. public string normalTrigger { get; set; } Property Value string Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Animator buttonAnimator; public Button button; void SomeFunction() { //Sets the button to the Normal state (Useful when making tutorials). buttonAnimator.SetTrigger(button.animationTriggers.normalTrigger); } } pressedTrigger Trigger to send to animator when entering pressed state. public string pressedTrigger { get; set; } Property Value string Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Animator buttonAnimator; public Button button; void SomeFunction() { //Sets the button to the Pressed state (Useful when making tutorials). buttonAnimator.SetTrigger(button.animationTriggers.pressedTrigger); } } selectedTrigger Trigger to send to animator when entering selected state. public string selectedTrigger { get; set; } Property Value string Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Animator buttonAnimator; public Button button; void SomeFunction() { //Sets the button to the Selected state (Useful when making tutorials). buttonAnimator.SetTrigger(button.animationTriggers.selectedTrigger); } }"
  },
  "api/UnityEngine.UI.AspectRatioFitter.AspectMode.html": {
    "href": "api/UnityEngine.UI.AspectRatioFitter.AspectMode.html",
    "title": "Enum AspectRatioFitter.AspectMode | Snapshot",
    "keywords": "Enum AspectRatioFitter.AspectMode Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Specifies a mode to use to enforce an aspect ratio. public enum AspectRatioFitter.AspectMode Fields EnvelopeParent = 4 Sizes the rectangle such that the parent rectangle is fully contained within. FitInParent = 3 Sizes the rectangle such that it's fully contained within the parent rectangle. HeightControlsWidth = 2 Changes the width of the rectangle to match the aspect ratio. None = 0 The aspect ratio is not enforced WidthControlsHeight = 1 Changes the height of the rectangle to match the aspect ratio."
  },
  "api/UnityEngine.UI.AspectRatioFitter.html": {
    "href": "api/UnityEngine.UI.AspectRatioFitter.html",
    "title": "Class AspectRatioFitter | Snapshot",
    "keywords": "Class AspectRatioFitter Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"Layout/Aspect Ratio Fitter\", 142)] [ExecuteAlways] [RequireComponent(typeof(RectTransform))] [DisallowMultipleComponent] public class AspectRatioFitter : UIBehaviour, ILayoutSelfController, ILayoutController Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour AspectRatioFitter Implements ILayoutSelfController ILayoutController Inherited Members UIBehaviour.Awake() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AspectRatioFitter() protected AspectRatioFitter() Properties aspectMode The mode to use to enforce the aspect ratio. public AspectRatioFitter.AspectMode aspectMode { get; set; } Property Value AspectRatioFitter.AspectMode aspectRatio The aspect ratio to enforce. This means width divided by height. public float aspectRatio { get; set; } Property Value float Methods IsAspectModeValid() public bool IsAspectModeValid() Returns bool IsComponentValidOnObject() public bool IsComponentValidOnObject() Returns bool OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnRectTransformDimensionsChange() Function called when this RectTransform or parent RectTransform has changed dimensions. protected override void OnRectTransformDimensionsChange() OnTransformParentChanged() protected override void OnTransformParentChanged() SetDirty() Mark the AspectRatioFitter as dirty. protected void SetDirty() SetLayoutHorizontal() Method called by the layout system. Has no effect public virtual void SetLayoutHorizontal() SetLayoutVertical() Method called by the layout system. Has no effect public virtual void SetLayoutVertical() Start() protected override void Start() Update() Update the rect based on the delayed dirty. Got around issue of calling onValidate from OnEnable function. protected virtual void Update()"
  },
  "api/UnityEngine.UI.BaseMeshEffect.html": {
    "href": "api/UnityEngine.UI.BaseMeshEffect.html",
    "title": "Class BaseMeshEffect | Snapshot",
    "keywords": "Class BaseMeshEffect Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Base class for effects that modify the generated Mesh. [ExecuteAlways] public abstract class BaseMeshEffect : UIBehaviour, IMeshModifier Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseMeshEffect Implements IMeshModifier Derived PositionAsUV1 Shadow Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Examples using UnityEngine; using UnityEngine.UI; public class PositionAsUV1 : BaseMeshEffect { protected PositionAsUV1() {} public override void ModifyMesh(Mesh mesh) { if (!IsActive()) return; var verts = mesh.vertices.ToList(); var uvs = ListPool<Vector2>.Get(); for (int i = 0; i < verts.Count; i++) { var vert = verts[i]; uvs.Add(new Vector2(verts[i].x, verts[i].y)); verts[i] = vert; } mesh.SetUVs(1, uvs); ListPool<Vector2>.Release(uvs); } } Properties graphic The graphic component that the Mesh Effect will aplly to. protected Graphic graphic { get; } Property Value Graphic Methods ModifyMesh(Mesh) Function that is called when the Graphic is populating the mesh. public virtual void ModifyMesh(Mesh mesh) Parameters mesh Mesh The generated mesh of the Graphic element that needs modification. ModifyMesh(VertexHelper) Call used to modify mesh. Place any custom mesh processing in this function. public abstract void ModifyMesh(VertexHelper vh) Parameters vh VertexHelper OnDidApplyAnimationProperties() Called from the native side any time a animation property is changed. protected override void OnDidApplyAnimationProperties() OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable()"
  },
  "api/UnityEngine.UI.BaseVertexEffect.html": {
    "href": "api/UnityEngine.UI.BaseVertexEffect.html",
    "title": "Class BaseVertexEffect | Snapshot",
    "keywords": "Class BaseVertexEffect Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Obsolete(\"Use BaseMeshEffect instead\", true)] public abstract class BaseVertexEffect Inheritance object BaseVertexEffect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/UnityEngine.UI.Button.ButtonClickedEvent.html": {
    "href": "api/UnityEngine.UI.Button.ButtonClickedEvent.html",
    "title": "Class Button.ButtonClickedEvent | Snapshot",
    "keywords": "Class Button.ButtonClickedEvent Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class Button.ButtonClickedEvent : UnityEvent, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent Button.ButtonClickedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent.AddListener(UnityAction) UnityEvent.RemoveListener(UnityAction) UnityEvent.FindMethod_Impl(string, Type) UnityEvent.Invoke() UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.UI.Button.html": {
    "href": "api/UnityEngine.UI.Button.html",
    "title": "Class Button | Snapshot",
    "keywords": "Class Button Namespace UnityEngine.UI Assembly UnityEngine.UI.dll A standard button that sends an event when clicked. [AddComponentMenu(\"UI/Button\", 30)] public class Button : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IPointerClickHandler, ISubmitHandler, IEventSystemHandler Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable Button Implements IMoveHandler IPointerDownHandler IPointerUpHandler IPointerEnterHandler IPointerExitHandler ISelectHandler IDeselectHandler IPointerClickHandler ISubmitHandler IEventSystemHandler Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.Awake() Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnDidApplyAnimationProperties() Selectable.OnEnable() Selectable.OnTransformParentChanged() Selectable.OnDisable() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, bool) Selectable.FindSelectable(Vector3) Selectable.FindSelectableOnLeft() Selectable.FindSelectableOnRight() Selectable.FindSelectableOnUp() Selectable.FindSelectableOnDown() Selectable.OnMove(AxisEventData) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerDown(PointerEventData) Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Button() protected Button() Properties onClick UnityEvent that is triggered when the button is pressed. Note: Triggered on MouseUp after MouseDown on the same object. public Button.ButtonClickedEvent onClick { get; set; } Property Value Button.ButtonClickedEvent Examples using UnityEngine; using UnityEngine.UI; using System.Collections; public class ClickExample : MonoBehaviour { public Button yourButton; void Start() { Button btn = yourButton.GetComponent<Button>(); btn.onClick.AddListener(TaskOnClick); } void TaskOnClick() { Debug.Log(\"You have clicked the button!\"); } } Methods OnPointerClick(PointerEventData) Call all registered IPointerClickHandlers. Register button presses using the IPointerClickHandler. You can also use it to tell what type of click happened (left, right etc.). Make sure your Scene has an EventSystem. public virtual void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData Pointer Data associated with the event. Typically by the event system. Examples //Attatch this script to a Button GameObject using UnityEngine; using UnityEngine.EventSystems; public class Example : MonoBehaviour, IPointerClickHandler { //Detect if a click occurs public void OnPointerClick(PointerEventData pointerEventData) { //Use this to tell when the user right-clicks on the Button if (pointerEventData.button == PointerEventData.InputButton.Right) { //Output to console the clicked GameObject's name and the following message. You can replace this with your own actions for when clicking the GameObject. Debug.Log(name + \" Game Object Right Clicked!\"); } //Use this to tell when the user left-clicks on the Button if (pointerEventData.button == PointerEventData.InputButton.Left) { Debug.Log(name + \" Game Object Left Clicked!\"); } } } OnSubmit(BaseEventData) Call all registered ISubmitHandler. public virtual void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData Associated data with the event. Typically by the event system. Remarks This detects when a Button has been selected via a \"submit\" key you specify (default is the return key). To change the submit key, either: Go to Edit->Project Settings->Input. Next, expand the Axes section and go to the Submit section if it exists. If Submit doesn’t exist, add 1 number to the Size field. This creates a new section at the bottom. Expand the new section and change the Name field to “Submit”. Change the Positive Button field to the key you want (e.g. space). Or: Go to your EventSystem in your Project Go to the Inspector window and change the Submit Button field to one of the sections in the Input Manager (e.g. \"Submit\"), or create your own by naming it what you like, then following the next few steps. Go to Edit->Project Settings->Input to get to the Input Manager. Expand the Axes section in the Inspector window. Add 1 to the number in the Size field. This creates a new section at the bottom. Expand the new section and name it the same as the name you inserted in the Submit Button field in the EventSystem. Set the Positive Button field to the key you want (e.g. space)"
  },
  "api/UnityEngine.UI.CanvasScaler.ScaleMode.html": {
    "href": "api/UnityEngine.UI.CanvasScaler.ScaleMode.html",
    "title": "Enum CanvasScaler.ScaleMode | Snapshot",
    "keywords": "Enum CanvasScaler.ScaleMode Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Determines how UI elements in the Canvas are scaled. public enum CanvasScaler.ScaleMode Fields ConstantPhysicalSize = 2 Using the Constant Physical Size mode, positions and sizes of UI elements are specified in physical units, such as millimeters, points, or picas. ConstantPixelSize = 0 Using the Constant Pixel Size mode, positions and sizes of UI elements are specified in pixels on the screen. ScaleWithScreenSize = 1 Using the Scale With Screen Size mode, positions and sizes can be specified according to the pixels of a specified reference resolution. If the current screen resolution is larger than the reference resolution, the Canvas will keep having only the resolution of the reference resolution, but will scale up in order to fit the screen. If the current screen resolution is smaller than the reference resolution, the Canvas will similarly be scaled down to fit."
  },
  "api/UnityEngine.UI.CanvasScaler.ScreenMatchMode.html": {
    "href": "api/UnityEngine.UI.CanvasScaler.ScreenMatchMode.html",
    "title": "Enum CanvasScaler.ScreenMatchMode | Snapshot",
    "keywords": "Enum CanvasScaler.ScreenMatchMode Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Scale the canvas area with the width as reference, the height as reference, or something in between. public enum CanvasScaler.ScreenMatchMode Fields Expand = 1 Expand the canvas area either horizontally or vertically, so the size of the canvas will never be smaller than the reference. MatchWidthOrHeight = 0 Scale the canvas area with the width as reference, the height as reference, or something in between. Shrink = 2 Crop the canvas area either horizontally or vertically, so the size of the canvas will never be larger than the reference."
  },
  "api/UnityEngine.UI.CanvasScaler.Unit.html": {
    "href": "api/UnityEngine.UI.CanvasScaler.Unit.html",
    "title": "Enum CanvasScaler.Unit | Snapshot",
    "keywords": "Enum CanvasScaler.Unit Namespace UnityEngine.UI Assembly UnityEngine.UI.dll The possible physical unit types public enum CanvasScaler.Unit Fields Centimeters = 0 Use centimeters. A centimeter is 1/100 of a meter Inches = 2 Use inches. Millimeters = 1 Use millimeters. A millimeter is 1/10 of a centimeter, and 1/1000 of a meter. Picas = 4 Use picas. One pica is 1/6 of an inch. Points = 3 Use points. One point is 1/12 of a pica, and 1/72 of an inch."
  },
  "api/UnityEngine.UI.CanvasScaler.html": {
    "href": "api/UnityEngine.UI.CanvasScaler.html",
    "title": "Class CanvasScaler | Snapshot",
    "keywords": "Class CanvasScaler Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [RequireComponent(typeof(Canvas))] [ExecuteAlways] [AddComponentMenu(\"Layout/Canvas Scaler\", 101)] [DisallowMultipleComponent] public class CanvasScaler : UIBehaviour Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour CanvasScaler Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CanvasScaler() protected CanvasScaler() Fields m_DefaultSpriteDPI [Tooltip(\"The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting.\")] [SerializeField] protected float m_DefaultSpriteDPI Field Value float m_DynamicPixelsPerUnit [Tooltip(\"The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text.\")] [SerializeField] protected float m_DynamicPixelsPerUnit Field Value float m_FallbackScreenDPI [Tooltip(\"The DPI to assume if the screen DPI is not known.\")] [SerializeField] protected float m_FallbackScreenDPI Field Value float m_MatchWidthOrHeight [Tooltip(\"Determines if the scaling is using the width or height as reference, or a mix in between.\")] [Range(0, 1)] [SerializeField] protected float m_MatchWidthOrHeight Field Value float m_PhysicalUnit [Tooltip(\"The physical unit to specify positions and sizes in.\")] [SerializeField] protected CanvasScaler.Unit m_PhysicalUnit Field Value CanvasScaler.Unit m_PresetInfoIsWorld [SerializeField] protected bool m_PresetInfoIsWorld Field Value bool m_ReferencePixelsPerUnit [Tooltip(\"If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI.\")] [SerializeField] protected float m_ReferencePixelsPerUnit Field Value float m_ReferenceResolution [Tooltip(\"The resolution the UI layout is designed for. If the screen resolution is larger, the UI will be scaled up, and if it's smaller, the UI will be scaled down. This is done in accordance with the Screen Match Mode.\")] [SerializeField] protected Vector2 m_ReferenceResolution Field Value Vector2 m_ScaleFactor [Tooltip(\"Scales all UI elements in the Canvas by this factor.\")] [SerializeField] protected float m_ScaleFactor Field Value float m_ScreenMatchMode [Tooltip(\"A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution.\")] [SerializeField] protected CanvasScaler.ScreenMatchMode m_ScreenMatchMode Field Value CanvasScaler.ScreenMatchMode Properties defaultSpriteDPI The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting. public float defaultSpriteDPI { get; set; } Property Value float dynamicPixelsPerUnit The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text. public float dynamicPixelsPerUnit { get; set; } Property Value float fallbackScreenDPI The DPI to assume if the screen DPI is not known. public float fallbackScreenDPI { get; set; } Property Value float matchWidthOrHeight Setting to scale the Canvas to match the width or height of the reference resolution, or a combination. public float matchWidthOrHeight { get; set; } Property Value float Remarks If the setting is set to 0, the Canvas is scaled according to the difference between the current screen resolution width and the reference resolution width. If the setting is set to 1, the Canvas is scaled according to the difference between the current screen resolution height and the reference resolution height. For values in between 0 and 1, the scaling is based on a combination of the relative width and height. Consider an example where the reference resolution of 640x480, and the current screen resolution is a landscape mode of 480x640. If the scaleWidthOrHeight setting is set to 0, the Canvas is scaled by 0.75 because the current resolution width of 480 is 0.75 times the reference resolution width of 640. The Canvas resolution gets a resolution of 640x853.33. This resolution has the same width as the reference resolution width, but has the aspect ratio of the current screen resolution. Note that the Canvas resolution of 640x853.33 is the current screen resolution divided by the scale factor of 0.75. If the scaleWidthOrHeight setting is set to 1, the Canvas is scaled by 1.33 because the current resolution height of 640 is 1.33 times the reference resolution height of 480. The Canvas resolution gets a resolution of 360x480. This resolution has the same height as the reference resolution width, but has the aspect ratio of the current screen resolution. Note that the Canvas resolution of 360x480 is the current screen resolution divided by the scale factor of 1.33. If the scaleWidthOrHeight setting is set to 0.5, we find the horizontal scaling needed (0.75) and the vertical scaling needed (1.33) and find the average. However, we do the average in logarithmic space. A regular average of 0.75 and 1.33 would produce a result of 1.04. However, since multiplying by 1.33 is the same as diving by 0.75, the two scale factor really corresponds to multiplying by 0.75 versus dividing by 0.75, and the average of those two things should even out and produce a neutral result. The average in logarithmic space of 0.75 and 1.33 is exactly 1.0, which is what we want. The Canvas resolution hence ends up being 480x640 which is the current resolution divided by the scale factor of 1.0. The logic works the same for all values. The average between the horizontal and vertical scale factor is a weighted average based on the matchWidthOrHeight value. physicalUnit The physical unit to specify positions and sizes in. public CanvasScaler.Unit physicalUnit { get; set; } Property Value CanvasScaler.Unit referencePixelsPerUnit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI. public float referencePixelsPerUnit { get; set; } Property Value float referenceResolution The resolution the UI layout is designed for. public Vector2 referenceResolution { get; set; } Property Value Vector2 Remarks If the screen resolution is larger, the UI will be scaled up, and if it's smaller, the UI will be scaled down. This is done in accordance with the Screen Match Mode. scaleFactor Scales all UI elements in the Canvas by this factor. public float scaleFactor { get; set; } Property Value float screenMatchMode A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution. public CanvasScaler.ScreenMatchMode screenMatchMode { get; set; } Property Value CanvasScaler.ScreenMatchMode uiScaleMode Determines how UI elements in the Canvas are scaled. public CanvasScaler.ScaleMode uiScaleMode { get; set; } Property Value CanvasScaler.ScaleMode Methods Handle() Method that handles calculations of canvas scaling. protected virtual void Handle() HandleConstantPhysicalSize() Handles canvas scaling for a constant physical size. protected virtual void HandleConstantPhysicalSize() HandleConstantPixelSize() Handles canvas scaling for a constant pixel size. protected virtual void HandleConstantPixelSize() HandleScaleWithScreenSize() Handles canvas scaling that scales with the screen size. protected virtual void HandleScaleWithScreenSize() HandleWorldCanvas() Handles canvas scaling for world canvas. protected virtual void HandleWorldCanvas() OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() SetReferencePixelsPerUnit(float) Sets the referencePixelsPerUnit on the Canvas. protected void SetReferencePixelsPerUnit(float referencePixelsPerUnit) Parameters referencePixelsPerUnit float The new reference pixels per Unity value SetScaleFactor(float) Sets the scale factor on the canvas. protected void SetScaleFactor(float scaleFactor) Parameters scaleFactor float The scale factor to use."
  },
  "api/UnityEngine.UI.CanvasUpdate.html": {
    "href": "api/UnityEngine.UI.CanvasUpdate.html",
    "title": "Enum CanvasUpdate | Snapshot",
    "keywords": "Enum CanvasUpdate Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Values of 'update' called on a Canvas update. public enum CanvasUpdate Fields LatePreRender = 4 Called late, before render. Layout = 1 Called for layout. MaxUpdateValue = 5 Max enum value. Always last. PostLayout = 2 Called after layout. PreRender = 3 Called before rendering. Prelayout = 0 Called before layout. Remarks If modifying also modify m_CanvasUpdateProfilerStrings to match."
  },
  "api/UnityEngine.UI.CanvasUpdateRegistry.html": {
    "href": "api/UnityEngine.UI.CanvasUpdateRegistry.html",
    "title": "Class CanvasUpdateRegistry | Snapshot",
    "keywords": "Class CanvasUpdateRegistry Namespace UnityEngine.UI Assembly UnityEngine.UI.dll A place where CanvasElements can register themselves for rebuilding. public class CanvasUpdateRegistry Inheritance object CanvasUpdateRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CanvasUpdateRegistry() protected CanvasUpdateRegistry() Properties instance Get the singleton registry instance. public static CanvasUpdateRegistry instance { get; } Property Value CanvasUpdateRegistry Methods DisableCanvasElementForRebuild(ICanvasElement) Disable the given element from both the graphic and the layout rebuild lists. public static void DisableCanvasElementForRebuild(ICanvasElement element) Parameters element ICanvasElement IsRebuildingGraphics() Are graphics currently being rebuild. public static bool IsRebuildingGraphics() Returns bool True if the rebuild loop is CanvasUpdate.PreRender or CanvasUpdate.Render IsRebuildingLayout() Are graphics layouts currently being calculated.. public static bool IsRebuildingLayout() Returns bool True if the rebuild loop is CanvasUpdate.Prelayout, CanvasUpdate.Layout or CanvasUpdate.Postlayout RegisterCanvasElementForGraphicRebuild(ICanvasElement) Try and add the given element to the rebuild list. Will not return if successfully added. public static void RegisterCanvasElementForGraphicRebuild(ICanvasElement element) Parameters element ICanvasElement The element that is needing rebuilt. RegisterCanvasElementForLayoutRebuild(ICanvasElement) Try and add the given element to the layout rebuild list. Will not return if successfully added. public static void RegisterCanvasElementForLayoutRebuild(ICanvasElement element) Parameters element ICanvasElement The element that is needing rebuilt. TryRegisterCanvasElementForGraphicRebuild(ICanvasElement) Try and add the given element to the rebuild list. public static bool TryRegisterCanvasElementForGraphicRebuild(ICanvasElement element) Parameters element ICanvasElement The element that is needing rebuilt. Returns bool True if the element was successfully added to the rebuilt list. False if either already inside a Graphic Update loop OR has already been added to the list. TryRegisterCanvasElementForLayoutRebuild(ICanvasElement) Try and add the given element to the layout rebuild list. public static bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElement element) Parameters element ICanvasElement The element that is needing rebuilt. Returns bool True if the element was successfully added to the rebuilt list. False if either already inside a Graphic Update loop OR has already been added to the list. UnRegisterCanvasElementForRebuild(ICanvasElement) Remove the given element from both the graphic and the layout rebuild lists. public static void UnRegisterCanvasElementForRebuild(ICanvasElement element) Parameters element ICanvasElement"
  },
  "api/UnityEngine.UI.ClipperRegistry.html": {
    "href": "api/UnityEngine.UI.ClipperRegistry.html",
    "title": "Class ClipperRegistry | Snapshot",
    "keywords": "Class ClipperRegistry Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Registry class to keep track of all IClippers that exist in the scene public class ClipperRegistry Inheritance object ClipperRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This is used during the CanvasUpdate loop to cull clippable elements. The clipping is called after layout, but before Graphic update. Constructors ClipperRegistry() protected ClipperRegistry() Properties instance The singleton instance of the clipper registry. public static ClipperRegistry instance { get; } Property Value ClipperRegistry Methods Cull() Perform the clipping on all registered IClipper public void Cull() Disable(IClipper) Disable a IClipper element public static void Disable(IClipper c) Parameters c IClipper The Element to try and disable. Register(IClipper) Register a unique IClipper element public static void Register(IClipper c) Parameters c IClipper The clipper element to add Unregister(IClipper) UnRegister a IClipper element public static void Unregister(IClipper c) Parameters c IClipper The Element to try and remove."
  },
  "api/UnityEngine.UI.Clipping.html": {
    "href": "api/UnityEngine.UI.Clipping.html",
    "title": "Class Clipping | Snapshot",
    "keywords": "Class Clipping Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Utility class to help when clipping using IClipper. public static class Clipping Inheritance object Clipping Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FindCullAndClipWorldRect(List<RectMask2D>, out bool) Find the Rect to use for clipping. Given the input RectMask2ds find a rectangle that is the overlap of all the inputs. public static Rect FindCullAndClipWorldRect(List<RectMask2D> rectMaskParents, out bool validRect) Parameters rectMaskParents List<RectMask2D> RectMasks to build the overlap rect from. validRect bool Was there a valid Rect found. Returns Rect The final compounded overlapping rect"
  },
  "api/UnityEngine.UI.ColorBlock.html": {
    "href": "api/UnityEngine.UI.ColorBlock.html",
    "title": "Struct ColorBlock | Snapshot",
    "keywords": "Struct ColorBlock Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public struct ColorBlock : IEquatable<ColorBlock> Implements IEquatable<ColorBlock> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields defaultColorBlock Simple getter for a code generated default ColorBlock. public static ColorBlock defaultColorBlock Field Value ColorBlock Properties colorMultiplier Multiplier applied to colors (allows brightening greater then base color). public float colorMultiplier { get; set; } Property Value float disabledColor The disabled color for this color block. public Color disabledColor { get; set; } Property Value Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; public Color newColor; void Start() { //Changes the button's Disabled color to the new color. ColorBlock cb = button.colors; cb.disabledColor = newColor; button.colors = cb; } } fadeDuration How long a color transition between states should take. public float fadeDuration { get; set; } Property Value float highlightedColor The highlight color for this color block. public Color highlightedColor { get; set; } Property Value Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; public Color newColor; void Start() { //Changes the button's Highlighted color to the new color. ColorBlock cb = button.colors; cb.highlightedColor = newColor; button.colors = cb; } } normalColor The normal color for this color block. public Color normalColor { get; set; } Property Value Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; public Color newColor; void Start() { //Changes the button's Normal color to the new color. ColorBlock cb = button.colors; cb.normalColor = newColor; button.colors = cb; } } pressedColor The pressed color for this color block. public Color pressedColor { get; set; } Property Value Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; public Color newColor; void Start() { //Changes the button's Pressed color to the new color. ColorBlock cb = button.colors; cb.pressedColor = newColor; button.colors = cb; } } selectedColor The selected color for this color block. public Color selectedColor { get; set; } Property Value Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; public Color newColor; void Start() { //Changes the button's Selected color to the new color. ColorBlock cb = button.colors; cb.selectedColor = newColor; button.colors = cb; } } Methods Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool Equals(ColorBlock) public bool Equals(ColorBlock other) Parameters other ColorBlock Returns bool GetHashCode() public override int GetHashCode() Returns int Operators operator ==(ColorBlock, ColorBlock) public static bool operator ==(ColorBlock point1, ColorBlock point2) Parameters point1 ColorBlock point2 ColorBlock Returns bool operator !=(ColorBlock, ColorBlock) public static bool operator !=(ColorBlock point1, ColorBlock point2) Parameters point1 ColorBlock point2 ColorBlock Returns bool"
  },
  "api/UnityEngine.UI.ContentSizeFitter.FitMode.html": {
    "href": "api/UnityEngine.UI.ContentSizeFitter.FitMode.html",
    "title": "Enum ContentSizeFitter.FitMode | Snapshot",
    "keywords": "Enum ContentSizeFitter.FitMode Namespace UnityEngine.UI Assembly UnityEngine.UI.dll The size fit modes avaliable to use. public enum ContentSizeFitter.FitMode Fields MinSize = 1 Resize to the minimum size of the content. PreferredSize = 2 Resize to the preferred size of the content. Unconstrained = 0 Don't perform any resizing."
  },
  "api/UnityEngine.UI.ContentSizeFitter.html": {
    "href": "api/UnityEngine.UI.ContentSizeFitter.html",
    "title": "Class ContentSizeFitter | Snapshot",
    "keywords": "Class ContentSizeFitter Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"Layout/Content Size Fitter\", 141)] [ExecuteAlways] [RequireComponent(typeof(RectTransform))] public class ContentSizeFitter : UIBehaviour, ILayoutSelfController, ILayoutController Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour ContentSizeFitter Implements ILayoutSelfController ILayoutController Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ContentSizeFitter() protected ContentSizeFitter() Fields m_HorizontalFit [SerializeField] protected ContentSizeFitter.FitMode m_HorizontalFit Field Value ContentSizeFitter.FitMode m_VerticalFit [SerializeField] protected ContentSizeFitter.FitMode m_VerticalFit Field Value ContentSizeFitter.FitMode Properties horizontalFit The fit mode to use to determine the width. public ContentSizeFitter.FitMode horizontalFit { get; set; } Property Value ContentSizeFitter.FitMode verticalFit The fit mode to use to determine the height. public ContentSizeFitter.FitMode verticalFit { get; set; } Property Value ContentSizeFitter.FitMode Methods OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). protected override void OnRectTransformDimensionsChange() SetDirty() protected void SetDirty() SetLayoutHorizontal() Calculate and apply the horizontal component of the size to the RectTransform public virtual void SetLayoutHorizontal() SetLayoutVertical() Calculate and apply the vertical component of the size to the RectTransform public virtual void SetLayoutVertical()"
  },
  "api/UnityEngine.UI.DefaultControls.IFactoryControls.html": {
    "href": "api/UnityEngine.UI.DefaultControls.IFactoryControls.html",
    "title": "Interface DefaultControls.IFactoryControls | Snapshot",
    "keywords": "Interface DefaultControls.IFactoryControls Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Factory interface to create a GameObject in this class. It is necessary to use this interface in the whole class so MenuOption and Editor can work using ObjectFactory and default Presets. public interface DefaultControls.IFactoryControls Remarks The only available method is CreateGameObject. It needs to be called with every Components the created Object will need because of a bug with Undo and RectTransform. Adding a UI component on the created GameObject may crash if done after Undo.SetTransformParent, So it's better to prevent such behavior in this class by asking for full creation with all the components. Methods CreateGameObject(string, params Type[]) GameObject CreateGameObject(string name, params Type[] components) Parameters name string components Type[] Returns GameObject"
  },
  "api/UnityEngine.UI.DefaultControls.Resources.html": {
    "href": "api/UnityEngine.UI.DefaultControls.Resources.html",
    "title": "Struct DefaultControls.Resources | Snapshot",
    "keywords": "Struct DefaultControls.Resources Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Object used to pass resources to use for the default controls. public struct DefaultControls.Resources Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields background Sprite used for background elements. public Sprite background Field Value Sprite checkmark Sprite used for representation of an \"on\" state when present, such as a checkmark. public Sprite checkmark Field Value Sprite dropdown Sprite used to indicate that a button will open a dropdown when clicked. public Sprite dropdown Field Value Sprite inputField Sprite used as background for input fields. public Sprite inputField Field Value Sprite knob Sprite used for knobs that can be dragged, such as on a slider. public Sprite knob Field Value Sprite mask Sprite used for masking purposes, for example to be used for the viewport of a scroll view. public Sprite mask Field Value Sprite standard The primary sprite to be used for graphical UI elements, used by the button, toggle, and dropdown controls, among others. public Sprite standard Field Value Sprite"
  },
  "api/UnityEngine.UI.DefaultControls.html": {
    "href": "api/UnityEngine.UI.DefaultControls.html",
    "title": "Class DefaultControls | Snapshot",
    "keywords": "Class DefaultControls Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Utility class for creating default implementations of builtin UI controls. public static class DefaultControls Inheritance object DefaultControls Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The recommended workflow for using UI controls with the UI system is to create a prefab for each type of control and instantiate those when needed. This way changes can be made to the prefabs which immediately have effect on all used instances. However, in certain cases there can be reasons to create UI controls entirely from code. The DefaultControls class provide methods to create each of the builtin UI controls. The resulting objects are the same as are obtained from using the corresponding UI menu entries in the GameObject menu in the Editor. An example use of this is creating menu items for custom new UI controls that mimics the ones that are builtin in Unity. Some such UI controls may contain other UI controls. For example, a scroll view contains scrollbars.By using the DefaultControls methods to create those parts, it is ensured that they are identical in look and setup to the ones provided in the menu items builtin with Unity. Note that the details of the setup of the UI controls created by the methods in this class may change with later revisions of the UI system.As such, they are not guaranteed to be 100% backwards compatible. It is recommended not to rely on the specific hierarchies of the GameObjects created by these methods, and limit your code to only interface with the root GameObject created by each method. Properties factory public static DefaultControls.IFactoryControls factory { get; } Property Value DefaultControls.IFactoryControls Methods CreateButton(Resources) Create the basic UI button. public static GameObject CreateButton(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Button -Text CreateDropdown(Resources) Create the basic UI dropdown. public static GameObject CreateDropdown(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Dropdown - Label - Arrow - Template - Viewport - Content - Item - Item Background - Item Checkmark - Item Label - Scrollbar - Sliding Area - Handle CreateImage(Resources) Create the basic UI Image. public static GameObject CreateImage(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Image CreateInputField(Resources) Create the basic UI input field. public static GameObject CreateInputField(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) InputField - PlaceHolder - Text CreatePanel(Resources) Create the basic UI Panel. public static GameObject CreatePanel(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Image CreateRawImage(Resources) Create the basic UI RawImage. public static GameObject CreateRawImage(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) RawImage CreateScrollView(Resources) Create the basic UI Scrollview. public static GameObject CreateScrollView(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Scrollview - Viewport - Content - Scrollbar Horizontal - Sliding Area - Handle - Scrollbar Vertical - Sliding Area - Handle CreateScrollbar(Resources) Create the basic UI Scrollbar. public static GameObject CreateScrollbar(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Scrollbar - Sliding Area - Handle CreateSlider(Resources) Create the basic UI Slider. public static GameObject CreateSlider(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Slider - Background - Fill Area - Fill - Handle Slide Area - Handle CreateText(Resources) Create the basic UI Text. public static GameObject CreateText(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Text CreateToggle(Resources) Create the basic UI Toggle. public static GameObject CreateToggle(DefaultControls.Resources resources) Parameters resources DefaultControls.Resources The resources to use for creation. Returns GameObject The root GameObject of the created element. Remarks Hierarchy: (root) Toggle - Background - Checkmark - Label"
  },
  "api/UnityEngine.UI.Dropdown.DropdownEvent.html": {
    "href": "api/UnityEngine.UI.Dropdown.DropdownEvent.html",
    "title": "Class Dropdown.DropdownEvent | Snapshot",
    "keywords": "Class Dropdown.DropdownEvent Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class Dropdown.DropdownEvent : UnityEvent<int>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<int> Dropdown.DropdownEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<int>.AddListener(UnityAction<int>) UnityEvent<int>.RemoveListener(UnityAction<int>) UnityEvent<int>.FindMethod_Impl(string, Type) UnityEvent<int>.Invoke(int) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.UI.Dropdown.DropdownItem.html": {
    "href": "api/UnityEngine.UI.Dropdown.DropdownItem.html",
    "title": "Class Dropdown.DropdownItem | Snapshot",
    "keywords": "Class Dropdown.DropdownItem Namespace UnityEngine.UI Assembly UnityEngine.UI.dll protected class Dropdown.DropdownItem : MonoBehaviour, IPointerEnterHandler, ICancelHandler, IEventSystemHandler Inheritance object Object Component Behaviour MonoBehaviour Dropdown.DropdownItem Implements IPointerEnterHandler ICancelHandler IEventSystemHandler Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties image public Image image { get; set; } Property Value Image rectTransform public RectTransform rectTransform { get; set; } Property Value RectTransform text public Text text { get; set; } Property Value Text toggle public Toggle toggle { get; set; } Property Value Toggle Methods OnCancel(BaseEventData) public virtual void OnCancel(BaseEventData eventData) Parameters eventData BaseEventData OnPointerEnter(PointerEventData) Use this callback to detect pointer enter events public virtual void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData"
  },
  "api/UnityEngine.UI.Dropdown.OptionData.html": {
    "href": "api/UnityEngine.UI.Dropdown.OptionData.html",
    "title": "Class Dropdown.OptionData | Snapshot",
    "keywords": "Class Dropdown.OptionData Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class Dropdown.OptionData Inheritance object Dropdown.OptionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OptionData() public OptionData() OptionData(string) public OptionData(string text) Parameters text string OptionData(string, Sprite) Create an object representing a single option for the dropdown list. public OptionData(string text, Sprite image) Parameters text string Optional text for the option. image Sprite Optional image for the option. OptionData(Sprite) public OptionData(Sprite image) Parameters image Sprite Properties image The image associated with the option. public Sprite image { get; set; } Property Value Sprite text The text associated with the option. public string text { get; set; } Property Value string"
  },
  "api/UnityEngine.UI.Dropdown.OptionDataList.html": {
    "href": "api/UnityEngine.UI.Dropdown.OptionDataList.html",
    "title": "Class Dropdown.OptionDataList | Snapshot",
    "keywords": "Class Dropdown.OptionDataList Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class Dropdown.OptionDataList Inheritance object Dropdown.OptionDataList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OptionDataList() public OptionDataList() Properties options The list of options for the dropdown list. public List<Dropdown.OptionData> options { get; set; } Property Value List<Dropdown.OptionData>"
  },
  "api/UnityEngine.UI.Dropdown.html": {
    "href": "api/UnityEngine.UI.Dropdown.html",
    "title": "Class Dropdown | Snapshot",
    "keywords": "Class Dropdown Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Legacy/Dropdown\", 102)] [RequireComponent(typeof(RectTransform))] public class Dropdown : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IPointerClickHandler, ISubmitHandler, ICancelHandler, IEventSystemHandler Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable Dropdown Implements IMoveHandler IPointerDownHandler IPointerUpHandler IPointerEnterHandler IPointerExitHandler ISelectHandler IDeselectHandler IPointerClickHandler ISubmitHandler ICancelHandler IEventSystemHandler Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnDidApplyAnimationProperties() Selectable.OnEnable() Selectable.OnTransformParentChanged() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, bool) Selectable.FindSelectable(Vector3) Selectable.FindSelectableOnLeft() Selectable.FindSelectableOnRight() Selectable.FindSelectableOnUp() Selectable.FindSelectableOnDown() Selectable.OnMove(AxisEventData) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerDown(PointerEventData) Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Dropdown() protected Dropdown() Properties alphaFadeSpeed The time interval at which a drop down will appear and disappear public float alphaFadeSpeed { get; set; } Property Value float captionImage The Image component to hold the image of the currently selected option. public Image captionImage { get; set; } Property Value Image captionText The Text component to hold the text of the currently selected option. public Text captionText { get; set; } Property Value Text itemImage The Image component to hold the image of the item public Image itemImage { get; set; } Property Value Image itemText The Text component to hold the text of the item. public Text itemText { get; set; } Property Value Text onValueChanged A UnityEvent that is invoked when when a user has clicked one of the options in the dropdown list. public Dropdown.DropdownEvent onValueChanged { get; set; } Property Value Dropdown.DropdownEvent Examples //Create a new Dropdown GameObject by going to the Hierarchy and clicking Create>UI>Dropdown. Attach this script to the Dropdown GameObject. //Set your own Text in the Inspector window using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { Dropdown m_Dropdown; public Text m_Text; void Start() { //Fetch the Dropdown GameObject m_Dropdown = GetComponent<Dropdown>(); //Add listener for when the value of the Dropdown changes, to take action m_Dropdown.onValueChanged.AddListener(delegate { DropdownValueChanged(m_Dropdown); }); //Initialise the Text to say the first value of the Dropdown m_Text.text = \"First Value : \" + m_Dropdown.value; } //Ouput the new value of the Dropdown into Text void DropdownValueChanged(Dropdown change) { m_Text.text = \"New Value : \" + change.value; } } Remarks Use this to detect when a user selects one or more options in the Dropdown. Add a listener to perform an action when this UnityEvent detects a selection by the user. See https://unity3d.com/learn/tutorials/topics/scripting/delegates for more information on delegates. options The list of possible options. A text string and an image can be specified for each option. public List<Dropdown.OptionData> options { get; set; } Property Value List<Dropdown.OptionData> Examples //Create a new Dropdown GameObject by going to the Hierarchy and clicking __Create__>__UI__>__Dropdown__. Attach this script to the Dropdown GameObject. using UnityEngine; using UnityEngine.UI; using System.Collections.Generic; public class Example : MonoBehaviour { //Use these for adding options to the Dropdown List Dropdown.OptionData m_NewData, m_NewData2; //The list of messages for the Dropdown List<Dropdown.OptionData> m_Messages = new List<Dropdown.OptionData>(); //This is the Dropdown Dropdown m_Dropdown; string m_MyString; int m_Index; void Start() { //Fetch the Dropdown GameObject the script is attached to m_Dropdown = GetComponent<Dropdown>(); //Clear the old options of the Dropdown menu m_Dropdown.ClearOptions(); //Create a new option for the Dropdown menu which reads \"Option 1\" and add to messages List m_NewData = new Dropdown.OptionData(); m_NewData.text = \"Option 1\"; m_Messages.Add(m_NewData); //Create a new option for the Dropdown menu which reads \"Option 2\" and add to messages List m_NewData2 = new Dropdown.OptionData(); m_NewData2.text = \"Option 2\"; m_Messages.Add(m_NewData2); //Take each entry in the message List foreach (Dropdown.OptionData message in m_Messages) { //Add each entry to the Dropdown m_Dropdown.options.Add(message); //Make the index equal to the total number of entries m_Index = m_Messages.Count - 1; } } //This OnGUI function is used here for a quick demonstration. See the [[wiki:UISystem|UI Section]] for more information about setting up your own UI. void OnGUI() { //TextField for user to type new entry to add to Dropdown m_MyString = GUI.TextField(new Rect(0, 40, 100, 40), m_MyString); //Press the \"Add\" Button to add a new entry to the Dropdown if (GUI.Button(new Rect(0, 0, 100, 40), \"Add\")) { //Make the index the last number of entries m_Index = m_Messages.Count; //Create a temporary option Dropdown.OptionData temp = new Dropdown.OptionData(); //Make the option the data from the TextField temp.text = m_MyString; //Update the messages list with the TextField data m_Messages.Add(temp); //Add the Textfield data to the Dropdown m_Dropdown.options.Insert(m_Index, temp); } //Press the \"Remove\" button to delete the selected option if (GUI.Button(new Rect(110, 0, 100, 40), \"Remove\")) { //Remove the current selected item from the Dropdown from the messages List m_Messages.RemoveAt(m_Dropdown.value); //Remove the current selection from the Dropdown m_Dropdown.options.RemoveAt(m_Dropdown.value); } } } Remarks This is the list of options within the Dropdown. Each option contains Text and/or image data that you can specify using UI.Dropdown.OptionData before adding to the Dropdown list. This also unlocks the ability to edit the Dropdown, including the insertion, removal, and finding of options, as well as other useful tools template The Rect Transform of the template for the dropdown list. public RectTransform template { get; set; } Property Value RectTransform value The Value is the index number of the current selection in the Dropdown. 0 is the first option in the Dropdown, 1 is the second, and so on. public int value { get; set; } Property Value int Examples //Create a new Dropdown GameObject by going to the Hierarchy and clicking __Create__>__UI__>__Dropdown__. Attach this script to the Dropdown GameObject. //Set your own Text in the Inspector window using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { //Attach this script to a Dropdown GameObject Dropdown m_Dropdown; //This is the string that stores the current selection m_Text of the Dropdown string m_Message; //This Text outputs the current selection to the screen public Text m_Text; //This is the index value of the Dropdown int m_DropdownValue; void Start() { //Fetch the DropDown component from the GameObject m_Dropdown = GetComponent<Dropdown>(); //Output the first Dropdown index value Debug.Log(\"Starting Dropdown Value : \" + m_Dropdown.value); } void Update() { //Keep the current index of the Dropdown in a variable m_DropdownValue = m_Dropdown.value; //Change the message to say the name of the current Dropdown selection using the value m_Message = m_Dropdown.options[m_DropdownValue].text; //Change the onscreen Text to reflect the current Dropdown selection m_Text.text = m_Message; } } Methods AddOptions(List<string>) Add multiple text-only options to the options of the Dropdown based on a list of strings. public void AddOptions(List<string> options) Parameters options List<string> The list of text strings to add. Examples //Create a new Dropdown GameObject by going to the Hierarchy and clicking Create>UI>Dropdown. Attach this script to the Dropdown GameObject. using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { //Create a List of new Dropdown options List<string> m_DropOptions = new List<string> { \"Option 1\", \"Option 2\"}; //This is the Dropdown Dropdown m_Dropdown; void Start() { //Fetch the Dropdown GameObject the script is attached to m_Dropdown = GetComponent<Dropdown>(); //Clear the old options of the Dropdown menu m_Dropdown.ClearOptions(); //Add the options created in the List above m_Dropdown.AddOptions(m_DropOptions); } } Remarks Add a List of string messages to the Dropdown. The Dropdown shows each member of the list as a separate option. AddOptions(List<Sprite>) Add multiple image-only options to the options of the Dropdown based on a list of Sprites. public void AddOptions(List<Sprite> options) Parameters options List<Sprite> The list of Sprites to add. Remarks See AddOptions(List<string> options) for code example of usages. AddOptions(List<OptionData>) Add multiple options to the options of the Dropdown based on a list of OptionData objects. public void AddOptions(List<Dropdown.OptionData> options) Parameters options List<Dropdown.OptionData> The list of OptionData to add. Remarks See AddOptions(List<string> options) for code example of usages. Awake() Convenience function to get the Animator component on the GameObject. protected override void Awake() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { private Animator buttonAnimator; public Button button; void Start() { //Assigns the \"buttonAnimator\" with the button's animator. buttonAnimator = button.animator; } } ClearOptions() Clear the list of options in the Dropdown. public void ClearOptions() CreateBlocker(Canvas) Create a blocker that blocks clicks to other controls while the dropdown list is open. protected virtual GameObject CreateBlocker(Canvas rootCanvas) Parameters rootCanvas Canvas The root canvas the dropdown is under. Returns GameObject The created blocker object Remarks Override this method to implement a different way to obtain a blocker GameObject. CreateDropdownList(GameObject) Create the dropdown list to be shown when the dropdown is clicked. The dropdown list should correspond to the provided template GameObject, equivalent to instantiating a copy of it. protected virtual GameObject CreateDropdownList(GameObject template) Parameters template GameObject The template to create the dropdown list from. Returns GameObject The created drop down list gameobject. Remarks Override this method to implement a different way to obtain a dropdown list GameObject. CreateItem(DropdownItem) Create a dropdown item based upon the item template. protected virtual Dropdown.DropdownItem CreateItem(Dropdown.DropdownItem itemTemplate) Parameters itemTemplate Dropdown.DropdownItem e template to create the option item from. Returns Dropdown.DropdownItem The created dropdown item component Remarks Override this method to implement a different way to obtain an option item. The option item should correspond to the provided template DropdownItem and its GameObject, equivalent to instantiating a copy of it. DestroyBlocker(GameObject) Convenience method to explicitly destroy the previously generated blocker object protected virtual void DestroyBlocker(GameObject blocker) Parameters blocker GameObject The blocker object to destroy. Remarks Override this method to implement a different way to dispose of a blocker GameObject that blocks clicks to other controls while the dropdown list is open. DestroyDropdownList(GameObject) Convenience method to explicitly destroy the previously generated dropdown list protected virtual void DestroyDropdownList(GameObject dropdownList) Parameters dropdownList GameObject The dropdown list GameObject to destroy Remarks Override this method to implement a different way to dispose of a dropdown list GameObject. DestroyItem(DropdownItem) Convenience method to explicitly destroy the previously generated Items. protected virtual void DestroyItem(Dropdown.DropdownItem item) Parameters item Dropdown.DropdownItem The Item to destroy. Remarks Override this method to implement a different way to dispose of an option item. Likely no action needed since destroying the dropdown list destroys all contained items as well. Hide() Hide the dropdown list. I.e. close it. public void Hide() OnCancel(BaseEventData) This will hide the dropdown list. public virtual void OnCancel(BaseEventData eventData) Parameters eventData BaseEventData The asocciated event data. Remarks Called by a BaseInputModule when a Cancel event occurs. OnDisable() protected override void OnDisable() OnPointerClick(PointerEventData) Handling for when the dropdown is initially 'clicked'. Typically shows the dropdown public virtual void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData The asocciated event data. OnSubmit(BaseEventData) Handling for when the dropdown is selected and a submit event is processed. Typically shows the dropdown public virtual void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData The asocciated event data. RefreshShownValue() Refreshes the text and image (if available) of the currently selected option. public void RefreshShownValue() Remarks If you have modified the list of options, you should call this method afterwards to ensure that the visual state of the dropdown corresponds to the updated options. SetValueWithoutNotify(int) Set index number of the current selection in the Dropdown without invoking onValueChanged callback. public void SetValueWithoutNotify(int input) Parameters input int The new index for the current selection. Show() Show the dropdown. Plan for dropdown scrolling to ensure dropdown is contained within screen. We assume the Canvas is the screen that the dropdown must be kept inside. This is always valid for screen space canvas modes. For world space canvases we don't know how it's used, but it could be e.g. for an in-game monitor. We consider it a fair constraint that the canvas must be big enough to contain dropdowns. public void Show() Start() protected override void Start()"
  },
  "api/UnityEngine.UI.FontData.html": {
    "href": "api/UnityEngine.UI.FontData.html",
    "title": "Class FontData | Snapshot",
    "keywords": "Class FontData Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class FontData : ISerializationCallbackReceiver Inheritance object FontData Implements ISerializationCallbackReceiver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties alignByGeometry Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics. public bool alignByGeometry { get; set; } Property Value bool Remarks This can result in better fitting left and right alignment, but may result in incorrect positioning when attempting to overlay multiple fonts (such as a specialized outline font) on top of each other. alignment How is the text aligned for this generated Text object. public TextAnchor alignment { get; set; } Property Value TextAnchor bestFit Is best fit used for this generated Text object. public bool bestFit { get; set; } Property Value bool defaultFontData Get a font data with sensible defaults. public static FontData defaultFontData { get; } Property Value FontData font The Font to use for this generated Text object. public Font font { get; set; } Property Value Font fontSize The Font size to use for this generated Text object. public int fontSize { get; set; } Property Value int fontStyle The font style to use for this generated Text object. public FontStyle fontStyle { get; set; } Property Value FontStyle horizontalOverflow The horizontal overflow policy for this generated Text object. public HorizontalWrapMode horizontalOverflow { get; set; } Property Value HorizontalWrapMode lineSpacing The line spaceing for this generated Text object. public float lineSpacing { get; set; } Property Value float maxSize The max size for this generated Text object. public int maxSize { get; set; } Property Value int minSize The min size for this generated Text object. public int minSize { get; set; } Property Value int richText Should rich text be used for this generated Text object. public bool richText { get; set; } Property Value bool verticalOverflow The vertical overflow policy for this generated Text object. public VerticalWrapMode verticalOverflow { get; set; } Property Value VerticalWrapMode"
  },
  "api/UnityEngine.UI.FontUpdateTracker.html": {
    "href": "api/UnityEngine.UI.FontUpdateTracker.html",
    "title": "Class FontUpdateTracker | Snapshot",
    "keywords": "Class FontUpdateTracker Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Utility class that is used to help with Text update. public static class FontUpdateTracker Inheritance object FontUpdateTracker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks When Unity rebuilds a font atlas a callback is sent to the font. Using this class you can register your text as needing to be rebuilt if the font atlas is updated. Methods TrackText(Text) Register a Text element for receiving texture atlas rebuild calls. public static void TrackText(Text t) Parameters t Text The Text object to track UntrackText(Text) Deregister a Text element from receiving texture atlas rebuild calls. public static void UntrackText(Text t) Parameters t Text The Text object to no longer track"
  },
  "api/UnityEngine.UI.Graphic.html": {
    "href": "api/UnityEngine.UI.Graphic.html",
    "title": "Class Graphic | Snapshot",
    "keywords": "Class Graphic Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Base class for all UI components that should be derived from when creating new Graphic types. [DisallowMultipleComponent] [RequireComponent(typeof(RectTransform))] [ExecuteAlways] public abstract class Graphic : UIBehaviour, ICanvasElement Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Graphic Implements ICanvasElement Derived MaskableGraphic Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Graphic() protected Graphic() Fields m_CachedMesh [NonSerialized] protected Mesh m_CachedMesh Field Value Mesh m_CachedUvs [NonSerialized] protected Vector2[] m_CachedUvs Field Value Vector2[] m_Material [FormerlySerializedAs(\"m_Mat\")] [SerializeField] protected Material m_Material Field Value Material m_OnDirtyLayoutCallback [NonSerialized] protected UnityAction m_OnDirtyLayoutCallback Field Value UnityAction m_OnDirtyMaterialCallback [NonSerialized] protected UnityAction m_OnDirtyMaterialCallback Field Value UnityAction m_OnDirtyVertsCallback [NonSerialized] protected UnityAction m_OnDirtyVertsCallback Field Value UnityAction m_SkipLayoutUpdate [NonSerialized] protected bool m_SkipLayoutUpdate Field Value bool m_SkipMaterialUpdate [NonSerialized] protected bool m_SkipMaterialUpdate Field Value bool s_DefaultUI protected static Material s_DefaultUI Field Value Material s_Mesh [NonSerialized] protected static Mesh s_Mesh Field Value Mesh s_WhiteTexture protected static Texture2D s_WhiteTexture Field Value Texture2D Properties canvas A reference to the Canvas this Graphic is rendering to. public Canvas canvas { get; } Property Value Canvas Remarks In the situation where the Graphic is used in a hierarchy with multiple Canvases, the Canvas closest to the root will be used. canvasRenderer A reference to the CanvasRenderer populated by this Graphic. public CanvasRenderer canvasRenderer { get; } Property Value CanvasRenderer color Base color of the Graphic. public virtual Color color { get; set; } Property Value Color Examples //Place this script on a GameObject with a Graphic component attached e.g. a visual UI element (Image). using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { Graphic m_Graphic; Color m_MyColor; void Start() { //Fetch the Graphic from the GameObject m_Graphic = GetComponent<Graphic>(); //Create a new Color that starts as red m_MyColor = Color.red; //Change the Graphic Color to the new Color m_Graphic.color = m_MyColor; } // Update is called once per frame void Update() { //When the mouse button is clicked, change the Graphic Color if (Input.GetKey(KeyCode.Mouse0)) { //Change the Color over time between blue and red while the mouse button is pressed m_MyColor = Color.Lerp(Color.red, Color.blue, Mathf.PingPong(Time.time, 1)); } //Change the Graphic Color to the new Color m_Graphic.color = m_MyColor; } } Remarks The builtin UI Components use this as their vertex color. Use this to fetch or change the Color of visual UI elements, such as an Image. defaultGraphicMaterial Default material used to draw UI elements if no explicit material was specified. public static Material defaultGraphicMaterial { get; } Property Value Material defaultMaterial Returns the default material for the graphic. public virtual Material defaultMaterial { get; } Property Value Material depth Absolute depth of the graphic, used by rendering and events -- lowest to highest. public int depth { get; } Property Value int Examples The depth is relative to the first root canvas. Canvas Graphic - 1 Graphic - 2 Nested Canvas Graphic - 3 Graphic - 4 Graphic - 5 This value is used to determine draw and event ordering. mainTexture The graphic's texture. (Read Only). public virtual Texture mainTexture { get; } Property Value Texture Remarks This is the Texture that gets passed to the CanvasRenderer, Material and then Shader _MainTex. When implementing your own Graphic you can override this to control which texture goes through the UI Rendering pipeline. Bear in mind that Unity tries to batch UI elements together to improve performance, so its ideal to work with atlas to reduce the number of draw calls. material The Material set by the user public virtual Material material { get; set; } Property Value Material materialForRendering The material that will be sent for Rendering (Read only). public virtual Material materialForRendering { get; } Property Value Material Remarks This is the material that actually gets sent to the CanvasRenderer. By default it's the same as [[Graphic.material]]. When extending Graphic you can override this to send a different material to the CanvasRenderer than the one set by Graphic.material. This is useful if you want to modify the user set material in a non destructive manner. raycastPadding Padding to be applied to the masking X = Left Y = Bottom Z = Right W = Top public Vector4 raycastPadding { get; set; } Property Value Vector4 raycastTarget Should this graphic be considered a target for raycasting? public virtual bool raycastTarget { get; set; } Property Value bool rectTransform The RectTransform component used by the Graphic. Cached for speed. public RectTransform rectTransform { get; } Property Value RectTransform useLegacyMeshGeneration protected bool useLegacyMeshGeneration { get; set; } Property Value bool workerMesh protected static Mesh workerMesh { get; } Property Value Mesh Methods CrossFadeAlpha(float, float, bool) Tweens the alpha of the CanvasRenderer color associated with this Graphic. public virtual void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) Parameters alpha float Target alpha. duration float Duration of the tween in seconds. ignoreTimeScale bool Should ignore [[Time.scale]]? CrossFadeColor(Color, float, bool, bool) Tweens the CanvasRenderer color associated with this Graphic. public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) Parameters targetColor Color Target color. duration float Tween duration. ignoreTimeScale bool Should ignore Time.scale? useAlpha bool Should also Tween the alpha channel? CrossFadeColor(Color, float, bool, bool, bool) Tweens the CanvasRenderer color associated with this Graphic. public virtual void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha, bool useRGB) Parameters targetColor Color Target color. duration float Tween duration. ignoreTimeScale bool Should ignore Time.scale? useAlpha bool Should also Tween the alpha channel? useRGB bool Should the color or the alpha be used to tween GetPixelAdjustedRect() Returns a pixel perfect Rect closest to the Graphic RectTransform. public Rect GetPixelAdjustedRect() Returns Rect A Pixel perfect Rect. Remarks Note: This is only accurate if the Graphic root Canvas is in Screen Space. GraphicUpdateComplete() Callback sent when this ICanvasElement has completed Graphic rebuild. public virtual void GraphicUpdateComplete() LayoutComplete() Callback sent when this ICanvasElement has completed layout. public virtual void LayoutComplete() OnBeforeTransformParentChanged() protected override void OnBeforeTransformParentChanged() OnCanvasHierarchyChanged() Called when the state of the parent Canvas is changed. protected override void OnCanvasHierarchyChanged() OnCullingChanged() This method must be called when CanvasRenderer.cull is modified. public virtual void OnCullingChanged() Remarks This can be used to perform operations that were previously skipped because the Graphic was culled. OnDestroy() protected override void OnDestroy() OnDidApplyAnimationProperties() protected override void OnDidApplyAnimationProperties() OnDisable() Clear references. protected override void OnDisable() OnEnable() Mark the Graphic and the canvas as having been changed. protected override void OnEnable() OnPopulateMesh(Mesh) [Obsolete(\"Use OnPopulateMesh(VertexHelper vh) instead.\", false)] protected virtual void OnPopulateMesh(Mesh m) Parameters m Mesh OnPopulateMesh(VertexHelper) Callback function when a UI element needs to generate vertices. Fills the vertex buffer data. protected virtual void OnPopulateMesh(VertexHelper vh) Parameters vh VertexHelper VertexHelper utility. Remarks Used by Text, UI.Image, and RawImage for example to generate vertices specific to their use case. OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). protected override void OnRectTransformDimensionsChange() OnTransformParentChanged() protected override void OnTransformParentChanged() PixelAdjustPoint(Vector2) Adjusts the given pixel to be pixel perfect. public Vector2 PixelAdjustPoint(Vector2 point) Parameters point Vector2 Local space point. Returns Vector2 Pixel perfect adjusted point. Remarks Note: This is only accurate if the Graphic root Canvas is in Screen Space. Raycast(Vector2, Camera) When a GraphicRaycaster is raycasting into the scene it does two things. First it filters the elements using their RectTransform rect. Then it uses this Raycast function to determine the elements hit by the raycast. public virtual bool Raycast(Vector2 sp, Camera eventCamera) Parameters sp Vector2 Screen point being tested eventCamera Camera Camera that is being used for the testing. Returns bool True if the provided point is a valid location for GraphicRaycaster raycasts. Rebuild(CanvasUpdate) Rebuilds the graphic geometry and its material on the PreRender cycle. public virtual void Rebuild(CanvasUpdate update) Parameters update CanvasUpdate The current step of the rendering CanvasUpdate cycle. Remarks See CanvasUpdateRegistry for more details on the canvas update cycle. RegisterDirtyLayoutCallback(UnityAction) Add a listener to receive notification when the graphics layout is dirtied. public void RegisterDirtyLayoutCallback(UnityAction action) Parameters action UnityAction The method to call when invoked. RegisterDirtyMaterialCallback(UnityAction) Add a listener to receive notification when the graphics material is dirtied. public void RegisterDirtyMaterialCallback(UnityAction action) Parameters action UnityAction The method to call when invoked. RegisterDirtyVerticesCallback(UnityAction) Add a listener to receive notification when the graphics vertices are dirtied. public void RegisterDirtyVerticesCallback(UnityAction action) Parameters action UnityAction The method to call when invoked. SetAllDirty() Set all properties of the Graphic dirty and needing rebuilt. Dirties Layout, Vertices, and Materials. public virtual void SetAllDirty() SetLayoutDirty() Mark the layout as dirty and needing rebuilt. public virtual void SetLayoutDirty() Remarks Send a OnDirtyLayoutCallback notification if any elements are registered. See RegisterDirtyLayoutCallback SetMaterialDirty() Mark the material as dirty and needing rebuilt. public virtual void SetMaterialDirty() Remarks Send a OnDirtyMaterialCallback notification if any elements are registered. See RegisterDirtyMaterialCallback SetNativeSize() Make the Graphic have the native size of its content. public virtual void SetNativeSize() SetRaycastDirty() public void SetRaycastDirty() SetVerticesDirty() Mark the vertices as dirty and needing rebuilt. public virtual void SetVerticesDirty() Remarks Send a OnDirtyVertsCallback notification if any elements are registered. See RegisterDirtyVerticesCallback UnregisterDirtyLayoutCallback(UnityAction) Remove a listener from receiving notifications when the graphics layout are dirtied public void UnregisterDirtyLayoutCallback(UnityAction action) Parameters action UnityAction The method to call when invoked. UnregisterDirtyMaterialCallback(UnityAction) Remove a listener from receiving notifications when the graphics material are dirtied public void UnregisterDirtyMaterialCallback(UnityAction action) Parameters action UnityAction The method to call when invoked. UnregisterDirtyVerticesCallback(UnityAction) Remove a listener from receiving notifications when the graphics vertices are dirtied public void UnregisterDirtyVerticesCallback(UnityAction action) Parameters action UnityAction The method to call when invoked. UpdateGeometry() Call to update the geometry of the Graphic onto the CanvasRenderer. protected virtual void UpdateGeometry() UpdateMaterial() Call to update the Material of the graphic onto the CanvasRenderer. protected virtual void UpdateMaterial()"
  },
  "api/UnityEngine.UI.GraphicRaycaster.BlockingObjects.html": {
    "href": "api/UnityEngine.UI.GraphicRaycaster.BlockingObjects.html",
    "title": "Enum GraphicRaycaster.BlockingObjects | Snapshot",
    "keywords": "Enum GraphicRaycaster.BlockingObjects Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Type of raycasters to check against to check for canvas blocking elements. public enum GraphicRaycaster.BlockingObjects Fields All = 3 Perform a 2D and a 3D raycasts to check for blocking 2D and 3D elements. None = 0 Perform no raycasts. ThreeD = 2 Perform a 3D raycast check to check for blocking 3D elements TwoD = 1 Perform a 2D raycast check to check for blocking 2D elements"
  },
  "api/UnityEngine.UI.GraphicRaycaster.html": {
    "href": "api/UnityEngine.UI.GraphicRaycaster.html",
    "title": "Class GraphicRaycaster | Snapshot",
    "keywords": "Class GraphicRaycaster Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"Event/Graphic Raycaster\")] [RequireComponent(typeof(Canvas))] public class GraphicRaycaster : BaseRaycaster Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseRaycaster GraphicRaycaster Inherited Members BaseRaycaster.priority BaseRaycaster.rootRaycaster BaseRaycaster.ToString() BaseRaycaster.OnEnable() BaseRaycaster.OnDisable() BaseRaycaster.OnCanvasHierarchyChanged() BaseRaycaster.OnTransformParentChanged() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GraphicRaycaster() protected GraphicRaycaster() Fields kNoEventMaskSet protected const int kNoEventMaskSet = -1 Field Value int m_BlockingMask [SerializeField] protected LayerMask m_BlockingMask Field Value LayerMask Properties blockingMask The type of objects specified through LayerMask that are checked to determine if they block graphic raycasts. public LayerMask blockingMask { get; set; } Property Value LayerMask blockingObjects The type of objects that are checked to determine if they block graphic raycasts. public GraphicRaycaster.BlockingObjects blockingObjects { get; set; } Property Value GraphicRaycaster.BlockingObjects eventCamera The camera that will generate rays for this raycaster. public override Camera eventCamera { get; } Property Value Camera Null if Camera mode is ScreenSpaceOverlay or ScreenSpaceCamera and has no camera. canvas.worldCanvas if not null Camera.main. ignoreReversedGraphics Whether Graphics facing away from the raycaster are checked for raycasts. public bool ignoreReversedGraphics { get; set; } Property Value bool renderOrderPriority Priority of the raycaster based upon render order. public override int renderOrderPriority { get; } Property Value int The renderOrder priority. sortOrderPriority Priority of the raycaster based upon sort order. public override int sortOrderPriority { get; } Property Value int The sortOrder priority. Methods Raycast(PointerEventData, List<RaycastResult>) Perform the raycast against the list of graphics associated with the Canvas. public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList) Parameters eventData PointerEventData Current event data resultAppendList List<RaycastResult> List of hit objects to append new results to."
  },
  "api/UnityEngine.UI.GraphicRegistry.html": {
    "href": "api/UnityEngine.UI.GraphicRegistry.html",
    "title": "Class GraphicRegistry | Snapshot",
    "keywords": "Class GraphicRegistry Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Registry which maps a Graphic to the canvas it belongs to. public class GraphicRegistry Inheritance object GraphicRegistry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GraphicRegistry() protected GraphicRegistry() Properties instance The singleton instance of the GraphicRegistry. Creates a new instance if it does not exist. public static GraphicRegistry instance { get; } Property Value GraphicRegistry Methods DisableGraphicForCanvas(Canvas, Graphic) Disables a Graphic from a Canvas, disabling this association from the registry. public static void DisableGraphicForCanvas(Canvas c, Graphic graphic) Parameters c Canvas The Canvas to dissociate from the Graphic. graphic Graphic The Graphic to dissociate from the Canvas. DisableRaycastGraphicForCanvas(Canvas, Graphic) Disables the raycast for a Graphic from a Canvas, disabling this association from the registry. public static void DisableRaycastGraphicForCanvas(Canvas c, Graphic graphic) Parameters c Canvas The Canvas to dissociate from the Graphic. graphic Graphic The Graphic to dissociate from the Canvas. GetGraphicsForCanvas(Canvas) Retrieves the list of Graphics associated with a Canvas. public static IList<Graphic> GetGraphicsForCanvas(Canvas canvas) Parameters canvas Canvas The Canvas to search Returns IList<Graphic> Returns a list of Graphics. Returns an empty list if no Graphics are associated with the specified Canvas. GetRaycastableGraphicsForCanvas(Canvas) Retrieves the list of Graphics that are raycastable and associated with a Canvas. public static IList<Graphic> GetRaycastableGraphicsForCanvas(Canvas canvas) Parameters canvas Canvas The Canvas to search Returns IList<Graphic> Returns a list of Graphics. Returns an empty list if no Graphics are associated with the specified Canvas. RegisterGraphicForCanvas(Canvas, Graphic) Associates a Graphic with a Canvas and stores this association in the registry. public static void RegisterGraphicForCanvas(Canvas c, Graphic graphic) Parameters c Canvas The canvas being associated with the Graphic. graphic Graphic The Graphic being associated with the Canvas. RegisterRaycastGraphicForCanvas(Canvas, Graphic) Associates a raycastable Graphic with a Canvas and stores this association in the registry. public static void RegisterRaycastGraphicForCanvas(Canvas c, Graphic graphic) Parameters c Canvas The canvas being associated with the Graphic. graphic Graphic The Graphic being associated with the Canvas. UnregisterGraphicForCanvas(Canvas, Graphic) Dissociates a Graphic from a Canvas, removing this association from the registry. public static void UnregisterGraphicForCanvas(Canvas c, Graphic graphic) Parameters c Canvas The Canvas to dissociate from the Graphic. graphic Graphic The Graphic to dissociate from the Canvas. UnregisterRaycastGraphicForCanvas(Canvas, Graphic) Dissociates a Graphic from a Canvas, removing this association from the registry. public static void UnregisterRaycastGraphicForCanvas(Canvas c, Graphic graphic) Parameters c Canvas The Canvas to dissociate from the Graphic. graphic Graphic The Graphic to dissociate from the Canvas."
  },
  "api/UnityEngine.UI.GridLayoutGroup.Axis.html": {
    "href": "api/UnityEngine.UI.GridLayoutGroup.Axis.html",
    "title": "Enum GridLayoutGroup.Axis | Snapshot",
    "keywords": "Enum GridLayoutGroup.Axis Namespace UnityEngine.UI Assembly UnityEngine.UI.dll The grid axis we are looking at. public enum GridLayoutGroup.Axis Fields Horizontal = 0 Horizontal axis Vertical = 1 Vertical axis. Remarks As the storage is a [][] we make access easier by passing a axis."
  },
  "api/UnityEngine.UI.GridLayoutGroup.Constraint.html": {
    "href": "api/UnityEngine.UI.GridLayoutGroup.Constraint.html",
    "title": "Enum GridLayoutGroup.Constraint | Snapshot",
    "keywords": "Enum GridLayoutGroup.Constraint Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Constraint type on either the number of columns or rows. public enum GridLayoutGroup.Constraint Fields FixedColumnCount = 1 Constrain the number of columns to a specified number. FixedRowCount = 2 Constraint the number of rows to a specified number. Flexible = 0 Don't constrain the number of rows or columns."
  },
  "api/UnityEngine.UI.GridLayoutGroup.Corner.html": {
    "href": "api/UnityEngine.UI.GridLayoutGroup.Corner.html",
    "title": "Enum GridLayoutGroup.Corner | Snapshot",
    "keywords": "Enum GridLayoutGroup.Corner Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Which corner is the starting corner for the grid. public enum GridLayoutGroup.Corner Fields LowerLeft = 2 Lower Left corner. LowerRight = 3 Lower Right corner. UpperLeft = 0 Upper Left corner. UpperRight = 1 Upper Right corner."
  },
  "api/UnityEngine.UI.GridLayoutGroup.html": {
    "href": "api/UnityEngine.UI.GridLayoutGroup.html",
    "title": "Class GridLayoutGroup | Snapshot",
    "keywords": "Class GridLayoutGroup Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"Layout/Grid Layout Group\", 152)] public class GridLayoutGroup : LayoutGroup, ILayoutElement, ILayoutGroup, ILayoutController Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour LayoutGroup GridLayoutGroup Implements ILayoutElement ILayoutGroup ILayoutController Inherited Members LayoutGroup.m_Padding LayoutGroup.padding LayoutGroup.m_ChildAlignment LayoutGroup.childAlignment LayoutGroup.rectTransform LayoutGroup.m_Tracker LayoutGroup.rectChildren LayoutGroup.minWidth LayoutGroup.preferredWidth LayoutGroup.flexibleWidth LayoutGroup.minHeight LayoutGroup.preferredHeight LayoutGroup.flexibleHeight LayoutGroup.layoutPriority LayoutGroup.OnEnable() LayoutGroup.OnDisable() LayoutGroup.OnDidApplyAnimationProperties() LayoutGroup.GetTotalMinSize(int) LayoutGroup.GetTotalPreferredSize(int) LayoutGroup.GetTotalFlexibleSize(int) LayoutGroup.GetStartOffset(int, float) LayoutGroup.GetAlignmentOnAxis(int) LayoutGroup.SetLayoutInputForAxis(float, float, float, int) LayoutGroup.SetChildAlongAxis(RectTransform, int, float) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, int, float, float) LayoutGroup.SetChildAlongAxis(RectTransform, int, float, float) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, int, float, float, float) LayoutGroup.OnRectTransformDimensionsChange() LayoutGroup.OnTransformChildrenChanged() LayoutGroup.SetProperty<T>(ref T, T) LayoutGroup.SetDirty() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GridLayoutGroup() protected GridLayoutGroup() Fields m_CellSize [SerializeField] protected Vector2 m_CellSize Field Value Vector2 m_Constraint [SerializeField] protected GridLayoutGroup.Constraint m_Constraint Field Value GridLayoutGroup.Constraint m_ConstraintCount [SerializeField] protected int m_ConstraintCount Field Value int m_Spacing [SerializeField] protected Vector2 m_Spacing Field Value Vector2 m_StartAxis [SerializeField] protected GridLayoutGroup.Axis m_StartAxis Field Value GridLayoutGroup.Axis m_StartCorner [SerializeField] protected GridLayoutGroup.Corner m_StartCorner Field Value GridLayoutGroup.Corner Properties cellSize The size to use for each cell in the grid. public Vector2 cellSize { get; set; } Property Value Vector2 constraint Which constraint to use for the GridLayoutGroup. public GridLayoutGroup.Constraint constraint { get; set; } Property Value GridLayoutGroup.Constraint Remarks Specifying a constraint can make the GridLayoutGroup work better in conjunction with a [[ContentSizeFitter]] component. When GridLayoutGroup is used on a RectTransform with a manually specified size, there's no need to specify a constraint. constraintCount How many cells there should be along the constrained axis. public int constraintCount { get; set; } Property Value int spacing The spacing to use between layout elements in the grid on both axises. public Vector2 spacing { get; set; } Property Value Vector2 startAxis Which axis should cells be placed along first public GridLayoutGroup.Axis startAxis { get; set; } Property Value GridLayoutGroup.Axis Remarks When startAxis is set to horizontal, an entire row will be filled out before proceeding to the next row. When set to vertical, an entire column will be filled out before proceeding to the next column. startCorner Which corner should the first cell be placed in? public GridLayoutGroup.Corner startCorner { get; set; } Property Value GridLayoutGroup.Corner Methods CalculateLayoutInputHorizontal() Called by the layout system to calculate the horizontal layout size. Also see ILayoutElement public override void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Called by the layout system to calculate the vertical layout size. Also see ILayoutElement public override void CalculateLayoutInputVertical() SetLayoutHorizontal() Called by the layout system Also see ILayoutElement public override void SetLayoutHorizontal() SetLayoutVertical() Called by the layout system Also see ILayoutElement public override void SetLayoutVertical()"
  },
  "api/UnityEngine.UI.HorizontalLayoutGroup.html": {
    "href": "api/UnityEngine.UI.HorizontalLayoutGroup.html",
    "title": "Class HorizontalLayoutGroup | Snapshot",
    "keywords": "Class HorizontalLayoutGroup Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"Layout/Horizontal Layout Group\", 150)] public class HorizontalLayoutGroup : HorizontalOrVerticalLayoutGroup, ILayoutElement, ILayoutGroup, ILayoutController Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour LayoutGroup HorizontalOrVerticalLayoutGroup HorizontalLayoutGroup Implements ILayoutElement ILayoutGroup ILayoutController Inherited Members HorizontalOrVerticalLayoutGroup.m_Spacing HorizontalOrVerticalLayoutGroup.spacing HorizontalOrVerticalLayoutGroup.m_ChildForceExpandWidth HorizontalOrVerticalLayoutGroup.childForceExpandWidth HorizontalOrVerticalLayoutGroup.m_ChildForceExpandHeight HorizontalOrVerticalLayoutGroup.childForceExpandHeight HorizontalOrVerticalLayoutGroup.m_ChildControlWidth HorizontalOrVerticalLayoutGroup.childControlWidth HorizontalOrVerticalLayoutGroup.m_ChildControlHeight HorizontalOrVerticalLayoutGroup.childControlHeight HorizontalOrVerticalLayoutGroup.m_ChildScaleWidth HorizontalOrVerticalLayoutGroup.childScaleWidth HorizontalOrVerticalLayoutGroup.m_ChildScaleHeight HorizontalOrVerticalLayoutGroup.childScaleHeight HorizontalOrVerticalLayoutGroup.reverseArrangement HorizontalOrVerticalLayoutGroup.m_ReverseArrangement HorizontalOrVerticalLayoutGroup.CalcAlongAxis(int, bool) HorizontalOrVerticalLayoutGroup.SetChildrenAlongAxis(int, bool) LayoutGroup.m_Padding LayoutGroup.padding LayoutGroup.m_ChildAlignment LayoutGroup.childAlignment LayoutGroup.rectTransform LayoutGroup.m_Tracker LayoutGroup.rectChildren LayoutGroup.minWidth LayoutGroup.preferredWidth LayoutGroup.flexibleWidth LayoutGroup.minHeight LayoutGroup.preferredHeight LayoutGroup.flexibleHeight LayoutGroup.layoutPriority LayoutGroup.OnEnable() LayoutGroup.OnDisable() LayoutGroup.OnDidApplyAnimationProperties() LayoutGroup.GetTotalMinSize(int) LayoutGroup.GetTotalPreferredSize(int) LayoutGroup.GetTotalFlexibleSize(int) LayoutGroup.GetStartOffset(int, float) LayoutGroup.GetAlignmentOnAxis(int) LayoutGroup.SetLayoutInputForAxis(float, float, float, int) LayoutGroup.SetChildAlongAxis(RectTransform, int, float) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, int, float, float) LayoutGroup.SetChildAlongAxis(RectTransform, int, float, float) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, int, float, float, float) LayoutGroup.OnRectTransformDimensionsChange() LayoutGroup.OnTransformChildrenChanged() LayoutGroup.SetProperty<T>(ref T, T) LayoutGroup.SetDirty() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HorizontalLayoutGroup() protected HorizontalLayoutGroup() Methods CalculateLayoutInputHorizontal() Called by the layout system. Also see ILayoutElement public override void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Called by the layout system. Also see ILayoutElement public override void CalculateLayoutInputVertical() SetLayoutHorizontal() Called by the layout system. Also see ILayoutElement public override void SetLayoutHorizontal() SetLayoutVertical() Called by the layout system. Also see ILayoutElement public override void SetLayoutVertical()"
  },
  "api/UnityEngine.UI.HorizontalOrVerticalLayoutGroup.html": {
    "href": "api/UnityEngine.UI.HorizontalOrVerticalLayoutGroup.html",
    "title": "Class HorizontalOrVerticalLayoutGroup | Snapshot",
    "keywords": "Class HorizontalOrVerticalLayoutGroup Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Abstract base class for HorizontalLayoutGroup and VerticalLayoutGroup to generalize common functionality. [ExecuteAlways] public abstract class HorizontalOrVerticalLayoutGroup : LayoutGroup, ILayoutElement, ILayoutGroup, ILayoutController Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour LayoutGroup HorizontalOrVerticalLayoutGroup Implements ILayoutElement ILayoutGroup ILayoutController Derived HorizontalLayoutGroup VerticalLayoutGroup Inherited Members LayoutGroup.m_Padding LayoutGroup.padding LayoutGroup.m_ChildAlignment LayoutGroup.childAlignment LayoutGroup.rectTransform LayoutGroup.m_Tracker LayoutGroup.rectChildren LayoutGroup.CalculateLayoutInputHorizontal() LayoutGroup.CalculateLayoutInputVertical() LayoutGroup.minWidth LayoutGroup.preferredWidth LayoutGroup.flexibleWidth LayoutGroup.minHeight LayoutGroup.preferredHeight LayoutGroup.flexibleHeight LayoutGroup.layoutPriority LayoutGroup.SetLayoutHorizontal() LayoutGroup.SetLayoutVertical() LayoutGroup.OnEnable() LayoutGroup.OnDisable() LayoutGroup.OnDidApplyAnimationProperties() LayoutGroup.GetTotalMinSize(int) LayoutGroup.GetTotalPreferredSize(int) LayoutGroup.GetTotalFlexibleSize(int) LayoutGroup.GetStartOffset(int, float) LayoutGroup.GetAlignmentOnAxis(int) LayoutGroup.SetLayoutInputForAxis(float, float, float, int) LayoutGroup.SetChildAlongAxis(RectTransform, int, float) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, int, float, float) LayoutGroup.SetChildAlongAxis(RectTransform, int, float, float) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, int, float, float, float) LayoutGroup.OnRectTransformDimensionsChange() LayoutGroup.OnTransformChildrenChanged() LayoutGroup.SetProperty<T>(ref T, T) LayoutGroup.SetDirty() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields m_ChildControlHeight [SerializeField] protected bool m_ChildControlHeight Field Value bool m_ChildControlWidth [SerializeField] protected bool m_ChildControlWidth Field Value bool m_ChildForceExpandHeight [SerializeField] protected bool m_ChildForceExpandHeight Field Value bool m_ChildForceExpandWidth [SerializeField] protected bool m_ChildForceExpandWidth Field Value bool m_ChildScaleHeight [SerializeField] protected bool m_ChildScaleHeight Field Value bool m_ChildScaleWidth [SerializeField] protected bool m_ChildScaleWidth Field Value bool m_ReverseArrangement [SerializeField] protected bool m_ReverseArrangement Field Value bool m_Spacing [SerializeField] protected float m_Spacing Field Value float Properties childControlHeight Returns true if the Layout Group controls the heights of its children. Returns false if children control their own heights. public bool childControlHeight { get; set; } Property Value bool Remarks If set to false, the layout group will only affect the positions of the children while leaving the heights untouched. The heights of the children can be set via the respective RectTransforms in this case. If set to true, the heights of the children are automatically driven by the layout group according to their respective minimum, preferred, and flexible heights. This is useful if the heights of the children should change depending on how much space is available.In this case the height of each child cannot be set manually in the RectTransform, but the minimum, preferred and flexible height for each child can be controlled by adding a LayoutElement component to it. childControlWidth Returns true if the Layout Group controls the widths of its children. Returns false if children control their own widths. public bool childControlWidth { get; set; } Property Value bool Remarks If set to false, the layout group will only affect the positions of the children while leaving the widths untouched. The widths of the children can be set via the respective RectTransforms in this case. If set to true, the widths of the children are automatically driven by the layout group according to their respective minimum, preferred, and flexible widths. This is useful if the widths of the children should change depending on how much space is available.In this case the width of each child cannot be set manually in the RectTransform, but the minimum, preferred and flexible width for each child can be controlled by adding a LayoutElement component to it. childForceExpandHeight Whether to force the children to expand to fill additional available vertical space. public bool childForceExpandHeight { get; set; } Property Value bool childForceExpandWidth Whether to force the children to expand to fill additional available horizontal space. public bool childForceExpandWidth { get; set; } Property Value bool childScaleHeight Whether to use the y scale of each child when calculating its height. public bool childScaleHeight { get; set; } Property Value bool childScaleWidth Whether to use the x scale of each child when calculating its width. public bool childScaleWidth { get; set; } Property Value bool reverseArrangement Whether the order of children objects should be sorted in reverse. public bool reverseArrangement { get; set; } Property Value bool Remarks If False the first child object will be positioned first. If True the last child object will be positioned first. spacing The spacing to use between layout elements in the layout group. public float spacing { get; set; } Property Value float Methods CalcAlongAxis(int, bool) Calculate the layout element properties for this layout element along the given axis. protected void CalcAlongAxis(int axis, bool isVertical) Parameters axis int The axis to calculate for. 0 is horizontal and 1 is vertical. isVertical bool Is this group a vertical group? SetChildrenAlongAxis(int, bool) Set the positions and sizes of the child layout elements for the given axis. protected void SetChildrenAlongAxis(int axis, bool isVertical) Parameters axis int The axis to handle. 0 is horizontal and 1 is vertical. isVertical bool Is this group a vertical group?"
  },
  "api/UnityEngine.UI.ICanvasElement.html": {
    "href": "api/UnityEngine.UI.ICanvasElement.html",
    "title": "Interface ICanvasElement | Snapshot",
    "keywords": "Interface ICanvasElement Namespace UnityEngine.UI Assembly UnityEngine.UI.dll This is an element that can live on a Canvas. public interface ICanvasElement Properties transform Get the transform associated with the ICanvasElement. Transform transform { get; } Property Value Transform Methods GraphicUpdateComplete() Callback sent when this ICanvasElement has completed Graphic rebuild. void GraphicUpdateComplete() IsDestroyed() Used if the native representation has been destroyed. bool IsDestroyed() Returns bool Return true if the element is considered destroyed. LayoutComplete() Callback sent when this ICanvasElement has completed layout. void LayoutComplete() Rebuild(CanvasUpdate) Rebuild the element for the given stage. void Rebuild(CanvasUpdate executing) Parameters executing CanvasUpdate The current CanvasUpdate stage being rebuild."
  },
  "api/UnityEngine.UI.IClippable.html": {
    "href": "api/UnityEngine.UI.IClippable.html",
    "title": "Interface IClippable | Snapshot",
    "keywords": "Interface IClippable Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Interface for elements that can be clipped if they are under an IClipper public interface IClippable Properties gameObject GameObject of the IClippable object GameObject gameObject { get; } Property Value GameObject rectTransform The RectTransform of the clippable. RectTransform rectTransform { get; } Property Value RectTransform Methods Cull(Rect, bool) Clip and cull the IClippable given a specific clipping rect void Cull(Rect clipRect, bool validRect) Parameters clipRect Rect The Rectangle in which to clip against. validRect bool Is the Rect valid. If not then the rect has 0 size. RecalculateClipping() Will be called when the state of a parent IClippable changed. void RecalculateClipping() SetClipRect(Rect, bool) Set the clip rect for the IClippable. void SetClipRect(Rect value, bool validRect) Parameters value Rect The Rectangle for the clipping validRect bool Is the rect valid. SetClipSoftness(Vector2) Set the clip softness for the IClippable. The softness is a linear alpha falloff over clipSoftness pixels. void SetClipSoftness(Vector2 clipSoftness) Parameters clipSoftness Vector2 The number of pixels to apply the softness to"
  },
  "api/UnityEngine.UI.IClipper.html": {
    "href": "api/UnityEngine.UI.IClipper.html",
    "title": "Interface IClipper | Snapshot",
    "keywords": "Interface IClipper Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Interface that can be used to recieve clipping callbacks as part of the canvas update loop. public interface IClipper Methods PerformClipping() Function to to cull / clip children elements. void PerformClipping() Remarks Called after layout and before Graphic update of the Canvas update loop."
  },
  "api/UnityEngine.UI.ILayoutController.html": {
    "href": "api/UnityEngine.UI.ILayoutController.html",
    "title": "Interface ILayoutController | Snapshot",
    "keywords": "Interface ILayoutController Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Base interface to be implemented by components that control the layout of RectTransforms. public interface ILayoutController Remarks If a component is driving its own RectTransform it should implement the interface [[ILayoutSelfController]]. If a component is driving the RectTransforms of its children, it should implement [[ILayoutGroup]]. The layout system will first invoke SetLayoutHorizontal and then SetLayoutVertical. In the SetLayoutHorizontal call it is valid to call LayoutUtility.GetMinWidth, LayoutUtility.GetPreferredWidth, and LayoutUtility.GetFlexibleWidth on the RectTransform of itself or any of its children. In the SetLayoutVertical call it is valid to call LayoutUtility.GetMinHeight, LayoutUtility.GetPreferredHeight, and LayoutUtility.GetFlexibleHeight on the RectTransform of itself or any of its children. The component may use this information to determine the width and height to use for its own RectTransform or the RectTransforms of its children. Methods SetLayoutHorizontal() Callback invoked by the auto layout system which handles horizontal aspects of the layout. void SetLayoutHorizontal() SetLayoutVertical() Callback invoked by the auto layout system which handles vertical aspects of the layout. void SetLayoutVertical()"
  },
  "api/UnityEngine.UI.ILayoutElement.html": {
    "href": "api/UnityEngine.UI.ILayoutElement.html",
    "title": "Interface ILayoutElement | Snapshot",
    "keywords": "Interface ILayoutElement Namespace UnityEngine.UI Assembly UnityEngine.UI.dll A component is treated as a layout element by the auto layout system if it implements ILayoutElement. public interface ILayoutElement Remarks The layout system will invoke CalculateLayoutInputHorizontal before querying minWidth, preferredWidth, and flexibleWidth. It can potentially save performance if these properties are cached when CalculateLayoutInputHorizontal is invoked, so they don't need to be recalculated every time the properties are queried. The layout system will invoke CalculateLayoutInputVertical before querying minHeight, preferredHeight, and flexibleHeight.It can potentially save performance if these properties are cached when CalculateLayoutInputVertical is invoked, so they don't need to be recalculated every time the properties are queried. The minWidth, preferredWidth, and flexibleWidth properties should not rely on any properties of the RectTransform of the layout element, otherwise the behavior will be non-deterministic. The minHeight, preferredHeight, and flexibleHeight properties may rely on horizontal aspects of the RectTransform, such as the width or the X component of the position. Any properties of the RectTransforms on child layout elements may always be relied on. Properties flexibleHeight The extra relative height this layout element should be allocated if there is additional available space. float flexibleHeight { get; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when using UI elements. public class ExampleClass : MonoBehaviour { public Transform MyContentPanel; //Sets the flexible height on on all children in the content panel. public void Start() { //Assign all the children of the content panel to an array. LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>(); //For each child in the array change its LayoutElement's flexible height to 100. foreach (LayoutElement element in myLayoutElements) { element.flexibleHeight = 100f; } } } flexibleWidth The extra relative width this layout element should be allocated if there is additional available space. float flexibleWidth { get; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when using UI elements. public class ExampleClass : MonoBehaviour { public Transform MyContentPanel; //Sets the flexible height on on all children in the content panel. public void Start() { //Assign all the children of the content panel to an array. LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>(); //For each child in the array change its LayoutElement's flexible width to 200. foreach (LayoutElement element in myLayoutElements) { element.flexibleWidth = 200f; } } } Remarks Setting preferredWidth to -1 removed the preferredWidth. layoutPriority The layout priority of this component. int layoutPriority { get; } Property Value int Remarks If multiple components on the same GameObject implement the ILayoutElement interface, the values provided by components that return a higher priority value are given priority. However, values less than zero are ignored. This way a component can override only select properties by leaving the remaning values to be -1 or other values less than zero. minHeight The minimum height this layout element may be allocated. float minHeight { get; } Property Value float minWidth The minimum width this layout element may be allocated. float minWidth { get; } Property Value float preferredHeight The preferred height this layout element should be allocated if there is sufficient space. float preferredHeight { get; } Property Value float Remarks PreferredHeight can be set to -1 to remove the size. preferredWidth The preferred width this layout element should be allocated if there is sufficient space. float preferredWidth { get; } Property Value float Remarks PreferredWidth can be set to -1 to remove the size. Methods CalculateLayoutInputHorizontal() After this method is invoked, layout horizontal input properties should return up-to-date values. Children will already have up-to-date layout horizontal inputs when this methods is called. void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() After this method is invoked, layout vertical input properties should return up-to-date values. Children will already have up-to-date layout vertical inputs when this methods is called. void CalculateLayoutInputVertical()"
  },
  "api/UnityEngine.UI.ILayoutGroup.html": {
    "href": "api/UnityEngine.UI.ILayoutGroup.html",
    "title": "Interface ILayoutGroup | Snapshot",
    "keywords": "Interface ILayoutGroup Namespace UnityEngine.UI Assembly UnityEngine.UI.dll ILayoutGroup is an ILayoutController that should drive the RectTransforms of its children. public interface ILayoutGroup : ILayoutController Inherited Members ILayoutController.SetLayoutHorizontal() ILayoutController.SetLayoutVertical() Remarks ILayoutGroup derives from ILayoutController and requires the same members to be implemented."
  },
  "api/UnityEngine.UI.ILayoutIgnorer.html": {
    "href": "api/UnityEngine.UI.ILayoutIgnorer.html",
    "title": "Interface ILayoutIgnorer | Snapshot",
    "keywords": "Interface ILayoutIgnorer Namespace UnityEngine.UI Assembly UnityEngine.UI.dll A RectTransform will be ignored by the layout system if it has a component which implements ILayoutIgnorer. public interface ILayoutIgnorer Remarks A components that implements ILayoutIgnorer can be used to make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group. Properties ignoreLayout Should this RectTransform be ignored bvy the layout system? bool ignoreLayout { get; } Property Value bool Remarks Setting this property to true will make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group."
  },
  "api/UnityEngine.UI.ILayoutSelfController.html": {
    "href": "api/UnityEngine.UI.ILayoutSelfController.html",
    "title": "Interface ILayoutSelfController | Snapshot",
    "keywords": "Interface ILayoutSelfController Namespace UnityEngine.UI Assembly UnityEngine.UI.dll ILayoutSelfController is an ILayoutController that should drive its own RectTransform. public interface ILayoutSelfController : ILayoutController Inherited Members ILayoutController.SetLayoutHorizontal() ILayoutController.SetLayoutVertical() Examples //This script shows how the GameObject’s own RectTransforms can be changed. //This creates a rectangle on the screen of the scale, positition and rotation you define in the Inspector. //Make sure to set the X and Y scale to be more than 0 to see it using UnityEngine; using UnityEngine.UI; using UnityEngine.EventSystems; public class Example : UIBehaviour, ILayoutSelfController { //Fields in the inspector used to manipulate the RectTransform public Vector3 m_Position; public Vector3 m_Rotation; public Vector2 m_Scale; //This handles horizontal aspects of the layout (derived from ILayoutController) public virtual void SetLayoutHorizontal() { //Move and Rotate the RectTransform appropriately UpdateRectTransform(); } //This handles vertical aspects of the layout public virtual void SetLayoutVertical() { //Move and Rotate the RectTransform appropriately UpdateRectTransform(); } //This tells when there is a change in the inspector #if UNITY_EDITOR protected override void OnValidate() { Debug.Log(\"Validate\"); //Update the RectTransform position, rotation and scale UpdateRectTransform(); } #endif //This tells when there has been a change to the RectTransform's settings in the inspector protected override void OnRectTransformDimensionsChange() { //Update the RectTransform position, rotation and scale UpdateRectTransform(); } void UpdateRectTransform() { //Fetch the RectTransform from the GameObject RectTransform rectTransform = GetComponent<RectTransform>(); //Change the scale of the RectTransform using the fields in the inspector rectTransform.localScale = new Vector3(m_Scale.x, m_Scale.y, 0); //Change the position and rotation of the RectTransform rectTransform.SetPositionAndRotation(m_Position, Quaternion.Euler(m_Rotation)); } } Remarks The iLayoutSelfController derives from the base controller [[ILayoutController]] and controls the layout of a RectTransform. Use the ILayoutSelfController to manipulate a GameObject’s own RectTransform component, which you attach in the Inspector.Use ILayoutGroup to manipulate RectTransforms belonging to the children of the GameObject. Call ILayoutController.SetLayoutHorizontal to handle horizontal parts of the layout, and call ILayoutController.SetLayoutVertical to handle vertical parts. You can change the height, width, position and rotation of the RectTransform."
  },
  "api/UnityEngine.UI.IMaskable.html": {
    "href": "api/UnityEngine.UI.IMaskable.html",
    "title": "Interface IMaskable | Snapshot",
    "keywords": "Interface IMaskable Namespace UnityEngine.UI Assembly UnityEngine.UI.dll This element is capable of being masked out. public interface IMaskable Methods RecalculateMasking() Recalculate masking for this element and all children elements. void RecalculateMasking() Remarks Use this to update the internal state (recreate materials etc)."
  },
  "api/UnityEngine.UI.IMaterialModifier.html": {
    "href": "api/UnityEngine.UI.IMaterialModifier.html",
    "title": "Interface IMaterialModifier | Snapshot",
    "keywords": "Interface IMaterialModifier Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Use this interface to modify a Material that renders a Graphic. The Material is modified before the it is passed to the CanvasRenderer. public interface IMaterialModifier Remarks When a Graphic sets a material that is passed (in order) to any components on the GameObject that implement IMaterialModifier. This component can modify the material to be used for rendering. Methods GetModifiedMaterial(Material) Perform material modification in this function. Material GetModifiedMaterial(Material baseMaterial) Parameters baseMaterial Material The material that is to be modified Returns Material The modified material."
  },
  "api/UnityEngine.UI.IMeshModifier.html": {
    "href": "api/UnityEngine.UI.IMeshModifier.html",
    "title": "Interface IMeshModifier | Snapshot",
    "keywords": "Interface IMeshModifier Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Interface which allows for the modification of verticies in a Graphic before they are passed to the CanvasRenderer. When a Graphic generates a list of vertices they are passed (in order) to any components on the GameObject that implement IMeshModifier. This component can modify the given Mesh. public interface IMeshModifier Methods ModifyMesh(Mesh) [Obsolete(\"use IMeshModifier.ModifyMesh (VertexHelper verts) instead\", false)] void ModifyMesh(Mesh mesh) Parameters mesh Mesh ModifyMesh(VertexHelper) Call used to modify mesh. Place any custom mesh processing in this function. void ModifyMesh(VertexHelper verts) Parameters verts VertexHelper"
  },
  "api/UnityEngine.UI.Image.FillMethod.html": {
    "href": "api/UnityEngine.UI.Image.FillMethod.html",
    "title": "Enum Image.FillMethod | Snapshot",
    "keywords": "Enum Image.FillMethod Namespace UnityEngine.UI Assembly UnityEngine.UI.dll The possible fill method types for a Filled Image. public enum Image.FillMethod Fields Horizontal = 0 The Image will be filled Horizontally. Radial180 = 3 The Image will be filled Radially with the radial center in one of the edges. Radial360 = 4 The Image will be filled Radially with the radial center at the center. Radial90 = 2 The Image will be filled Radially with the radial center in one of the corners. Vertical = 1 The Image will be filled Vertically."
  },
  "api/UnityEngine.UI.Image.Origin180.html": {
    "href": "api/UnityEngine.UI.Image.Origin180.html",
    "title": "Enum Image.Origin180 | Snapshot",
    "keywords": "Enum Image.Origin180 Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Origin for the Image.FillMethod.Radial180. public enum Image.Origin180 Fields Bottom = 0 Center of the radial at the center of the Bottom edge. Left = 1 Center of the radial at the center of the Left edge. Right = 3 Center of the radial at the center of the Right edge. Top = 2 Center of the radial at the center of the Top edge."
  },
  "api/UnityEngine.UI.Image.Origin360.html": {
    "href": "api/UnityEngine.UI.Image.Origin360.html",
    "title": "Enum Image.Origin360 | Snapshot",
    "keywords": "Enum Image.Origin360 Namespace UnityEngine.UI Assembly UnityEngine.UI.dll One of the points of the Arc for the Image.FillMethod.Radial360. public enum Image.Origin360 Fields Bottom = 0 Arc starting at the center of the Bottom edge. Left = 3 Arc starting at the center of the Left edge. Right = 1 Arc starting at the center of the Right edge. Top = 2 Arc starting at the center of the Top edge."
  },
  "api/UnityEngine.UI.Image.Origin90.html": {
    "href": "api/UnityEngine.UI.Image.Origin90.html",
    "title": "Enum Image.Origin90 | Snapshot",
    "keywords": "Enum Image.Origin90 Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Origin for the Image.FillMethod.Radial90. public enum Image.Origin90 Fields BottomLeft = 0 Radial starting at the Bottom Left corner. BottomRight = 3 Radial starting at the Bottom Right corner. TopLeft = 1 Radial starting at the Top Left corner. TopRight = 2 Radial starting at the Top Right corner."
  },
  "api/UnityEngine.UI.Image.OriginHorizontal.html": {
    "href": "api/UnityEngine.UI.Image.OriginHorizontal.html",
    "title": "Enum Image.OriginHorizontal | Snapshot",
    "keywords": "Enum Image.OriginHorizontal Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Origin for the Image.FillMethod.Horizontal. public enum Image.OriginHorizontal Fields Left = 0 Origin at the Left side. Right = 1 Origin at the Right side."
  },
  "api/UnityEngine.UI.Image.OriginVertical.html": {
    "href": "api/UnityEngine.UI.Image.OriginVertical.html",
    "title": "Enum Image.OriginVertical | Snapshot",
    "keywords": "Enum Image.OriginVertical Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Origin for the Image.FillMethod.Vertical. public enum Image.OriginVertical Fields Bottom = 0 Origin at the Bottom Edge. Top = 1 Origin at the Top Edge."
  },
  "api/UnityEngine.UI.Image.Type.html": {
    "href": "api/UnityEngine.UI.Image.Type.html",
    "title": "Enum Image.Type | Snapshot",
    "keywords": "Enum Image.Type Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Image fill type controls how to display the image. public enum Image.Type Fields Filled = 3 Displays only a portion of the Image. Simple = 0 Displays the full Image Sliced = 1 Displays the Image as a 9-sliced graphic. Tiled = 2 Displays a sliced Sprite with its resizable sections tiled instead of stretched."
  },
  "api/UnityEngine.UI.Image.html": {
    "href": "api/UnityEngine.UI.Image.html",
    "title": "Class Image | Snapshot",
    "keywords": "Class Image Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Image is a textured element in the UI hierarchy. [RequireComponent(typeof(CanvasRenderer))] [AddComponentMenu(\"UI/Image\", 11)] public class Image : MaskableGraphic, ICanvasElement, IClippable, IMaskable, IMaterialModifier, ISerializationCallbackReceiver, ILayoutElement, ICanvasRaycastFilter Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Graphic MaskableGraphic Image Implements ICanvasElement IClippable IMaskable IMaterialModifier ISerializationCallbackReceiver ILayoutElement ICanvasRaycastFilter Inherited Members MaskableGraphic.m_ShouldRecalculateStencil MaskableGraphic.m_MaskMaterial MaskableGraphic.onCullStateChanged MaskableGraphic.maskable MaskableGraphic.isMaskingGraphic MaskableGraphic.m_StencilValue MaskableGraphic.GetModifiedMaterial(Material) MaskableGraphic.Cull(Rect, bool) MaskableGraphic.SetClipRect(Rect, bool) MaskableGraphic.SetClipSoftness(Vector2) MaskableGraphic.OnTransformParentChanged() MaskableGraphic.RecalculateClipping() MaskableGraphic.RecalculateMasking() Graphic.s_DefaultUI Graphic.s_WhiteTexture Graphic.defaultGraphicMaterial Graphic.m_Material Graphic.m_SkipLayoutUpdate Graphic.m_SkipMaterialUpdate Graphic.color Graphic.raycastTarget Graphic.raycastPadding Graphic.m_OnDirtyLayoutCallback Graphic.m_OnDirtyVertsCallback Graphic.m_OnDirtyMaterialCallback Graphic.s_Mesh Graphic.m_CachedMesh Graphic.m_CachedUvs Graphic.useLegacyMeshGeneration Graphic.SetAllDirty() Graphic.SetLayoutDirty() Graphic.SetVerticesDirty() Graphic.SetMaterialDirty() Graphic.SetRaycastDirty() Graphic.OnRectTransformDimensionsChange() Graphic.OnBeforeTransformParentChanged() Graphic.depth Graphic.rectTransform Graphic.canvas Graphic.canvasRenderer Graphic.defaultMaterial Graphic.materialForRendering Graphic.OnDestroy() Graphic.OnCullingChanged() Graphic.Rebuild(CanvasUpdate) Graphic.LayoutComplete() Graphic.GraphicUpdateComplete() Graphic.UpdateGeometry() Graphic.workerMesh Graphic.OnPopulateMesh(Mesh) Graphic.Raycast(Vector2, Camera) Graphic.PixelAdjustPoint(Vector2) Graphic.GetPixelAdjustedRect() Graphic.CrossFadeColor(Color, float, bool, bool) Graphic.CrossFadeColor(Color, float, bool, bool, bool) Graphic.CrossFadeAlpha(float, float, bool) Graphic.RegisterDirtyLayoutCallback(UnityAction) Graphic.UnregisterDirtyLayoutCallback(UnityAction) Graphic.RegisterDirtyVerticesCallback(UnityAction) Graphic.UnregisterDirtyVerticesCallback(UnityAction) Graphic.RegisterDirtyMaterialCallback(UnityAction) Graphic.UnregisterDirtyMaterialCallback(UnityAction) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Image() protected Image() Fields s_ETC1DefaultUI protected static Material s_ETC1DefaultUI Field Value Material Properties alphaHitTestMinimumThreshold The alpha threshold specifies the minimum alpha a pixel must have for the event to considered a \"hit\" on the Image. public float alphaHitTestMinimumThreshold { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Image theButton; // Use this for initialization void Start() { theButton.alphaHitTestMinimumThreshold = 0.5f; } } Remarks Alpha values less than the threshold will cause raycast events to pass through the Image. An value of 1 would cause only fully opaque pixels to register raycast events on the Image. The alpha tested is retrieved from the image sprite only, while the alpha of the Image [[UI.Graphic.color]] is disregarded. alphaHitTestMinimumThreshold defaults to 0; all raycast events inside the Image rectangle are considered a hit. In order for greater than 0 to values to work, the sprite used by the Image must have readable pixels. This can be achieved by enabling Read/Write enabled in the advanced Texture Import Settings for the sprite and disabling atlassing for the sprite. defaultETC1GraphicMaterial Cache of the default Canvas Ericsson Texture Compression 1 (ETC1) and alpha Material. public static Material defaultETC1GraphicMaterial { get; } Property Value Material Remarks Stores the ETC1 supported Canvas Material that is returned from GetETC1SupportedCanvasMaterial(). Note: Always specify the UI/DefaultETC1 Shader in the Always Included Shader list, to use the ETC1 and alpha Material. eventAlphaThreshold [Obsolete(\"eventAlphaThreshold has been deprecated. Use eventMinimumAlphaThreshold instead (UnityUpgradable) -> alphaHitTestMinimumThreshold\")] public float eventAlphaThreshold { get; set; } Property Value float fillAmount Amount of the Image shown when the Image.type is set to Image.Type.Filled. public float fillAmount { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Cooldown : MonoBehaviour { public Image cooldown; public bool coolingDown; public float waitTime = 30.0f; // Update is called once per frame void Update() { if (coolingDown == true) { //Reduce fill amount over 30 seconds cooldown.fillAmount -= 1.0f / waitTime * Time.deltaTime; } } } Remarks 0-1 range with 0 being nothing shown, and 1 being the full Image. fillCenter Whether or not to render the center of a Tiled or Sliced image. public bool fillCenter { get; set; } Property Value bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; public class FillCenterScript : MonoBehaviour { public Image xmasCalenderDoor; // removes the center of the image to reveal the image behind it void OpenCalendarDoor() { xmasCalenderDoor.fillCenter = false; } } Remarks This will only have any effect if the Image.sprite has borders. fillClockwise Whether the Image should be filled clockwise (true) or counter-clockwise (false). public bool fillClockwise { get; set; } Property Value bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class FillClockwiseScript : MonoBehaviour { public Image healthCircle; // This method sets the direction of the health circle. // Clockwise for the Player, Counter Clockwise for the opponent. void SetHealthDirection(GameObject target) { if (target.tag == \"Player\") { healthCircle.fillClockwise = true; } else if (target.tag == \"Opponent\") { healthCircle.fillClockwise = false; } } } Remarks This will only have any effect if the Image.type is set to Image.Type.Filled and Image.fillMethod is set to any of the Radial methods. fillMethod public Image.FillMethod fillMethod { get; set; } Property Value Image.FillMethod fillOrigin Controls the origin point of the Fill process. Value means different things with each fill method. public int fillOrigin { get; set; } Property Value int Examples using UnityEngine; using UnityEngine.UI; using System.Collections; [RequireComponent(typeof(Image))] public class ImageOriginCycle : MonoBehaviour { void OnEnable() { Image image = GetComponent<Image>(); string fillOriginName = \"\"; switch ((Image.FillMethod)image.fillMethod) { case Image.FillMethod.Horizontal: fillOriginName = ((Image.OriginHorizontal)image.fillOrigin).ToString(); break; case Image.FillMethod.Vertical: fillOriginName = ((Image.OriginVertical)image.fillOrigin).ToString(); break; case Image.FillMethod.Radial90: fillOriginName = ((Image.Origin90)image.fillOrigin).ToString(); break; case Image.FillMethod.Radial180: fillOriginName = ((Image.Origin180)image.fillOrigin).ToString(); break; case Image.FillMethod.Radial360: fillOriginName = ((Image.Origin360)image.fillOrigin).ToString(); break; } Debug.Log(string.Format(\"{0} is using {1} fill method with the origin on {2}\", name, image.fillMethod, fillOriginName)); } } Remarks You should cast to the appropriate origin type: Image.OriginHorizontal, Image.OriginVertical, Image.Origin90, Image.Origin180 or Image.Origin360 depending on the Image.Fillmethod. Note: This will only have any effect if the Image.type is set to Image.Type.Filled. flexibleHeight See ILayoutElement.flexibleHeight. public virtual float flexibleHeight { get; } Property Value float flexibleWidth See ILayoutElement.flexibleWidth. public virtual float flexibleWidth { get; } Property Value float hasBorder Whether the Sprite of the image has a border to work with. public bool hasBorder { get; } Property Value bool layoutPriority See ILayoutElement.layoutPriority. public virtual int layoutPriority { get; } Property Value int mainTexture Image's texture comes from the UnityEngine.Image. public override Texture mainTexture { get; } Property Value Texture material The specified Material used by this Image. The default Material is used instead if one wasn't specified. public override Material material { get; set; } Property Value Material minHeight See ILayoutElement.minHeight. public virtual float minHeight { get; } Property Value float minWidth See ILayoutElement.minWidth. public virtual float minWidth { get; } Property Value float multipliedPixelsPerUnit protected float multipliedPixelsPerUnit { get; } Property Value float overrideSprite Set an override sprite to be used for rendering. public Sprite overrideSprite { get; set; } Property Value Sprite Examples Note: The script example below has two buttons. The button textures are loaded from the /Resources/ folder. (They are not used in the shown example). Two sprites are added to the example code. /Example1/ and /Example2/ are functions called by the button OnClick functions. Example1 calls overrideSprite and Example2 sets overrideSprite to null. using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; public class ExampleClass : MonoBehaviour { private Sprite sprite1; private Sprite sprite2; private Image i; public void Start() { i = GetComponent<Image>(); sprite1 = Resources.Load<Sprite>(\"texture1\"); sprite2 = Resources.Load<Sprite>(\"texture2\"); i.sprite = sprite1; } // Called by a Button OnClick() with ExampleClass.Example1 // Uses overrideSprite to make this change temporary public void Example1() { i.overrideSprite = sprite2; } // Called by a Button OnClick() with ExampleClass.Example2 // Removes the overrideSprite which causes the original sprite to be used again. public void Example2() { i.overrideSprite = null; } } Remarks The UI.Image-overrideSprite|overrideSprite variable allows a sprite to have the sprite changed.This change happens immediately.When the changed sprite is no longer needed the sprite can be reverted back to the original version.This happens when the overrideSprite is set to /null/. pixelsPerUnit public float pixelsPerUnit { get; } Property Value float pixelsPerUnitMultiplier Pixel per unit modifier to change how sliced sprites are generated. public float pixelsPerUnitMultiplier { get; set; } Property Value float preferredHeight If there is a sprite being rendered returns the size of that sprite. In the case of a slided or tiled sprite will return the calculated minimum size possible public virtual float preferredHeight { get; } Property Value float preferredWidth If there is a sprite being rendered returns the size of that sprite. In the case of a slided or tiled sprite will return the calculated minimum size possible public virtual float preferredWidth { get; } Property Value float preserveAspect Whether this image should preserve its Sprite aspect ratio. public bool preserveAspect { get; set; } Property Value bool sprite The sprite that is used to render this image. public Sprite sprite { get; set; } Property Value Sprite Examples //Attach this script to an Image GameObject and set its Source Image to the Sprite you would like. //Press the space key to change the Sprite. Remember to assign a second Sprite in this script's section of the Inspector. using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { Image m_Image; //Set this in the Inspector public Sprite m_Sprite; void Start() { //Fetch the Image from the GameObject m_Image = GetComponent<Image>(); } void Update() { //Press space to change the Sprite of the Image if (Input.GetKey(KeyCode.Space)) { m_Image.sprite = m_Sprite; } } } Remarks This returns the source Sprite of an Image. This Sprite can also be viewed and changed in the Inspector as part of an Image component. This can also be used to change the Sprite using a script. type How to display the image. public Image.Type type { get; set; } Property Value Image.Type Remarks Unity can interpret an Image in various different ways depending on the intended purpose. This can be used to display: Whole images stretched to fit the RectTransform of the Image. A 9-sliced image useful for various decorated UI boxes and other rectangular elements. A tiled image with sections of the sprite repeated. As a partial image, useful for wipes, fades, timers, status bars etc. useSpriteMesh Allows you to specify whether the UI Image should be displayed using the mesh generated by the TextureImporter, or by a simple quad mesh. public bool useSpriteMesh { get; set; } Property Value bool Remarks When this property is set to false, the UI Image uses a simple quad. When set to true, the UI Image uses the sprite mesh generated by the [[TextureImporter]]. You should set this to true if you want to use a tightly fitted sprite mesh based on the alpha values in your image. Note: If the texture importer's SpriteMeshType property is set to SpriteMeshType.FullRect, it will only generate a quad, and not a tightly fitted sprite mesh, which means this UI image will be drawn using a quad regardless of the value of this property. Therefore, when enabling this property to use a tightly fitted sprite mesh, you must also ensure the texture importer's SpriteMeshType property is set to Tight. Methods CalculateLayoutInputHorizontal() See ILayoutElement.CalculateLayoutInputHorizontal. public virtual void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() See ILayoutElement.CalculateLayoutInputVertical. public virtual void CalculateLayoutInputVertical() DisableSpriteOptimizations() Disable all automatic sprite optimizations. public void DisableSpriteOptimizations() Remarks When a new Sprite is assigned update optimizations are automatically applied. IsRaycastLocationValid(Vector2, Camera) Calculate if the ray location for this image is a valid hit location. Takes into account a Alpha test threshold. public virtual bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera) Parameters screenPoint Vector2 The screen point to check against eventCamera Camera The camera in which to use to calculate the coordinating position Returns bool If the location is a valid hit or not. Remarks Also see See:ICanvasRaycastFilter. OnAfterDeserialize() See ISerializationCallbackReceiver. public virtual void OnAfterDeserialize() OnBeforeSerialize() See ISerializationCallbackReceiver. public virtual void OnBeforeSerialize() OnCanvasHierarchyChanged() Called when the state of the parent Canvas is changed. protected override void OnCanvasHierarchyChanged() OnDidApplyAnimationProperties() protected override void OnDidApplyAnimationProperties() OnDisable() Clear references. protected override void OnDisable() OnEnable() Mark the Graphic and the canvas as having been changed. protected override void OnEnable() OnPopulateMesh(VertexHelper) Update the UI renderer mesh. protected override void OnPopulateMesh(VertexHelper toFill) Parameters toFill VertexHelper SetNativeSize() Adjusts the image size to make it pixel-perfect. public override void SetNativeSize() Remarks This means setting the Images RectTransform.sizeDelta to be equal to the Sprite dimensions. UpdateMaterial() Update the renderer's material. protected override void UpdateMaterial()"
  },
  "api/UnityEngine.UI.InputField.CharacterValidation.html": {
    "href": "api/UnityEngine.UI.InputField.CharacterValidation.html",
    "title": "Enum InputField.CharacterValidation | Snapshot",
    "keywords": "Enum InputField.CharacterValidation Namespace UnityEngine.UI Assembly UnityEngine.UI.dll The type of characters that are allowed to be added to the string. public enum InputField.CharacterValidation Fields Alphanumeric = 3 Allows letters A-Z, a-z and numbers 0-9. Decimal = 2 Allows decimal numbers (positive or negative). EmailAddress = 5 Allows the characters that are allowed in an email address. Integer = 1 Allow whole numbers (positive or negative). Characters 0-9 and - (dash / minus sign) are allowed. The dash is only allowed as the first character. Name = 4 Only allow names and enforces capitalization. None = 0 No validation. Any input is valid. Remarks Note that the character validation does not validate the entire string as being valid or not. It only does validation on a per-character level, resulting in the typed character either being added to the string or not"
  },
  "api/UnityEngine.UI.InputField.ContentType.html": {
    "href": "api/UnityEngine.UI.InputField.ContentType.html",
    "title": "Enum InputField.ContentType | Snapshot",
    "keywords": "Enum InputField.ContentType Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Setting the content type acts as a shortcut for setting a combination of InputType, CharacterValidation, LineType, and TouchScreenKeyboardType public enum InputField.ContentType Fields Alphanumeric = 4 Allows letters A-Z, a-z and numbers 0-9. Autocorrected = 1 Allows all input and performs auto-correction on platforms that support it. Custom = 9 Custom types that allows user-defined settings. DecimalNumber = 3 Allows decimal numbers (positive or negative). EmailAddress = 6 The input is used for typing in an email address. IntegerNumber = 2 Allow whole numbers (positive or negative). Name = 5 The InputField is used for typing in a name, and enforces capitalization of the first letter of each word. Note that the user can circumvent the first letter capitalization rules by deleting automatically-capitalized letters. Password = 7 Allows all input and hides the typed characters by showing them as asterisks characters. Pin = 8 Allows integer numbers and hides the typed characters by showing them as asterisks characters. Standard = 0 Allows all input. Remarks The ContentType affects character validation, keyboard type used (on platforms with on-screen keyboards), whether the InputField accepts multiple lines, and whether the text is autocorrected (on platforms that offer input auto-correction) or is treated as a password where the characters are not shown directly."
  },
  "api/UnityEngine.UI.InputField.EditState.html": {
    "href": "api/UnityEngine.UI.InputField.EditState.html",
    "title": "Enum InputField.EditState | Snapshot",
    "keywords": "Enum InputField.EditState Namespace UnityEngine.UI Assembly UnityEngine.UI.dll protected enum InputField.EditState Fields Continue = 0 Finish = 1"
  },
  "api/UnityEngine.UI.InputField.EndEditEvent.html": {
    "href": "api/UnityEngine.UI.InputField.EndEditEvent.html",
    "title": "Class InputField.EndEditEvent | Snapshot",
    "keywords": "Class InputField.EndEditEvent Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class InputField.EndEditEvent : UnityEvent<string>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<string> InputField.EndEditEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<string>.AddListener(UnityAction<string>) UnityEvent<string>.RemoveListener(UnityAction<string>) UnityEvent<string>.FindMethod_Impl(string, Type) UnityEvent<string>.Invoke(string) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.UI.InputField.InputType.html": {
    "href": "api/UnityEngine.UI.InputField.InputType.html",
    "title": "Enum InputField.InputType | Snapshot",
    "keywords": "Enum InputField.InputType Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Type of data expected by the input field mobile keyboard. public enum InputField.InputType Fields AutoCorrect = 1 The mobile autocorrect keyboard. Password = 2 The mobile password keyboard. Standard = 0 The standard mobile keyboard"
  },
  "api/UnityEngine.UI.InputField.LineType.html": {
    "href": "api/UnityEngine.UI.InputField.LineType.html",
    "title": "Enum InputField.LineType | Snapshot",
    "keywords": "Enum InputField.LineType Namespace UnityEngine.UI Assembly UnityEngine.UI.dll The LineType is used to describe the behavior of the InputField. public enum InputField.LineType Fields MultiLineNewline = 2 Is a multiline InputField with vertical scrolling and overflow. Pressing the return key will insert a new line character. MultiLineSubmit = 1 Is a multiline InputField with vertical scrolling and overflow. Pressing the return key will submit. SingleLine = 0 Only allows 1 line to be entered. Has horizontal scrolling and no word wrap. Pressing enter will submit the InputField."
  },
  "api/UnityEngine.UI.InputField.OnChangeEvent.html": {
    "href": "api/UnityEngine.UI.InputField.OnChangeEvent.html",
    "title": "Class InputField.OnChangeEvent | Snapshot",
    "keywords": "Class InputField.OnChangeEvent Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class InputField.OnChangeEvent : UnityEvent<string>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<string> InputField.OnChangeEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<string>.AddListener(UnityAction<string>) UnityEvent<string>.RemoveListener(UnityAction<string>) UnityEvent<string>.FindMethod_Impl(string, Type) UnityEvent<string>.Invoke(string) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.UI.InputField.OnValidateInput.html": {
    "href": "api/UnityEngine.UI.InputField.OnValidateInput.html",
    "title": "Delegate InputField.OnValidateInput | Snapshot",
    "keywords": "Delegate InputField.OnValidateInput Namespace UnityEngine.UI Assembly UnityEngine.UI.dll public delegate char InputField.OnValidateInput(string text, int charIndex, char addedChar) Parameters text string charIndex int addedChar char Returns char"
  },
  "api/UnityEngine.UI.InputField.SubmitEvent.html": {
    "href": "api/UnityEngine.UI.InputField.SubmitEvent.html",
    "title": "Class InputField.SubmitEvent | Snapshot",
    "keywords": "Class InputField.SubmitEvent Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class InputField.SubmitEvent : UnityEvent<string>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<string> InputField.SubmitEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<string>.AddListener(UnityAction<string>) UnityEvent<string>.RemoveListener(UnityAction<string>) UnityEvent<string>.FindMethod_Impl(string, Type) UnityEvent<string>.Invoke(string) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.UI.InputField.html": {
    "href": "api/UnityEngine.UI.InputField.html",
    "title": "Class InputField | Snapshot",
    "keywords": "Class InputField Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Turn a simple label into a interactable input field. [AddComponentMenu(\"UI/Legacy/Input Field\", 103)] public class InputField : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IUpdateSelectedHandler, IBeginDragHandler, IDragHandler, IEndDragHandler, IPointerClickHandler, ISubmitHandler, IEventSystemHandler, ICanvasElement, ILayoutElement Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable InputField Implements IMoveHandler IPointerDownHandler IPointerUpHandler IPointerEnterHandler IPointerExitHandler ISelectHandler IDeselectHandler IUpdateSelectedHandler IBeginDragHandler IDragHandler IEndDragHandler IPointerClickHandler ISubmitHandler IEventSystemHandler ICanvasElement ILayoutElement Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.Awake() Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnDidApplyAnimationProperties() Selectable.OnTransformParentChanged() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.FindSelectable(Vector3) Selectable.FindSelectableOnLeft() Selectable.FindSelectableOnRight() Selectable.FindSelectableOnUp() Selectable.FindSelectableOnDown() Selectable.OnMove(AxisEventData) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.Select() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InputField() protected InputField() Fields m_CaretPosition protected int m_CaretPosition Field Value int m_CaretSelectPosition protected int m_CaretSelectPosition Field Value int m_CaretVisible protected bool m_CaretVisible Field Value bool m_CursorVerts protected UIVertex[] m_CursorVerts Field Value UIVertex[] m_DrawEnd protected int m_DrawEnd Field Value int m_DrawStart protected int m_DrawStart Field Value int m_Keyboard protected TouchScreenKeyboard m_Keyboard Field Value TouchScreenKeyboard m_Mesh [NonSerialized] protected Mesh m_Mesh Field Value Mesh m_Placeholder [SerializeField] protected Graphic m_Placeholder Field Value Graphic m_Text [SerializeField] [Multiline] [FormerlySerializedAs(\"mValue\")] protected string m_Text Field Value string m_TextComponent Text Text used to display the input's value. [SerializeField] [FormerlySerializedAs(\"text\")] protected Text m_TextComponent Field Value Text Properties asteriskChar The character used to hide text in password field. public char asteriskChar { get; set; } Property Value char Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; void Start() { // changes the password symbol. 0 = $, 1 = ! 2 = £ and so on. mainInputField.asteriskChar = \"$!£%&*\"[0]; } } Remarks Not shown in the inspector. cachedInputTextGenerator protected TextGenerator cachedInputTextGenerator { get; } Property Value TextGenerator caretBlinkRate The blinking rate of the input caret, defined as the number of times the blink cycle occurs per second. public float caretBlinkRate { get; set; } Property Value float caretColor The custom caret color used if customCaretColor is set. public Color caretColor { get; set; } Property Value Color caretPosition Get: Returns the focus position as thats the position that moves around even during selection. Set: Set both the anchor and focus position such that a selection doesn't happen public int caretPosition { get; set; } Property Value int caretPositionInternal Current position of the cursor. Getters are public Setters are protected protected int caretPositionInternal { get; set; } Property Value int caretSelectPositionInternal protected int caretSelectPositionInternal { get; set; } Property Value int caretWidth The width of the caret in pixels. public int caretWidth { get; set; } Property Value int characterLimit How many characters the input field is limited to. 0 = infinite. public int characterLimit { get; set; } Property Value int Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public string playerName; void Start() { //Changes the character limit in the main input field. mainInputField.characterLimit = playerName.Length; } } characterValidation The type of validation to perform on a character public InputField.CharacterValidation characterValidation { get; set; } Property Value InputField.CharacterValidation contentType Specifies the type of the input text content. public InputField.ContentType contentType { get; set; } Property Value InputField.ContentType Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public string playerName; void Start() { //Changes the character limit in the main input field. mainInputField.characterLimit = playerName.Length; } } Remarks The ContentType affects character validation, keyboard type used (on platforms with on-screen keyboards), whether the InputField accepts multiple lines, and whether the text is autocorrected (on platforms that offer input auto-correction) or is treated as a password where the characters are not shown directly. customCaretColor Should a custom caret color be used or should the textComponent.color be used. public bool customCaretColor { get; set; } Property Value bool flexibleHeight See ILayoutElement.flexibleHeight. public virtual float flexibleHeight { get; } Property Value float flexibleWidth See ILayoutElement.flexibleWidth. public virtual float flexibleWidth { get; } Property Value float inputType The type of input expected. See InputField.InputType. public InputField.InputType inputType { get; set; } Property Value InputField.InputType isFocused Whether the InputField has focus and whether it is able to process events. public bool isFocused { get; } Property Value bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public GameObject mainInputField; void Update() { //If the input field is focused, change its color to green. if (mainInputField.GetComponent<InputField>().isFocused == true) { mainInputField.GetComponent<Image>().color = Color.green; } } } keyboardType They type of mobile keyboard that will be used. public TouchScreenKeyboardType keyboardType { get; set; } Property Value TouchScreenKeyboardType layoutPriority See ILayoutElement.layoutPriority. public virtual int layoutPriority { get; } Property Value int lineType The LineType used by the InputField. public InputField.LineType lineType { get; set; } Property Value InputField.LineType Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public GameObject mainInputField; //When you press a button, this method is called. public void ChangeInputField(int type) { if (type == 0) { //Change the input field to \"Single Line\" line type. mainInputField.GetComponent<InputField>().lineType = InputField.LineType.SingleLine; } else if (type == 1) { //Change the input field to \"MultiLine Newline\" line type. mainInputField.GetComponent<InputField>().lineType = InputField.LineType.MultiLineNewline; } else if (type == 2) { //Change the input field to \"MultiLine Submit\" line type. mainInputField.GetComponent<InputField>().lineType = InputField.LineType.MultiLineSubmit; } } } mesh protected Mesh mesh { get; } Property Value Mesh minHeight See ILayoutElement.minHeight. public virtual float minHeight { get; } Property Value float minWidth See ILayoutElement.minWidth. public virtual float minWidth { get; } Property Value float multiLine If the input field supports multiple lines. public bool multiLine { get; } Property Value bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public void Update() { //Check to see if the input field is set to allow multiple lines. if (mainInputField.multiLine) { //Set the input field to only allow Single Lines, if it is currently set to allow Multiple lines. mainInputField.lineType = InputField.LineType.SingleLine; //Print to console Debug.Log(\"The main input field is now set to allow single lines only!\"); } } } onEndEdit The Unity Event to call when editing has ended public InputField.EndEditEvent onEndEdit { get; set; } Property Value InputField.EndEditEvent Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; // Checks if there is anything entered into the input field. void LockInput(InputField input) { if (input.text.Length > 0) { Debug.Log(\"Text has been entered\"); } else if (input.text.Length == 0) { Debug.Log(\"Main Input Empty\"); } } public void Start() { //Adds a listener that invokes the \"LockInput\" method when the player finishes editing the main input field. //Passes the main input field into the method when \"LockInput\" is invoked mainInputField.onEndEdit.AddListener(delegate {LockInput(mainInputField); }); } } onSubmit The Unity Event to call when editing has ended public InputField.SubmitEvent onSubmit { get; set; } Property Value InputField.SubmitEvent Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; // Checks if there is anything entered into the input field. void LockInput(InputField input) { if (input.text.Length > 0) { Debug.Log(\"Text has been entered\"); } else if (input.text.Length == 0) { Debug.Log(\"Main Input Empty\"); } } public void Start() { //Adds a listener that invokes the \"LockInput\" method when the player finishes editing the main input field. //Passes the main input field into the method when \"LockInput\" is invoked mainInputField.onSubmit.AddListener(delegate {LockInput(mainInputField); }); } } onValidateInput The function to call to validate the input characters. public InputField.OnValidateInput onValidateInput { get; set; } Property Value InputField.OnValidateInput Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public void Start() { // Sets the MyValidate method to invoke after the input field's default input validation invoke (default validation happens every time a character is entered into the text field.) mainInputField.onValidateInput += delegate(string input, int charIndex, char addedChar) { return MyValidate(addedChar); }; } private char MyValidate(char charToValidate) { //Checks if a dollar sign is entered.... if (charToValidate == '$') { // ... if it is change it to an empty character. charToValidate = '\\0'; } return charToValidate; } } onValueChange [Obsolete(\"onValueChange has been renamed to onValueChanged\")] public InputField.OnChangeEvent onValueChange { get; set; } Property Value InputField.OnChangeEvent onValueChanged Accessor to the OnChangeEvent. public InputField.OnChangeEvent onValueChanged { get; set; } Property Value InputField.OnChangeEvent Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public void Start() { //Adds a listener to the main input field and invokes a method when the value changes. mainInputField.onValueChange.AddListener(delegate {ValueChangeCheck(); }); } // Invoked when the value of the text field changes. public void ValueChangeCheck() { Debug.Log(\"Value Changed\"); } } placeholder This is an optional ‘empty’ graphic to show that the InputField text field is empty. Note that this ‘empty' graphic still displays even when the InputField is selected (that is; when there is focus on it). A placeholder graphic can be used to show subtle hints or make it more obvious that the control is an InputField. public Graphic placeholder { get; set; } Property Value Graphic Remarks If a Text component is used as the placeholder, it's recommended to make the placeholder text look different from the real text of the InputField so they are not easily confused. For example, the placeholder text might be a more subtle color or have lower alpha value. preferredHeight Get the height of all the text if constrained to the height of the RectTransform. public virtual float preferredHeight { get; } Property Value float preferredWidth Get the displayed with of all input characters. public virtual float preferredWidth { get; } Property Value float readOnly Set the InputField to be read only. public bool readOnly { get; set; } Property Value bool Remarks Setting read only allows for highlighting of text without allowing modifications via keyboard. selectionAnchorPosition The beginning point of the selection. public int selectionAnchorPosition { get; set; } Property Value int Remarks When making a selection with a mouse, the anchor is where in the document the mouse button is initially pressed. Get: Returns the beginning position of selection Set: If Input.compositionString is 0 set the fixed position. selectionColor The color of the highlight to show which characters are selected. public Color selectionColor { get; set; } Property Value Color Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; // Changes the color of the highlight that shows what characters are selected. void ChangeSelectionColor() { mainInputField.selectionColor = Color.red; } } selectionFocusPosition The end point of the selection. public int selectionFocusPosition { get; set; } Property Value int Remarks When making a selection with a mouse, the focus is where in the document the mouse button is released. Get: Returns the end position of selection Set: If Input.compositionString is 0 set the variable position. shouldActivateOnSelect Should the inputfield be automatically activated upon selection. public virtual bool shouldActivateOnSelect { get; set; } Property Value bool shouldHideMobileInput Should the mobile keyboard input be hidden. This allows for input to happen with a caret in the InputField instead of a OS input box above the keyboard. public bool shouldHideMobileInput { get; set; } Property Value bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public void Start() { //This setting can be toggled in the inspector. mainInputField.shouldHideMobileInput = true; } } text Input field's current text value. This is not necessarily the same as what is visible on screen. public string text { get; set; } Property Value string Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; public void Start() { mainInputField.text = \"Enter Text Here...\"; } } Remarks Note that null is invalid value for InputField.text. textComponent The Text component that is going to be used to render the text to screen. public Text textComponent { get; set; } Property Value Text touchScreenKeyboard The TouchScreenKeyboard being used to edit the Input Field. public TouchScreenKeyboard touchScreenKeyboard { get; } Property Value TouchScreenKeyboard wasCanceled If the InputField was canceled and will revert back to the original text upon DeactivateInputField. public bool wasCanceled { get; } Property Value bool Methods ActivateInputField() Function to activate the InputField to begin processing Events. public void ActivateInputField() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; public class Example : MonoBehaviour { public InputField mainInputField; // Activate the main input field when the scene starts. void Start() { mainInputField.ActivateInputField(); } } Remarks Will only activate if deactivated. Append(char) Append a character to the input field, taking into account the validation of each character. protected virtual void Append(char input) Parameters input char Character to append. Append(string) Append the specified text to the end of the current text string. Appends character by character testing validation criteria. protected virtual void Append(string input) Parameters input string The String to append. CalculateLayoutInputHorizontal() See ILayoutElement.CalculateLayoutInputHorizontal. public virtual void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() See ILayoutElement.CalculateLayoutInputVertical. public virtual void CalculateLayoutInputVertical() ClampPos(ref int) Clamp a value (by reference) between 0 and the current text length. protected void ClampPos(ref int pos) Parameters pos int The input position to be clampped DeactivateInputField() Function to deactivate the InputField to stop the processing of Events and send OnSubmit if not canceled. public void DeactivateInputField() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public InputField mainInputField; // Deactivates the main input field when the scene starts. void Start() { mainInputField.DeactivateInputField(); } } DoStateTransition(SelectionState, bool) Transition the Selectable to the entered state. protected override void DoStateTransition(Selectable.SelectionState state, bool instant) Parameters state Selectable.SelectionState State to transition to instant bool Should the transition occur instantly. ForceLabelUpdate() Force the label to update immediatly. This will recalculate the positioning of the caret and the visible text. public void ForceLabelUpdate() GetCharacterIndexFromPosition(Vector2) Given an input position in local space on the Text return the index for the selection cursor at this position. protected int GetCharacterIndexFromPosition(Vector2 pos) Parameters pos Vector2 Mouse position. Returns int Character index with in value. GraphicUpdateComplete() See ICanvasElement.GraphicUpdateComplete. Does nothing by default. public virtual void GraphicUpdateComplete() KeyPressed(Event) Process the Event and perform the appropriate action for that key. protected InputField.EditState KeyPressed(Event evt) Parameters evt Event The Event that is currently being processed. Returns InputField.EditState If we should continue processing events or we have hit an end condition. LateUpdate() Update the text based on input. protected virtual void LateUpdate() LayoutComplete() See ICanvasElement.LayoutComplete. Does nothing by default. public virtual void LayoutComplete() MoveTextEnd(bool) Move the caret index to end of text. public void MoveTextEnd(bool shift) Parameters shift bool Only move the selection position to facilate selection MoveTextStart(bool) Move the caret index to start of text. public void MoveTextStart(bool shift) Parameters shift bool Only move the selection position to facilate selection OnBeginDrag(PointerEventData) Capture the OnBeginDrag callback from the EventSystem and ensure we should listen to the drag events to follow. public virtual void OnBeginDrag(PointerEventData eventData) Parameters eventData PointerEventData The data passed by the EventSystem OnDeselect(BaseEventData) What to do when the event system sends a Deselect Event. Defaults to deactivating the inputfield. public override void OnDeselect(BaseEventData eventData) Parameters eventData BaseEventData The data sent by the EventSystem OnDestroy() protected override void OnDestroy() OnDisable() protected override void OnDisable() OnDrag(PointerEventData) If we are able to drag, try and select the character range underneath the bounding rect. public virtual void OnDrag(PointerEventData eventData) Parameters eventData PointerEventData OnEnable() protected override void OnEnable() OnEndDrag(PointerEventData) Capture the OnEndDrag callback from the EventSystem and cancel the listening of drag events. public virtual void OnEndDrag(PointerEventData eventData) Parameters eventData PointerEventData The eventData sent by the EventSystem. OnFocus() Focus the input field initializing properties. protected void OnFocus() Examples //Create an Input Field by going to Create>UI>Input Field. Attach this script to the Input Field GameObject using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { InputField m_InputField; void Start() { //Fetch the Input Field component from the GameObject m_InputField = GetComponent<InputField>(); } void Update() { //Check if the Input Field is in focus and able to alter if (m_InputField.isFocused) { //Change the Color of the Input Field's Image to green m_InputField.GetComponent<Image>().color = Color.green; } } } Remarks Handles what happens after a user selects an InputField. This is a protected property. To return the focus state use InputField.isFocused. To shift focus to another GameObject, use EventSystem.SetSelectedGameObject. A common use of this is allowing the user to type once focussed. Another way is outputting a message when the user clicks on a field(often seen when creating passwords). OnPointerClick(PointerEventData) What to do when the event system sends a pointer click Event public virtual void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData The data on which to process OnPointerDown(PointerEventData) The action to perform when the event system sends a pointer down Event. public override void OnPointerDown(PointerEventData eventData) Parameters eventData PointerEventData OnSelect(BaseEventData) What to do when the event system sends a submit Event. public override void OnSelect(BaseEventData eventData) Parameters eventData BaseEventData The data on which to process OnSubmit(BaseEventData) public virtual void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData OnUpdateSelected(BaseEventData) What to do when the event system sends a Update selected Event. public virtual void OnUpdateSelected(BaseEventData eventData) Parameters eventData BaseEventData The data on which to process. ProcessEvent(Event) Helper function to allow separate events to be processed by the InputField. public void ProcessEvent(Event e) Parameters e Event The Event to process Rebuild(CanvasUpdate) Rebuild the input fields geometry. (caret and highlight). public virtual void Rebuild(CanvasUpdate update) Parameters update CanvasUpdate Which update loop we are in. ScreenToLocal(Vector2) [Obsolete(\"This function is no longer used. Please use RectTransformUtility.ScreenPointToLocalPointInRectangle() instead.\")] public Vector2 ScreenToLocal(Vector2 screen) Parameters screen Vector2 Returns Vector2 SelectAll() Highlight the whole InputField. protected void SelectAll() Remarks Sets the caretPosition to the length of the text and caretSelectPos to 0. SendOnEndEdit() Convenience function to make functionality to send the ::ref::EndEditEvent easier. protected void SendOnEndEdit() SendOnSubmit() Convenience function to make functionality to send the ::ref::SubmitEvent easier. protected void SendOnSubmit() SetTextWithoutNotify(string) Set the current text value of the Input field without invoking onValueChanged. public void SetTextWithoutNotify(string input) Parameters input string Remarks This is not necessarily the same as what is visible on screen. UpdateLabel() Update the Text associated with this input field. protected void UpdateLabel() Validate(string, int, char) Predefined validation functionality for different characterValidation types. protected char Validate(string text, int pos, char ch) Parameters text string The whole text string to validate. pos int The position at which the current character is being inserted. ch char The character that is being inserted Returns char The character that should be inserted."
  },
  "api/UnityEngine.UI.LayoutElement.html": {
    "href": "api/UnityEngine.UI.LayoutElement.html",
    "title": "Class LayoutElement | Snapshot",
    "keywords": "Class LayoutElement Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"Layout/Layout Element\", 140)] [RequireComponent(typeof(RectTransform))] [ExecuteAlways] public class LayoutElement : UIBehaviour, ILayoutElement, ILayoutIgnorer Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour LayoutElement Implements ILayoutElement ILayoutIgnorer Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors LayoutElement() protected LayoutElement() Properties flexibleHeight The extra relative height this layout element should be allocated if there is additional available space. public virtual float flexibleHeight { get; set; } Property Value float flexibleWidth The extra relative width this layout element should be allocated if there is additional available space. public virtual float flexibleWidth { get; set; } Property Value float ignoreLayout Should this RectTransform be ignored by the layout system? public virtual bool ignoreLayout { get; set; } Property Value bool Remarks Setting this property to true will make a parent layout group component not consider this RectTransform part of the group. The RectTransform can then be manually positioned despite being a child GameObject of a layout group. layoutPriority The Priority of layout this element has. public virtual int layoutPriority { get; set; } Property Value int minHeight The minimum height this layout element may be allocated. public virtual float minHeight { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when using UI elements. public class ExampleClass : MonoBehaviour { public Transform MyContentPanel; //Sets the flexible height on on all children in the content panel. public void Start() { //Assign all the children of the content panel to an array. LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>(); //For each child in the array change its LayoutElement's minimum height size to 64. foreach (LayoutElement element in myLayoutElements) { element.minHeight = 64f; } } } minWidth The minimum width this layout element may be allocated. public virtual float minWidth { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when using UI elements. public class ExampleClass : MonoBehaviour { public Transform MyContentPanel; //Sets the flexible height on on all children in the content panel. public void Start() { //Assign all the children of the content panel to an array. LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>(); //For each child in the array change its LayoutElement's minimum width size to 200. foreach (LayoutElement element in myLayoutElements) { element.minWidth = 200f; } } } preferredHeight The preferred height this layout element should be allocated if there is sufficient space. public virtual float preferredHeight { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when using UI elements. public class ExampleClass : MonoBehaviour { public Transform MyContentPanel; //Sets the flexible height on on all children in the content panel. public void Start() { //Assign all the children of the content panel to an array. LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>(); //For each child in the array change its LayoutElement's preferred height size to 100. foreach (LayoutElement element in myLayoutElements) { element.preferredHeight = 100f; } } } preferredWidth The preferred width this layout element should be allocated if there is sufficient space. The preferredWidth can be set to -1 to remove the size. public virtual float preferredWidth { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when using UI elements. public class ExampleClass : MonoBehaviour { public Transform MyContentPanel; //Sets the flexible height on on all children in the content panel. public void Start() { //Assign all the children of the content panel to an array. LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>(); //For each child in the array change its LayoutElement's preferred width size to 250. foreach (LayoutElement element in myLayoutElements) { element.preferredWidth = 250f; } } } Methods CalculateLayoutInputHorizontal() After this method is invoked, layout horizontal input properties should return up-to-date values. Children will already have up-to-date layout horizontal inputs when this methods is called. public virtual void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() After this method is invoked, layout vertical input properties should return up-to-date values. Children will already have up-to-date layout vertical inputs when this methods is called. public virtual void CalculateLayoutInputVertical() OnBeforeTransformParentChanged() protected override void OnBeforeTransformParentChanged() OnDidApplyAnimationProperties() protected override void OnDidApplyAnimationProperties() OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnTransformParentChanged() protected override void OnTransformParentChanged() SetDirty() Mark the LayoutElement as dirty. protected void SetDirty() Remarks This will make the auto layout system process this element on the next layout pass. This method should be called by the LayoutElement whenever a change is made that potentially affects the layout."
  },
  "api/UnityEngine.UI.LayoutGroup.html": {
    "href": "api/UnityEngine.UI.LayoutGroup.html",
    "title": "Class LayoutGroup | Snapshot",
    "keywords": "Class LayoutGroup Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [DisallowMultipleComponent] [ExecuteAlways] [RequireComponent(typeof(RectTransform))] public abstract class LayoutGroup : UIBehaviour, ILayoutElement, ILayoutGroup, ILayoutController Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour LayoutGroup Implements ILayoutElement ILayoutGroup ILayoutController Derived GridLayoutGroup HorizontalOrVerticalLayoutGroup Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors LayoutGroup() protected LayoutGroup() Fields m_ChildAlignment [SerializeField] protected TextAnchor m_ChildAlignment Field Value TextAnchor m_Padding [SerializeField] protected RectOffset m_Padding Field Value RectOffset m_Tracker protected DrivenRectTransformTracker m_Tracker Field Value DrivenRectTransformTracker Properties childAlignment The alignment to use for the child layout elements in the layout group. public TextAnchor childAlignment { get; set; } Property Value TextAnchor Remarks If a layout element does not specify a flexible width or height, its child elements many not use the available space within the layout group. In this case, use the alignment settings to specify how to align child elements within their layout group. flexibleHeight See LayoutElement.flexibleHeight public virtual float flexibleHeight { get; } Property Value float flexibleWidth See LayoutElement.flexibleWidth public virtual float flexibleWidth { get; } Property Value float layoutPriority See LayoutElement.layoutPriority public virtual int layoutPriority { get; } Property Value int minHeight See LayoutElement.minHeight public virtual float minHeight { get; } Property Value float minWidth See LayoutElement.minWidth public virtual float minWidth { get; } Property Value float padding The padding to add around the child layout elements. public RectOffset padding { get; set; } Property Value RectOffset preferredHeight See LayoutElement.preferredHeight public virtual float preferredHeight { get; } Property Value float preferredWidth See LayoutElement.preferredWidth public virtual float preferredWidth { get; } Property Value float rectChildren protected List<RectTransform> rectChildren { get; } Property Value List<RectTransform> rectTransform protected RectTransform rectTransform { get; } Property Value RectTransform Methods CalculateLayoutInputHorizontal() After this method is invoked, layout horizontal input properties should return up-to-date values. Children will already have up-to-date layout horizontal inputs when this methods is called. public virtual void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() After this method is invoked, layout vertical input properties should return up-to-date values. Children will already have up-to-date layout vertical inputs when this methods is called. public abstract void CalculateLayoutInputVertical() GetAlignmentOnAxis(int) Returns the alignment on the specified axis as a fraction where 0 is left/top, 0.5 is middle, and 1 is right/bottom. protected float GetAlignmentOnAxis(int axis) Parameters axis int The axis to get alignment along. 0 is horizontal and 1 is vertical. Returns float The alignment as a fraction where 0 is left/top, 0.5 is middle, and 1 is right/bottom. GetStartOffset(int, float) Returns the calculated position of the first child layout element along the given axis. protected float GetStartOffset(int axis, float requiredSpaceWithoutPadding) Parameters axis int The axis index. 0 is horizontal and 1 is vertical. requiredSpaceWithoutPadding float The total space required on the given axis for all the layout elements including spacing and excluding padding. Returns float The position of the first child along the given axis. GetTotalFlexibleSize(int) The flexible size for the layout group on the given axis. protected float GetTotalFlexibleSize(int axis) Parameters axis int The axis index. 0 is horizontal and 1 is vertical. Returns float The flexible size GetTotalMinSize(int) The min size for the layout group on the given axis. protected float GetTotalMinSize(int axis) Parameters axis int The axis index. 0 is horizontal and 1 is vertical. Returns float The min size GetTotalPreferredSize(int) The preferred size for the layout group on the given axis. protected float GetTotalPreferredSize(int axis) Parameters axis int The axis index. 0 is horizontal and 1 is vertical. Returns float The preferred size. OnDidApplyAnimationProperties() Callback for when properties have been changed by animation. protected override void OnDidApplyAnimationProperties() OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). protected override void OnRectTransformDimensionsChange() OnTransformChildrenChanged() protected virtual void OnTransformChildrenChanged() SetChildAlongAxis(RectTransform, int, float) Set the position and size of a child layout element along the given axis. protected void SetChildAlongAxis(RectTransform rect, int axis, float pos) Parameters rect RectTransform The RectTransform of the child layout element. axis int The axis to set the position and size along. 0 is horizontal and 1 is vertical. pos float The position from the left side or top. SetChildAlongAxis(RectTransform, int, float, float) Set the position and size of a child layout element along the given axis. protected void SetChildAlongAxis(RectTransform rect, int axis, float pos, float size) Parameters rect RectTransform The RectTransform of the child layout element. axis int The axis to set the position and size along. 0 is horizontal and 1 is vertical. pos float The position from the left side or top. size float The size. SetChildAlongAxisWithScale(RectTransform, int, float, float) Set the position and size of a child layout element along the given axis. protected void SetChildAlongAxisWithScale(RectTransform rect, int axis, float pos, float scaleFactor) Parameters rect RectTransform The RectTransform of the child layout element. axis int The axis to set the position and size along. 0 is horizontal and 1 is vertical. pos float The position from the left side or top. scaleFactor float SetChildAlongAxisWithScale(RectTransform, int, float, float, float) Set the position and size of a child layout element along the given axis. protected void SetChildAlongAxisWithScale(RectTransform rect, int axis, float pos, float size, float scaleFactor) Parameters rect RectTransform The RectTransform of the child layout element. axis int The axis to set the position and size along. 0 is horizontal and 1 is vertical. pos float The position from the left side or top. size float The size. scaleFactor float SetDirty() Mark the LayoutGroup as dirty. protected void SetDirty() SetLayoutHorizontal() Callback invoked by the auto layout system which handles horizontal aspects of the layout. public abstract void SetLayoutHorizontal() SetLayoutInputForAxis(float, float, float, int) Used to set the calculated layout properties for the given axis. protected void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis) Parameters totalMin float The min size for the layout group. totalPreferred float The preferred size for the layout group. totalFlexible float The flexible size for the layout group. axis int The axis to set sizes for. 0 is horizontal and 1 is vertical. SetLayoutVertical() Callback invoked by the auto layout system which handles vertical aspects of the layout. public abstract void SetLayoutVertical() SetProperty<T>(ref T, T) Helper method used to set a given property if it has changed. protected void SetProperty<T>(ref T currentValue, T newValue) Parameters currentValue T A reference to the member value. newValue T The new value. Type Parameters T"
  },
  "api/UnityEngine.UI.LayoutRebuilder.html": {
    "href": "api/UnityEngine.UI.LayoutRebuilder.html",
    "title": "Class LayoutRebuilder | Snapshot",
    "keywords": "Class LayoutRebuilder Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Wrapper class for managing layout rebuilding of CanvasElement. public class LayoutRebuilder : ICanvasElement Inheritance object LayoutRebuilder Implements ICanvasElement Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties transform Get the transform associated with the ICanvasElement. public Transform transform { get; } Property Value Transform Methods Equals(object) Does the passed rebuilder point to the same CanvasElement. public override bool Equals(object obj) Parameters obj object The other object to compare Returns bool Are they equal ForceRebuildLayoutImmediate(RectTransform) Forces an immediate rebuild of the layout element and child layout elements affected by the calculations. public static void ForceRebuildLayoutImmediate(RectTransform layoutRoot) Parameters layoutRoot RectTransform The layout element to perform the layout rebuild on. Remarks Normal use of the layout system should not use this method. Instead MarkLayoutForRebuild should be used instead, which triggers a delayed layout rebuild during the next layout pass. The delayed rebuild automatically handles objects in the entire layout hierarchy in the correct order, and prevents multiple recalculations for the same layout elements. However, for special layout calculation needs, ::ref::ForceRebuildLayoutImmediate can be used to get the layout of a sub-tree resolved immediately. This can even be done from inside layout calculation methods such as ILayoutController.SetLayoutHorizontal orILayoutController.SetLayoutVertical. Usage should be restricted to cases where multiple layout passes are unavaoidable despite the extra cost in performance. GetHashCode() public override int GetHashCode() Returns int GraphicUpdateComplete() Callback sent when this ICanvasElement has completed Graphic rebuild. public void GraphicUpdateComplete() IsDestroyed() Has the native representation of this LayoutRebuilder been destroyed? public bool IsDestroyed() Returns bool LayoutComplete() Callback sent when this ICanvasElement has completed layout. public void LayoutComplete() MarkLayoutForRebuild(RectTransform) Mark the given RectTransform as needing it's layout to be recalculated during the next layout pass. public static void MarkLayoutForRebuild(RectTransform rect) Parameters rect RectTransform Rect to rebuild. Rebuild(CanvasUpdate) Rebuild the element for the given stage. public void Rebuild(CanvasUpdate executing) Parameters executing CanvasUpdate The current CanvasUpdate stage being rebuild. ToString() public override string ToString() Returns string"
  },
  "api/UnityEngine.UI.LayoutUtility.html": {
    "href": "api/UnityEngine.UI.LayoutUtility.html",
    "title": "Class LayoutUtility | Snapshot",
    "keywords": "Class LayoutUtility Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Utility functions for querying layout elements for their minimum, preferred, and flexible sizes. public static class LayoutUtility Inheritance object LayoutUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFlexibleHeight(RectTransform) Returns the flexible height of the layout element. public static float GetFlexibleHeight(RectTransform rect) Parameters rect RectTransform The RectTransform of the layout element to query. Returns float Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetFlexibleSize(RectTransform, int) Returns the flexible size of the layout element. public static float GetFlexibleSize(RectTransform rect, int axis) Parameters rect RectTransform The RectTransform of the layout element to query. axis int The axis to query. This can be 0 or 1. Returns float Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetFlexibleWidth(RectTransform) Returns the flexible width of the layout element. public static float GetFlexibleWidth(RectTransform rect) Parameters rect RectTransform The RectTransform of the layout element to query. Returns float Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used GetLayoutProperty(RectTransform, Func<ILayoutElement, float>, float) Gets a calculated layout property for the layout element with the given RectTransform. public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue) Parameters rect RectTransform The RectTransform of the layout element to get a property for. property Func<ILayoutElement, float> The property to calculate. defaultValue float The default value to use if no component on the layout element supplies the given property Returns float The calculated value of the layout property. GetLayoutProperty(RectTransform, Func<ILayoutElement, float>, float, out ILayoutElement) Gets a calculated layout property for the layout element with the given RectTransform. public static float GetLayoutProperty(RectTransform rect, Func<ILayoutElement, float> property, float defaultValue, out ILayoutElement source) Parameters rect RectTransform The RectTransform of the layout element to get a property for. property Func<ILayoutElement, float> The property to calculate. defaultValue float The default value to use if no component on the layout element supplies the given property source ILayoutElement Optional out parameter to get the component that supplied the calculated value. Returns float The calculated value of the layout property. GetMinHeight(RectTransform) Returns the minimum height of the layout element. public static float GetMinHeight(RectTransform rect) Parameters rect RectTransform The RectTransform of the layout element to query. Returns float Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetMinSize(RectTransform, int) Returns the minimum size of the layout element. public static float GetMinSize(RectTransform rect, int axis) Parameters rect RectTransform The RectTransform of the layout element to query. axis int The axis to query. This can be 0 or 1. Returns float Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetMinWidth(RectTransform) Returns the minimum width of the layout element. public static float GetMinWidth(RectTransform rect) Parameters rect RectTransform The RectTransform of the layout element to query. Returns float Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetPreferredHeight(RectTransform) Returns the preferred height of the layout element. public static float GetPreferredHeight(RectTransform rect) Parameters rect RectTransform The RectTransform of the layout element to query. Returns float Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetPreferredSize(RectTransform, int) Returns the preferred size of the layout element. public static float GetPreferredSize(RectTransform rect, int axis) Parameters rect RectTransform The RectTransform of the layout element to query. axis int The axis to query. This can be 0 or 1. Returns float Remarks All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used. GetPreferredWidth(RectTransform) Returns the preferred width of the layout element. public static float GetPreferredWidth(RectTransform rect) Parameters rect RectTransform The RectTransform of the layout element to query. Returns float All components on the GameObject that implement the ILayoutElement are queried. The one with the highest priority which has a value for this setting is used. If multiple componets have this setting and have the same priority, the maximum value out of those is used."
  },
  "api/UnityEngine.UI.Mask.html": {
    "href": "api/UnityEngine.UI.Mask.html",
    "title": "Class Mask | Snapshot",
    "keywords": "Class Mask Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Mask\", 13)] [ExecuteAlways] [RequireComponent(typeof(RectTransform))] [DisallowMultipleComponent] public class Mask : UIBehaviour, ICanvasRaycastFilter, IMaterialModifier Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Mask Implements ICanvasRaycastFilter IMaterialModifier Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Mask() protected Mask() Properties graphic The graphic associated with the Mask. public Graphic graphic { get; } Property Value Graphic rectTransform public RectTransform rectTransform { get; } Property Value RectTransform showMaskGraphic Show the graphic that is associated with the Mask render area. public bool showMaskGraphic { get; set; } Property Value bool Methods GetModifiedMaterial(Material) public virtual Material GetModifiedMaterial(Material baseMaterial) Parameters baseMaterial Material Returns Material IsRaycastLocationValid(Vector2, Camera) Given a point and a camera is the raycast valid. public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) Parameters sp Vector2 Screen position. eventCamera Camera Raycast camera. Returns bool Valid. MaskEnabled() public virtual bool MaskEnabled() Returns bool OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnSiblingGraphicEnabledDisabled() [Obsolete(\"Not used anymore.\")] public virtual void OnSiblingGraphicEnabledDisabled()"
  },
  "api/UnityEngine.UI.MaskUtilities.html": {
    "href": "api/UnityEngine.UI.MaskUtilities.html",
    "title": "Class MaskUtilities | Snapshot",
    "keywords": "Class MaskUtilities Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Mask related utility class. This class provides masking-specific utility functions. public class MaskUtilities Inheritance object MaskUtilities Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FindRootSortOverrideCanvas(Transform) Find a root Canvas. public static Transform FindRootSortOverrideCanvas(Transform start) Parameters start Transform Transform to start the search at going up the hierarchy. Returns Transform Finds either the most root canvas, or the first canvas that overrides sorting. GetRectMaskForClippable(IClippable) Find the correct RectMask2D for a given IClippable. public static RectMask2D GetRectMaskForClippable(IClippable clippable) Parameters clippable IClippable Clippable to search from. Returns RectMask2D The Correct RectMask2D GetRectMasksForClip(RectMask2D, List<RectMask2D>) Search for all RectMask2D that apply to the given RectMask2D (includes self). public static void GetRectMasksForClip(RectMask2D clipper, List<RectMask2D> masks) Parameters clipper RectMask2D Starting clipping object. masks List<RectMask2D> The list of Rect masks GetStencilDepth(Transform, Transform) Find the stencil depth for a given element. public static int GetStencilDepth(Transform transform, Transform stopAfter) Parameters transform Transform The starting transform to search. stopAfter Transform Where the search of parents should stop Returns int What the proper stencil buffer index should be. IsDescendantOrSelf(Transform, Transform) Helper function to determine if the child is a descendant of father or is father. public static bool IsDescendantOrSelf(Transform father, Transform child) Parameters father Transform The transform to compare against. child Transform The starting transform to search up the hierarchy. Returns bool Is child equal to father or is a descendant. Notify2DMaskStateChanged(Component) Notify all IClippables under the given component that they need to recalculate clipping. public static void Notify2DMaskStateChanged(Component mask) Parameters mask Component The object thats changed for whose children should be notified. NotifyStencilStateChanged(Component) Notify all IMaskable under the given component that they need to recalculate masking. public static void NotifyStencilStateChanged(Component mask) Parameters mask Component The object thats changed for whose children should be notified."
  },
  "api/UnityEngine.UI.MaskableGraphic.CullStateChangedEvent.html": {
    "href": "api/UnityEngine.UI.MaskableGraphic.CullStateChangedEvent.html",
    "title": "Class MaskableGraphic.CullStateChangedEvent | Snapshot",
    "keywords": "Class MaskableGraphic.CullStateChangedEvent Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class MaskableGraphic.CullStateChangedEvent : UnityEvent<bool>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<bool> MaskableGraphic.CullStateChangedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<bool>.AddListener(UnityAction<bool>) UnityEvent<bool>.RemoveListener(UnityAction<bool>) UnityEvent<bool>.FindMethod_Impl(string, Type) UnityEvent<bool>.Invoke(bool) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.UI.MaskableGraphic.html": {
    "href": "api/UnityEngine.UI.MaskableGraphic.html",
    "title": "Class MaskableGraphic | Snapshot",
    "keywords": "Class MaskableGraphic Namespace UnityEngine.UI Assembly UnityEngine.UI.dll A Graphic that is capable of being masked out. public abstract class MaskableGraphic : Graphic, ICanvasElement, IClippable, IMaskable, IMaterialModifier Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Graphic MaskableGraphic Implements ICanvasElement IClippable IMaskable IMaterialModifier Derived Image RawImage Text Inherited Members Graphic.s_DefaultUI Graphic.s_WhiteTexture Graphic.defaultGraphicMaterial Graphic.m_Material Graphic.m_SkipLayoutUpdate Graphic.m_SkipMaterialUpdate Graphic.color Graphic.raycastTarget Graphic.raycastPadding Graphic.m_OnDirtyLayoutCallback Graphic.m_OnDirtyVertsCallback Graphic.m_OnDirtyMaterialCallback Graphic.s_Mesh Graphic.m_CachedMesh Graphic.m_CachedUvs Graphic.useLegacyMeshGeneration Graphic.SetAllDirty() Graphic.SetLayoutDirty() Graphic.SetVerticesDirty() Graphic.SetMaterialDirty() Graphic.SetRaycastDirty() Graphic.OnRectTransformDimensionsChange() Graphic.OnBeforeTransformParentChanged() Graphic.depth Graphic.rectTransform Graphic.canvas Graphic.canvasRenderer Graphic.defaultMaterial Graphic.material Graphic.materialForRendering Graphic.mainTexture Graphic.OnDestroy() Graphic.OnCullingChanged() Graphic.Rebuild(CanvasUpdate) Graphic.LayoutComplete() Graphic.GraphicUpdateComplete() Graphic.UpdateMaterial() Graphic.UpdateGeometry() Graphic.workerMesh Graphic.OnPopulateMesh(Mesh) Graphic.OnPopulateMesh(VertexHelper) Graphic.OnDidApplyAnimationProperties() Graphic.SetNativeSize() Graphic.Raycast(Vector2, Camera) Graphic.PixelAdjustPoint(Vector2) Graphic.GetPixelAdjustedRect() Graphic.CrossFadeColor(Color, float, bool, bool) Graphic.CrossFadeColor(Color, float, bool, bool, bool) Graphic.CrossFadeAlpha(float, float, bool) Graphic.RegisterDirtyLayoutCallback(UnityAction) Graphic.UnregisterDirtyLayoutCallback(UnityAction) Graphic.RegisterDirtyVerticesCallback(UnityAction) Graphic.UnregisterDirtyVerticesCallback(UnityAction) Graphic.RegisterDirtyMaterialCallback(UnityAction) Graphic.UnregisterDirtyMaterialCallback(UnityAction) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields m_MaskMaterial [NonSerialized] protected Material m_MaskMaterial Field Value Material m_ShouldRecalculateStencil [NonSerialized] protected bool m_ShouldRecalculateStencil Field Value bool m_StencilValue [NonSerialized] protected int m_StencilValue Field Value int Properties isMaskingGraphic Is this graphic the graphic on the same object as a Mask that is enabled. public bool isMaskingGraphic { get; set; } Property Value bool Remarks If toggled ensure to call MaskUtilities.NotifyStencilStateChanged(this); manually as it changes how stenciles are calculated for this image. maskable Does this graphic allow masking. public bool maskable { get; set; } Property Value bool onCullStateChanged Callback issued when culling changes. public MaskableGraphic.CullStateChangedEvent onCullStateChanged { get; set; } Property Value MaskableGraphic.CullStateChangedEvent Remarks Called whene the culling state of this MaskableGraphic either becomes culled or visible. You can use this to control other elements of your UI as culling happens. Methods Cull(Rect, bool) See IClippable.Cull public virtual void Cull(Rect clipRect, bool validRect) Parameters clipRect Rect validRect bool GetModifiedMaterial(Material) See IMaterialModifier.GetModifiedMaterial public virtual Material GetModifiedMaterial(Material baseMaterial) Parameters baseMaterial Material Returns Material OnCanvasHierarchyChanged() Called when the state of the parent Canvas is changed. protected override void OnCanvasHierarchyChanged() OnDisable() Clear references. protected override void OnDisable() OnEnable() Mark the Graphic and the canvas as having been changed. protected override void OnEnable() OnTransformParentChanged() protected override void OnTransformParentChanged() RecalculateClipping() See IClippable.RecalculateClipping public virtual void RecalculateClipping() RecalculateMasking() See IMaskable.RecalculateMasking public virtual void RecalculateMasking() SetClipRect(Rect, bool) See IClippable.SetClipRect public virtual void SetClipRect(Rect clipRect, bool validRect) Parameters clipRect Rect validRect bool SetClipSoftness(Vector2) Set the clip softness for the IClippable. The softness is a linear alpha falloff over clipSoftness pixels. public virtual void SetClipSoftness(Vector2 clipSoftness) Parameters clipSoftness Vector2 The number of pixels to apply the softness to"
  },
  "api/UnityEngine.UI.Navigation.Mode.html": {
    "href": "api/UnityEngine.UI.Navigation.Mode.html",
    "title": "Enum Navigation.Mode | Snapshot",
    "keywords": "Enum Navigation.Mode Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Flags] public enum Navigation.Mode Fields Automatic = Horizontal | Vertical Automatic navigation. Explicit = 4 Explicit navigation. Horizontal = 1 Horizontal Navigation. None = 0 No navigation is allowed from this object. Vertical = 2 Vertical navigation."
  },
  "api/UnityEngine.UI.Navigation.html": {
    "href": "api/UnityEngine.UI.Navigation.html",
    "title": "Struct Navigation | Snapshot",
    "keywords": "Struct Navigation Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public struct Navigation : IEquatable<Navigation> Implements IEquatable<Navigation> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties defaultNavigation Return a Navigation with sensible default values. public static Navigation defaultNavigation { get; } Property Value Navigation Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; void Start() { //Set the navigation to the default value. (\"Automatic\" is the default value). button.navigation = Navigation.defaultNavigation; } } mode Navigation mode. public Navigation.Mode mode { get; set; } Property Value Navigation.Mode selectOnDown Specify a Selectable UI GameObject to highlight when the down arrow key is pressed. public Selectable selectOnDown { get; set; } Property Value Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class HighlightOnKey : MonoBehaviour { public Button btnSave; public Button btnLoad; public void Start() { // get the Navigation data Navigation navigation = btnLoad.navigation; // switch mode to Explicit to allow for custom assigned behavior navigation.mode = Navigation.Mode.Explicit; // highlight the Save button if the down arrow key is pressed navigation.selectOnDown = btnSave; // reassign the struct data to the button btnLoad.navigation = navigation; } } selectOnLeft Specify a Selectable UI GameObject to highlight when the left arrow key is pressed. public Selectable selectOnLeft { get; set; } Property Value Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class HighlightOnKey : MonoBehaviour { public Button btnSave; public Button btnLoad; public void Start() { // get the Navigation data Navigation navigation = btnLoad.navigation; // switch mode to Explicit to allow for custom assigned behavior navigation.mode = Navigation.Mode.Explicit; // highlight the Save button if the left arrow key is pressed navigation.selectOnLeft = btnSave; // reassign the struct data to the button btnLoad.navigation = navigation; } } selectOnRight Specify a Selectable UI GameObject to highlight when the right arrow key is pressed. public Selectable selectOnRight { get; set; } Property Value Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class HighlightOnKey : MonoBehaviour { public Button btnSave; public Button btnLoad; public void Start() { // get the Navigation data Navigation navigation = btnLoad.navigation; // switch mode to Explicit to allow for custom assigned behavior navigation.mode = Navigation.Mode.Explicit; // highlight the Save button if the right arrow key is pressed navigation.selectOnRight = btnSave; // reassign the struct data to the button btnLoad.navigation = navigation; } } selectOnUp Specify a Selectable UI GameObject to highlight when the Up arrow key is pressed. public Selectable selectOnUp { get; set; } Property Value Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class HighlightOnKey : MonoBehaviour { public Button btnSave; public Button btnLoad; public void Start() { // get the Navigation data Navigation navigation = btnLoad.navigation; // switch mode to Explicit to allow for custom assigned behavior navigation.mode = Navigation.Mode.Explicit; // highlight the Save button if the up arrow key is pressed navigation.selectOnUp = btnSave; // reassign the struct data to the button btnLoad.navigation = navigation; } } wrapAround Enables navigation to wrap around from last to first or first to last element. Will find the furthest element from the current element in the opposite direction of movement. public bool wrapAround { get; set; } Property Value bool Examples Note: If you have a grid of elements and you are on the last element in a row it will not wrap over to the next row it will pick the furthest element in the opposite direction. Methods Equals(Navigation) public bool Equals(Navigation other) Parameters other Navigation Returns bool"
  },
  "api/UnityEngine.UI.Outline.html": {
    "href": "api/UnityEngine.UI.Outline.html",
    "title": "Class Outline | Snapshot",
    "keywords": "Class Outline Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Effects/Outline\", 81)] public class Outline : Shadow, IMeshModifier Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseMeshEffect Shadow Outline Implements IMeshModifier Inherited Members Shadow.effectColor Shadow.effectDistance Shadow.useGraphicAlpha Shadow.ApplyShadowZeroAlloc(List<UIVertex>, Color32, int, int, float, float) Shadow.ApplyShadow(List<UIVertex>, Color32, int, int, float, float) BaseMeshEffect.graphic BaseMeshEffect.OnEnable() BaseMeshEffect.OnDisable() BaseMeshEffect.OnDidApplyAnimationProperties() BaseMeshEffect.ModifyMesh(Mesh) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Outline() protected Outline() Methods ModifyMesh(VertexHelper) Call used to modify mesh. Place any custom mesh processing in this function. public override void ModifyMesh(VertexHelper vh) Parameters vh VertexHelper"
  },
  "api/UnityEngine.UI.PositionAsUV1.html": {
    "href": "api/UnityEngine.UI.PositionAsUV1.html",
    "title": "Class PositionAsUV1 | Snapshot",
    "keywords": "Class PositionAsUV1 Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Effects/Position As UV1\", 82)] public class PositionAsUV1 : BaseMeshEffect, IMeshModifier Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseMeshEffect PositionAsUV1 Implements IMeshModifier Inherited Members BaseMeshEffect.graphic BaseMeshEffect.OnEnable() BaseMeshEffect.OnDisable() BaseMeshEffect.OnDidApplyAnimationProperties() BaseMeshEffect.ModifyMesh(Mesh) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PositionAsUV1() protected PositionAsUV1() Methods ModifyMesh(VertexHelper) Call used to modify mesh. Place any custom mesh processing in this function. public override void ModifyMesh(VertexHelper vh) Parameters vh VertexHelper"
  },
  "api/UnityEngine.UI.RawImage.html": {
    "href": "api/UnityEngine.UI.RawImage.html",
    "title": "Class RawImage | Snapshot",
    "keywords": "Class RawImage Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Displays a Texture2D for the UI System. [RequireComponent(typeof(CanvasRenderer))] [AddComponentMenu(\"UI/Raw Image\", 12)] public class RawImage : MaskableGraphic, ICanvasElement, IClippable, IMaskable, IMaterialModifier Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Graphic MaskableGraphic RawImage Implements ICanvasElement IClippable IMaskable IMaterialModifier Inherited Members MaskableGraphic.m_ShouldRecalculateStencil MaskableGraphic.m_MaskMaterial MaskableGraphic.onCullStateChanged MaskableGraphic.maskable MaskableGraphic.isMaskingGraphic MaskableGraphic.m_StencilValue MaskableGraphic.GetModifiedMaterial(Material) MaskableGraphic.Cull(Rect, bool) MaskableGraphic.SetClipRect(Rect, bool) MaskableGraphic.SetClipSoftness(Vector2) MaskableGraphic.OnEnable() MaskableGraphic.OnDisable() MaskableGraphic.OnTransformParentChanged() MaskableGraphic.OnCanvasHierarchyChanged() MaskableGraphic.RecalculateClipping() MaskableGraphic.RecalculateMasking() Graphic.s_DefaultUI Graphic.s_WhiteTexture Graphic.defaultGraphicMaterial Graphic.m_Material Graphic.m_SkipLayoutUpdate Graphic.m_SkipMaterialUpdate Graphic.color Graphic.raycastTarget Graphic.raycastPadding Graphic.m_OnDirtyLayoutCallback Graphic.m_OnDirtyVertsCallback Graphic.m_OnDirtyMaterialCallback Graphic.s_Mesh Graphic.m_CachedMesh Graphic.m_CachedUvs Graphic.useLegacyMeshGeneration Graphic.SetAllDirty() Graphic.SetLayoutDirty() Graphic.SetVerticesDirty() Graphic.SetMaterialDirty() Graphic.SetRaycastDirty() Graphic.OnRectTransformDimensionsChange() Graphic.OnBeforeTransformParentChanged() Graphic.depth Graphic.rectTransform Graphic.canvas Graphic.canvasRenderer Graphic.defaultMaterial Graphic.material Graphic.materialForRendering Graphic.OnDestroy() Graphic.OnCullingChanged() Graphic.Rebuild(CanvasUpdate) Graphic.LayoutComplete() Graphic.GraphicUpdateComplete() Graphic.UpdateMaterial() Graphic.UpdateGeometry() Graphic.workerMesh Graphic.OnPopulateMesh(Mesh) Graphic.Raycast(Vector2, Camera) Graphic.PixelAdjustPoint(Vector2) Graphic.GetPixelAdjustedRect() Graphic.CrossFadeColor(Color, float, bool, bool) Graphic.CrossFadeColor(Color, float, bool, bool, bool) Graphic.CrossFadeAlpha(float, float, bool) Graphic.RegisterDirtyLayoutCallback(UnityAction) Graphic.UnregisterDirtyLayoutCallback(UnityAction) Graphic.RegisterDirtyVerticesCallback(UnityAction) Graphic.UnregisterDirtyVerticesCallback(UnityAction) Graphic.RegisterDirtyMaterialCallback(UnityAction) Graphic.UnregisterDirtyMaterialCallback(UnityAction) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks If you don't have or don't wish to create an atlas, you can simply use this script to draw a texture. Keep in mind though that this will create an extra draw call with each RawImage present, so it's best to use it only for backgrounds or temporary visible graphics. Constructors RawImage() protected RawImage() Properties mainTexture Returns the texture used to draw this Graphic. public override Texture mainTexture { get; } Property Value Texture texture The RawImage's texture to be used. public Texture texture { get; set; } Property Value Texture Examples //Create a new RawImage by going to Create>UI>Raw Image in the hierarchy. //Attach this script to the RawImage GameObject. using UnityEngine; using UnityEngine.UI; public class RawImageTexture : MonoBehaviour { RawImage m_RawImage; //Select a Texture in the Inspector to change to public Texture m_Texture; void Start() { //Fetch the RawImage component from the GameObject m_RawImage = GetComponent<RawImage>(); //Change the Texture to be the one you define in the Inspector m_RawImage.texture = m_Texture; } } Remarks Use this to alter or return the Texture the RawImage displays. The Raw Image can display any Texture whereas an Image component can only show a Sprite Texture. Note : Keep in mind that using a RawImage creates an extra draw call with each RawImage present, so it's best to use it only for backgrounds or temporary visible graphics.Note: Keep in mind that using a RawImage creates an extra draw call with each RawImage present, so it's best to use it only for backgrounds or temporary visible graphics. uvRect UV rectangle used by the texture. public Rect uvRect { get; set; } Property Value Rect Methods OnDidApplyAnimationProperties() protected override void OnDidApplyAnimationProperties() OnPopulateMesh(VertexHelper) Callback function when a UI element needs to generate vertices. Fills the vertex buffer data. protected override void OnPopulateMesh(VertexHelper vh) Parameters vh VertexHelper VertexHelper utility. Remarks Used by Text, UI.Image, and RawImage for example to generate vertices specific to their use case. SetNativeSize() Adjust the scale of the Graphic to make it pixel-perfect. public override void SetNativeSize() Remarks This means setting the RawImage's RectTransform.sizeDelta to be equal to the Texture dimensions."
  },
  "api/UnityEngine.UI.RectMask2D.html": {
    "href": "api/UnityEngine.UI.RectMask2D.html",
    "title": "Class RectMask2D | Snapshot",
    "keywords": "Class RectMask2D Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Rect Mask 2D\", 14)] [ExecuteAlways] [DisallowMultipleComponent] [RequireComponent(typeof(RectTransform))] public class RectMask2D : UIBehaviour, IClipper, ICanvasRaycastFilter Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour RectMask2D Implements IClipper ICanvasRaycastFilter Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RectMask2D() protected RectMask2D() Properties canvasRect Get the Rect for the mask in canvas space. public Rect canvasRect { get; } Property Value Rect padding Padding to be applied to the masking X = Left Y = Bottom Z = Right W = Top public Vector4 padding { get; set; } Property Value Vector4 rectTransform Helper function to get the RectTransform for the mask. public RectTransform rectTransform { get; } Property Value RectTransform softness The softness to apply to the horizontal and vertical axis. public Vector2Int softness { get; set; } Property Value Vector2Int Methods AddClippable(IClippable) Add a IClippable to be tracked by the mask. public void AddClippable(IClippable clippable) Parameters clippable IClippable Add the clippable object for this mask IsRaycastLocationValid(Vector2, Camera) Given a point and a camera is the raycast valid. public virtual bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera) Parameters sp Vector2 Screen position. eventCamera Camera Raycast camera. Returns bool Valid. OnCanvasHierarchyChanged() Called when the state of the parent Canvas is changed. protected override void OnCanvasHierarchyChanged() OnDestroy() protected override void OnDestroy() OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnTransformParentChanged() protected override void OnTransformParentChanged() PerformClipping() Function to to cull / clip children elements. public virtual void PerformClipping() Remarks Called after layout and before Graphic update of the Canvas update loop. RemoveClippable(IClippable) Remove an IClippable from being tracked by the mask. public void RemoveClippable(IClippable clippable) Parameters clippable IClippable Remove the clippable object from this mask UpdateClipSoftness() public virtual void UpdateClipSoftness()"
  },
  "api/UnityEngine.UI.ScrollRect.MovementType.html": {
    "href": "api/UnityEngine.UI.ScrollRect.MovementType.html",
    "title": "Enum ScrollRect.MovementType | Snapshot",
    "keywords": "Enum ScrollRect.MovementType Namespace UnityEngine.UI Assembly UnityEngine.UI.dll A setting for which behavior to use when content moves beyond the confines of its container. public enum ScrollRect.MovementType Fields Clamped = 2 Clamped movement. The content can not be moved beyond its container. Elastic = 1 Elastic movement. The content is allowed to temporarily move beyond the container, but is pulled back elastically. Unrestricted = 0 Unrestricted movement. The content can move forever. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Scrollbar newScrollBar; //Called when a button is pressed public void Example(int option) { if (option == 0) { myScrollRect.movementType = ScrollRect.MovementType.Clamped; } else if (option == 1) { myScrollRect.movementType = ScrollRect.MovementType.Elastic; } else if (option == 2) { myScrollRect.movementType = ScrollRect.MovementType.Unrestricted; } } }"
  },
  "api/UnityEngine.UI.ScrollRect.ScrollRectEvent.html": {
    "href": "api/UnityEngine.UI.ScrollRect.ScrollRectEvent.html",
    "title": "Class ScrollRect.ScrollRectEvent | Snapshot",
    "keywords": "Class ScrollRect.ScrollRectEvent Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class ScrollRect.ScrollRectEvent : UnityEvent<Vector2>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<Vector2> ScrollRect.ScrollRectEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<Vector2>.AddListener(UnityAction<Vector2>) UnityEvent<Vector2>.RemoveListener(UnityAction<Vector2>) UnityEvent<Vector2>.FindMethod_Impl(string, Type) UnityEvent<Vector2>.Invoke(Vector2) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.UI.ScrollRect.ScrollbarVisibility.html": {
    "href": "api/UnityEngine.UI.ScrollRect.ScrollbarVisibility.html",
    "title": "Enum ScrollRect.ScrollbarVisibility | Snapshot",
    "keywords": "Enum ScrollRect.ScrollbarVisibility Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Enum for which behavior to use for scrollbar visibility. public enum ScrollRect.ScrollbarVisibility Fields AutoHide = 1 Automatically hide the scrollbar when no scrolling is needed on this axis. The viewport rect will not be changed. AutoHideAndExpandViewport = 2 Automatically hide the scrollbar when no scrolling is needed on this axis, and expand the viewport rect accordingly. Permanent = 0 Always show the scrollbar."
  },
  "api/UnityEngine.UI.ScrollRect.html": {
    "href": "api/UnityEngine.UI.ScrollRect.html",
    "title": "Class ScrollRect | Snapshot",
    "keywords": "Class ScrollRect Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Scroll Rect\", 37)] [SelectionBase] [ExecuteAlways] [DisallowMultipleComponent] [RequireComponent(typeof(RectTransform))] public class ScrollRect : UIBehaviour, IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, IEventSystemHandler, ICanvasElement, ILayoutElement, ILayoutGroup, ILayoutController Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour ScrollRect Implements IInitializePotentialDragHandler IBeginDragHandler IEndDragHandler IDragHandler IScrollHandler IEventSystemHandler ICanvasElement ILayoutElement ILayoutGroup ILayoutController Inherited Members UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ScrollRect() protected ScrollRect() Fields m_ContentBounds protected Bounds m_ContentBounds Field Value Bounds m_ContentStartPosition protected Vector2 m_ContentStartPosition Field Value Vector2 Properties content The content that can be scrolled. It should be a child of the GameObject with ScrollRect on it. public RectTransform content { get; set; } Property Value RectTransform Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public RectTransform scrollableContent; //Do this when the Save button is selected. public void Start() { // assigns the contect that can be scrolled using the ScrollRect. myScrollRect.content = scrollableContent; } } decelerationRate The rate at which movement slows down. public float decelerationRate { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public void Start() { // assigns a new value to the decelerationRate of the scroll rect. // The higher the number the longer it takes to decelerate. myScrollRect.decelerationRate = 5.0f; } } Remarks The deceleration rate is the speed reduction per second. A value of 0.5 halves the speed each second. The default is 0.135. The deceleration rate is only used when inertia is enabled. elasticity The amount of elasticity to use when the content moves beyond the scroll rect. public float elasticity { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public void Start() { // assigns a new value to the elasticity of the scroll rect. // The higher the number the longer it takes to snap back. myScrollRect.elasticity = 3.0f; } } flexibleHeight Called by the layout system. public virtual float flexibleHeight { get; } Property Value float flexibleWidth Called by the layout system. public virtual float flexibleWidth { get; } Property Value float horizontal Should horizontal scrolling be enabled? public bool horizontal { get; set; } Property Value bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public void Start() { // Is horizontal scrolling enabled? if (myScrollRect.horizontal == true) { Debug.Log(\"Horizontal Scrolling is Enabled!\"); } } } horizontalNormalizedPosition The horizontal scroll position as a value between 0 and 1, with 0 being at the left. public float horizontalNormalizedPosition { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Scrollbar newScrollBar; public void Start() { //Change the current horizontal scroll position. myScrollRect.horizontalNormalizedPosition = 0.5f; } } horizontalScrollbar Optional Scrollbar object linked to the horizontal scrolling of the ScrollRect. public Scrollbar horizontalScrollbar { get; set; } Property Value Scrollbar Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Scrollbar newScrollBar; public void Start() { // Assigns a scroll bar element to the ScrollRect, allowing you to scroll in the horizontal axis. myScrollRect.horizontalScrollbar = newScrollBar; } } horizontalScrollbarSpacing The space between the scrollbar and the viewport. public float horizontalScrollbarSpacing { get; set; } Property Value float horizontalScrollbarVisibility The mode of visibility for the horizontal scrollbar. public ScrollRect.ScrollbarVisibility horizontalScrollbarVisibility { get; set; } Property Value ScrollRect.ScrollbarVisibility inertia Should movement inertia be enabled? public bool inertia { get; set; } Property Value bool Remarks Inertia means that the scrollrect content will keep scrolling for a while after being dragged. It gradually slows down according to the decelerationRate. layoutPriority Called by the layout system. public virtual int layoutPriority { get; } Property Value int minHeight Called by the layout system. public virtual float minHeight { get; } Property Value float minWidth Called by the layout system. public virtual float minWidth { get; } Property Value float movementType The behavior to use when the content moves beyond the scroll rect. public ScrollRect.MovementType movementType { get; set; } Property Value ScrollRect.MovementType normalizedPosition The scroll position as a Vector2 between (0,0) and (1,1) with (0,0) being the lower left corner. public Vector2 normalizedPosition { get; set; } Property Value Vector2 Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Vector2 myPosition = new Vector2(0.5f, 0.5f); public void Start() { //Change the current scroll position. myScrollRect.normalizedPosition = myPosition; } } onValueChanged Callback executed when the position of the child changes. public ScrollRect.ScrollRectEvent onValueChanged { get; set; } Property Value ScrollRect.ScrollRectEvent Examples using UnityEngine; using UnityEngine.UI; public class ExampleScript : MonoBehaviour { static ScrollRect scrollRect; void Start() { scrollRect = GetComponent<ScrollRect>(); scrollRect.onValueChanged.AddListener(ListenerMethod); } public void ListenerMethod(Vector2 value) { Debug.Log(\"ListenerMethod: \" + value); } } Remarks onValueChanged is used to watch for changes in the ScrollRect object. The onValueChanged call will use the UnityEvent.AddListener API to watch for changes. When changes happen script code provided by the user will be called. The UnityEvent.AddListener API for UI.ScrollRect._onValueChanged takes a Vector2. Note: The editor allows the onValueChanged value to be set up manually.For example the value can be set to run only a runtime. The object and script function to call are also provided here. The onValueChanged variable can be alternatively set-up at runtime.The script example below shows how this can be done.The script is attached to the ScrollRect object. preferredHeight Called by the layout system. public virtual float preferredHeight { get; } Property Value float preferredWidth Called by the layout system. public virtual float preferredWidth { get; } Property Value float scrollSensitivity The sensitivity to scroll wheel and track pad scroll events. public float scrollSensitivity { get; set; } Property Value float Remarks Higher values indicate higher sensitivity. velocity The current velocity of the content. public Vector2 velocity { get; set; } Property Value Vector2 Remarks The velocity is defined in units per second. vertical Should vertical scrolling be enabled? public bool vertical { get; set; } Property Value bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public void Start() { // Is Vertical scrolling enabled? if (myScrollRect.vertical == true) { Debug.Log(\"Vertical Scrolling is Enabled!\"); } } } verticalNormalizedPosition The vertical scroll position as a value between 0 and 1, with 0 being at the bottom. public float verticalNormalizedPosition { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Scrollbar newScrollBar; public void Start() { //Change the current vertical scroll position. myScrollRect.verticalNormalizedPosition = 0.5f; } } verticalScrollbar Optional Scrollbar object linked to the vertical scrolling of the ScrollRect. public Scrollbar verticalScrollbar { get; set; } Property Value Scrollbar Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public Scrollbar newScrollBar; public void Start() { // Assigns a scroll bar element to the ScrollRect, allowing you to scroll in the vertical axis. myScrollRect.verticalScrollbar = newScrollBar; } } verticalScrollbarSpacing The space between the scrollbar and the viewport. public float verticalScrollbarSpacing { get; set; } Property Value float verticalScrollbarVisibility The mode of visibility for the vertical scrollbar. public ScrollRect.ScrollbarVisibility verticalScrollbarVisibility { get; set; } Property Value ScrollRect.ScrollbarVisibility viewRect protected RectTransform viewRect { get; } Property Value RectTransform viewport Reference to the viewport RectTransform that is the parent of the content RectTransform. public RectTransform viewport { get; set; } Property Value RectTransform Methods CalculateLayoutInputHorizontal() Called by the layout system. public virtual void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Called by the layout system. public virtual void CalculateLayoutInputVertical() GraphicUpdateComplete() Callback sent when this ICanvasElement has completed Graphic rebuild. public virtual void GraphicUpdateComplete() IsActive() See member in base class. public override bool IsActive() Returns bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public ScrollRect myScrollRect; public void Start() { //Checks if the ScrollRect called \"myScrollRect\" is active. if (myScrollRect.IsActive()) { Debug.Log(\"The Scroll Rect is active!\"); } } } LateUpdate() protected virtual void LateUpdate() LayoutComplete() Callback sent when this ICanvasElement has completed layout. public virtual void LayoutComplete() OnBeginDrag(PointerEventData) Handling for when the content is beging being dragged. public virtual void OnBeginDrag(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.EventSystems; // Required when using event data public class ExampleClass : MonoBehaviour, IBeginDragHandler // required interface when using the OnBeginDrag method. { //Do this when the user starts dragging the element this script is attached to.. public void OnBeginDrag(PointerEventData data) { Debug.Log(\"They started dragging \" + this.name); } } OnDisable() protected override void OnDisable() OnDrag(PointerEventData) Handling for when the content is dragged. public virtual void OnDrag(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.EventSystems; // Required when using event data public class ExampleClass : MonoBehaviour, IDragHandler // required interface when using the OnDrag method. { //Do this while the user is dragging this UI Element. public void OnDrag(PointerEventData data) { Debug.Log(\"Currently dragging \" + this.name); } } OnEnable() protected override void OnEnable() OnEndDrag(PointerEventData) Handling for when the content has finished being dragged. public virtual void OnEndDrag(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.EventSystems; // Required when using event data public class ExampleClass : MonoBehaviour, IEndDragHandler // required interface when using the OnEndDrag method. { //Do this when the user stops dragging this UI Element. public void OnEndDrag(PointerEventData data) { Debug.Log(\"Stopped dragging \" + this.name + \"!\"); } } OnInitializePotentialDrag(PointerEventData) Called by a BaseInputModule when a drag has been found but before it is valid to begin the drag. public virtual void OnInitializePotentialDrag(PointerEventData eventData) Parameters eventData PointerEventData OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). protected override void OnRectTransformDimensionsChange() OnScroll(PointerEventData) Use this callback to detect scroll events. public virtual void OnScroll(PointerEventData data) Parameters data PointerEventData Rebuild(CanvasUpdate) Rebuilds the scroll rect data after initialization. public virtual void Rebuild(CanvasUpdate executing) Parameters executing CanvasUpdate The current step in the rendering CanvasUpdate cycle. SetContentAnchoredPosition(Vector2) Sets the anchored position of the content. protected virtual void SetContentAnchoredPosition(Vector2 position) Parameters position Vector2 SetDirty() Override to alter or add to the code that keeps the appearance of the scroll rect synced with its data. protected void SetDirty() SetDirtyCaching() Override to alter or add to the code that caches data to avoid repeated heavy operations. protected void SetDirtyCaching() SetLayoutHorizontal() Called by the layout system. public virtual void SetLayoutHorizontal() SetLayoutVertical() Called by the layout system. public virtual void SetLayoutVertical() SetNormalizedPosition(float, int) Set the horizontal or vertical scroll position as a value between 0 and 1, with 0 being at the left or at the bottom. protected virtual void SetNormalizedPosition(float value, int axis) Parameters value float The position to set, between 0 and 1. axis int The axis to set: 0 for horizontal, 1 for vertical. StopMovement() Sets the velocity to zero on both axes so the content stops moving. public virtual void StopMovement() UpdateBounds() Calculate the bounds the ScrollRect should be using. protected void UpdateBounds() UpdatePrevData() Helper function to update the previous data fields on a ScrollRect. Call this before you change data in the ScrollRect. protected void UpdatePrevData()"
  },
  "api/UnityEngine.UI.Scrollbar.Direction.html": {
    "href": "api/UnityEngine.UI.Scrollbar.Direction.html",
    "title": "Enum Scrollbar.Direction | Snapshot",
    "keywords": "Enum Scrollbar.Direction Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Setting that indicates one of four directions the scrollbar will travel. public enum Scrollbar.Direction Fields BottomToTop = 2 Starting position is the Bottom. LeftToRight = 0 Starting position is the Left. RightToLeft = 1 Starting position is the Right TopToBottom = 3 Starting position is the Top."
  },
  "api/UnityEngine.UI.Scrollbar.ScrollEvent.html": {
    "href": "api/UnityEngine.UI.Scrollbar.ScrollEvent.html",
    "title": "Class Scrollbar.ScrollEvent | Snapshot",
    "keywords": "Class Scrollbar.ScrollEvent Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class Scrollbar.ScrollEvent : UnityEvent<float>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<float> Scrollbar.ScrollEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<float>.AddListener(UnityAction<float>) UnityEvent<float>.RemoveListener(UnityAction<float>) UnityEvent<float>.FindMethod_Impl(string, Type) UnityEvent<float>.Invoke(float) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.UI.Scrollbar.html": {
    "href": "api/UnityEngine.UI.Scrollbar.html",
    "title": "Class Scrollbar | Snapshot",
    "keywords": "Class Scrollbar Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Scrollbar\", 36)] [ExecuteAlways] [RequireComponent(typeof(RectTransform))] public class Scrollbar : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IBeginDragHandler, IDragHandler, IInitializePotentialDragHandler, IEventSystemHandler, ICanvasElement Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable Scrollbar Implements IMoveHandler IPointerDownHandler IPointerUpHandler IPointerEnterHandler IPointerExitHandler ISelectHandler IDeselectHandler IBeginDragHandler IDragHandler IInitializePotentialDragHandler IEventSystemHandler ICanvasElement Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.Awake() Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnDidApplyAnimationProperties() Selectable.OnTransformParentChanged() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, bool) Selectable.FindSelectable(Vector3) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Scrollbar() protected Scrollbar() Properties direction The direction of the scrollbar from minimum to maximum value. public Scrollbar.Direction direction { get; set; } Property Value Scrollbar.Direction handleRect The RectTransform to use for the handle. public RectTransform handleRect { get; set; } Property Value RectTransform numberOfSteps The number of steps to use for the value. A value of 0 disables use of steps. public int numberOfSteps { get; set; } Property Value int onValueChanged Handling for when the scrollbar value is changed. public Scrollbar.ScrollEvent onValueChanged { get; set; } Property Value Scrollbar.ScrollEvent Remarks Allow for delegate-based subscriptions for faster events than 'eventReceiver', and allowing for multiple receivers. size The size of the scrollbar handle where 1 means it fills the entire scrollbar. public float size { get; set; } Property Value float value The current value of the scrollbar, between 0 and 1. public float value { get; set; } Property Value float Methods ClickRepeat(PointerEventData) protected IEnumerator ClickRepeat(PointerEventData eventData) Parameters eventData PointerEventData Returns IEnumerator ClickRepeat(Vector2, Camera) Coroutine function for handling continual press during Scrollbar.OnPointerDown. protected IEnumerator ClickRepeat(Vector2 screenPosition, Camera camera) Parameters screenPosition Vector2 camera Camera Returns IEnumerator FindSelectableOnDown() Prevents selection if we we move on the Vertical axis. See Selectable.FindSelectableOnDown. public override Selectable FindSelectableOnDown() Returns Selectable FindSelectableOnLeft() Prevents selection if we we move on the Horizontal axis. See Selectable.FindSelectableOnLeft. public override Selectable FindSelectableOnLeft() Returns Selectable FindSelectableOnRight() Prevents selection if we we move on the Horizontal axis. See Selectable.FindSelectableOnRight. public override Selectable FindSelectableOnRight() Returns Selectable FindSelectableOnUp() Prevents selection if we we move on the Vertical axis. See Selectable.FindSelectableOnUp. public override Selectable FindSelectableOnUp() Returns Selectable GraphicUpdateComplete() See ICanvasElement.GraphicUpdateComplete. public virtual void GraphicUpdateComplete() LayoutComplete() See ICanvasElement.LayoutComplete. public virtual void LayoutComplete() OnBeginDrag(PointerEventData) Handling for when the scrollbar value is begin being dragged. public virtual void OnBeginDrag(PointerEventData eventData) Parameters eventData PointerEventData OnDisable() protected override void OnDisable() OnDrag(PointerEventData) Handling for when the scrollbar value is dragged. public virtual void OnDrag(PointerEventData eventData) Parameters eventData PointerEventData OnEnable() protected override void OnEnable() OnInitializePotentialDrag(PointerEventData) See: IInitializePotentialDragHandler.OnInitializePotentialDrag public virtual void OnInitializePotentialDrag(PointerEventData eventData) Parameters eventData PointerEventData OnMove(AxisEventData) Handling for movement events. public override void OnMove(AxisEventData eventData) Parameters eventData AxisEventData OnPointerDown(PointerEventData) Event triggered when pointer is pressed down on the scrollbar. public override void OnPointerDown(PointerEventData eventData) Parameters eventData PointerEventData OnPointerUp(PointerEventData) Event triggered when pointer is released after pressing on the scrollbar. public override void OnPointerUp(PointerEventData eventData) Parameters eventData PointerEventData OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). protected override void OnRectTransformDimensionsChange() Rebuild(CanvasUpdate) Rebuild the element for the given stage. public virtual void Rebuild(CanvasUpdate executing) Parameters executing CanvasUpdate The current CanvasUpdate stage being rebuild. SetDirection(Direction, bool) Set the direction of the scrollbar, optionally setting the layout as well. public void SetDirection(Scrollbar.Direction direction, bool includeRectLayouts) Parameters direction Scrollbar.Direction The direction of the scrollbar. includeRectLayouts bool Should the layout be flipped together with the direction? SetValueWithoutNotify(float) Set the value of the scrollbar without invoking onValueChanged callback. public virtual void SetValueWithoutNotify(float input) Parameters input float The new value for the scrollbar. Update() Update the rect based on the delayed update visuals. Got around issue of calling sendMessage from onValidate. protected virtual void Update()"
  },
  "api/UnityEngine.UI.Selectable.SelectionState.html": {
    "href": "api/UnityEngine.UI.Selectable.SelectionState.html",
    "title": "Enum Selectable.SelectionState | Snapshot",
    "keywords": "Enum Selectable.SelectionState Namespace UnityEngine.UI Assembly UnityEngine.UI.dll An enumeration of selected states of objects protected enum Selectable.SelectionState Fields Disabled = 4 The UI object cannot be selected. Highlighted = 1 The UI object is highlighted. Normal = 0 The UI object can be selected. Pressed = 2 The UI object is pressed. Selected = 3 The UI object is selected"
  },
  "api/UnityEngine.UI.Selectable.Transition.html": {
    "href": "api/UnityEngine.UI.Selectable.Transition.html",
    "title": "Enum Selectable.Transition | Snapshot",
    "keywords": "Enum Selectable.Transition Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Transition mode for a Selectable. public enum Selectable.Transition Fields Animation = 3 Use an animation transition. ColorTint = 1 Use an color tint transition. None = 0 No Transition. SpriteSwap = 2 Use a sprite swap transition."
  },
  "api/UnityEngine.UI.Selectable.html": {
    "href": "api/UnityEngine.UI.Selectable.html",
    "title": "Class Selectable | Snapshot",
    "keywords": "Class Selectable Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Selectable\", 35)] [ExecuteAlways] [SelectionBase] [DisallowMultipleComponent] public class Selectable : UIBehaviour, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IEventSystemHandler Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable Implements IMoveHandler IPointerDownHandler IPointerUpHandler IPointerEnterHandler IPointerExitHandler ISelectHandler IDeselectHandler IEventSystemHandler Derived Button Dropdown InputField Scrollbar Slider Toggle Inherited Members UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Selectable() protected Selectable() Fields m_CurrentIndex protected int m_CurrentIndex Field Value int s_SelectableCount protected static int s_SelectableCount Field Value int s_Selectables protected static Selectable[] s_Selectables Field Value Selectable[] Properties allSelectableCount How many selectable elements are currently active. public static int allSelectableCount { get; } Property Value int allSelectables A List instance of the allSelectablesArray to maintain API compatibility. [Obsolete(\"Replaced with allSelectablesArray to have better performance when disabling a element\", false)] public static List<Selectable> allSelectables { get; } Property Value List<Selectable> allSelectablesArray Copy of the array of all the selectable objects currently active in the scene. public static Selectable[] allSelectablesArray { get; } Property Value Selectable[] Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class Example : MonoBehaviour { //Displays the names of all selectable elements in the scene public void GetNames() { foreach (Selectable selectableUI in Selectable.allSelectablesArray) { Debug.Log(selectableUI.name); } } } animationTriggers The AnimationTriggers for this selectable object. public AnimationTriggers animationTriggers { get; set; } Property Value AnimationTriggers Remarks Modifications will not be visible if transition is not Animation. colors The ColorBlock for this selectable object. public ColorBlock colors { get; set; } Property Value ColorBlock Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; void Start() { //Resets the colors in the buttons transitions. button.colors = ColorBlock.defaultColorBlock; } } Remarks Modifications will not be visible if transition is not ColorTint. currentSelectionState protected Selectable.SelectionState currentSelectionState { get; } Property Value Selectable.SelectionState image Convenience function that converts the referenced Graphic to a Image, if possible. public Image image { get; set; } Property Value Image interactable Is this object interactable. public bool interactable { get; set; } Property Value bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class Example : MonoBehaviour { public Button startButton; public bool playersReady; void Update() { // checks if the players are ready and if the start button is useable if (playersReady == true && startButton.interactable == false) { //allows the start button to be used startButton.interactable = true; } } } navigation The Navigation setting for this selectable object. public Navigation navigation { get; set; } Property Value Navigation Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button button; void Start() { //Set the navigation to the default value. (\"Automatic\" is the default value). button.navigation = Navigation.defaultNavigation; } } spriteState The SpriteState for this selectable object. public SpriteState spriteState { get; set; } Property Value SpriteState Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { //Creates an instance of a sprite state (This includes the highlighted, pressed and disabled sprite. public SpriteState sprState = new SpriteState(); public Button btnMain; void Start() { //Assigns the new sprite states to the button. btnMain.spriteState = sprState; } } Remarks Modifications will not be visible if transition is not SpriteSwap. targetGraphic Graphic that will be transitioned upon. public Graphic targetGraphic { get; set; } Property Value Graphic Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Image newImage; public Button btnMain; void SomeFunction() { //Displays the sprite transitions on the image when the transition to Highlighted,pressed or disabled is made. btnMain.targetGraphic = newImage; } } transition The type of transition that will be applied to the targetGraphic when the state changes. public Selectable.Transition transition { get; set; } Property Value Selectable.Transition Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { public Button btnMain; void SomeFunction() { //Sets the main button's transition setting to \"Color Tint\". btnMain.transition = Selectable.Transition.ColorTint; } } Methods AllSelectablesNoAlloc(Selectable[]) Non allocating version for getting the all selectables. If selectables.Length is less then s_SelectableCount only selectables.Length elments will be copied which could result in a incomplete list of elements. public static int AllSelectablesNoAlloc(Selectable[] selectables) Parameters selectables Selectable[] The array to be filled with current selectable objects Returns int The number of element copied. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class Example : MonoBehaviour { Selectable[] m_Selectables = new Selectable[10]; //Displays the names of all selectable elements in the scene public void GetNames() { if (m_Selectables.Length < Selectable.allSelectableCount) m_Selectables = new Selectable[Selectable.allSelectableCount]; int count = Selectable.AllSelectablesNoAlloc(ref m_Selectables); for (int i = 0; i < count; ++i) { Debug.Log(m_Selectables[i].name); } } } Awake() Convenience function to get the Animator component on the GameObject. protected override void Awake() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { private Animator buttonAnimator; public Button button; void Start() { //Assigns the \"buttonAnimator\" with the button's animator. buttonAnimator = button.animator; } } DoStateTransition(SelectionState, bool) Transition the Selectable to the entered state. protected virtual void DoStateTransition(Selectable.SelectionState state, bool instant) Parameters state Selectable.SelectionState State to transition to instant bool Should the transition occur instantly. FindSelectable(Vector3) Finds the selectable object next to this one. public Selectable FindSelectable(Vector3 dir) Parameters dir Vector3 The direction in which to search for a neighbouring Selectable object. Returns Selectable The neighbouring Selectable object. Null if none found. Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class ExampleClass : MonoBehaviour { //Sets the direction as \"Up\" (Y is in positive). public Vector3 direction = new Vector3(0, 1, 0); public Button btnMain; public void Start() { //Finds and assigns the selectable above the main button Selectable newSelectable = btnMain.FindSelectable(direction); Debug.Log(newSelectable.name); } } Remarks The direction is determined by a Vector3 variable. FindSelectableOnDown() Find the selectable object below this one. public virtual Selectable FindSelectableOnDown() Returns Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class Example : MonoBehaviour { public Button startButton; // Disables the selectable UI element directly below the Start Button public void IgnoreSelectables() { //Finds the selectable UI element below the start button and assigns it to a variable of type \"Selectable\" Selectable secondButton = startButton.FindSelectableOnDown(); //Disables interaction with the selectable UI element secondButton.interactable = false; } } FindSelectableOnLeft() Find the selectable object to the left of this one. public virtual Selectable FindSelectableOnLeft() Returns Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class ExampleClass : MonoBehaviour { public Button btnMain; // Disables the selectable UI element directly to the left of the Start Button public void IgnoreSelectables() { //Finds the selectable UI element to the left the start button and assigns it to a variable of type \"Selectable\" Selectable secondButton = startButton.FindSelectableOnLeft(); //Disables interaction with the selectable UI element secondButton.interactable = false; } } FindSelectableOnRight() Find the selectable object to the right of this one. public virtual Selectable FindSelectableOnRight() Returns Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class ExampleClass : MonoBehaviour { public Button btnMain; // Disables the selectable UI element directly to the right the Start Button public void IgnoreSelectables() { //Finds the selectable UI element to the right the start button and assigns it to a variable of type \"Selectable\" Selectable secondButton = startButton.FindSelectableOnRight(); //Disables interaction with the selectable UI element secondButton.interactable = false; } } FindSelectableOnUp() The Selectable object above current public virtual Selectable FindSelectableOnUp() Returns Selectable Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class ExampleClass : MonoBehaviour { public Button btnMain; // Disables the selectable UI element directly above the Start Button public void IgnoreSelectables() { //Finds the selectable UI element above the start button and assigns it to a variable of type \"Selectable\" Selectable secondButton = startButton.FindSelectableOnUp(); //Disables interaction with the selectable UI element secondButton.interactable = false; } } InstantClearState() Clear any internal state from the Selectable (used when disabling). protected virtual void InstantClearState() IsHighlighted() Returns whether the selectable is currently 'highlighted' or not. protected bool IsHighlighted() Returns bool Examples //Create a UI element. To do this go to Create>UI and select from the list. Attach this script to the UI GameObject to see this script working. The script also works with non-UI elements, but highlighting works better with UI. using UnityEngine; using UnityEngine.Events; using UnityEngine.EventSystems; using UnityEngine.UI; //Use the Selectable class as a base class to access the IsHighlighted method public class Example : Selectable { //Use this to check what Events are happening BaseEventData m_BaseEvent; void Update() { //Check if the GameObject is being highlighted if (IsHighlighted()) { //Output that the GameObject was highlighted, or do something else Debug.Log(\"Selectable is Highlighted\"); } } } Remarks Use this to check if the selectable UI element is currently highlighted. IsInteractable() Is the object interactable. public virtual bool IsInteractable() Returns bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts public class Example : MonoBehaviour { public Button startButton; void Update() { if (!startButton.IsInteractable()) { Debug.Log(\"Start Button has been Disabled\"); } } } IsPressed() Whether the current selectable is being pressed. protected bool IsPressed() Returns bool OnCanvasGroupChanged() protected override void OnCanvasGroupChanged() OnDeselect(BaseEventData) Unset selection and transition to appropriate state. public virtual void OnDeselect(BaseEventData eventData) Parameters eventData BaseEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IDeselectHandler //This Interface is required to receive OnDeselect callbacks. { public void OnDeselect(BaseEventData data) { Debug.Log(\"Deselected\"); } } OnDidApplyAnimationProperties() protected override void OnDidApplyAnimationProperties() OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnMove(AxisEventData) Determine in which of the 4 move directions the next selectable object should be found. public virtual void OnMove(AxisEventData eventData) Parameters eventData AxisEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IMoveHandler { //When the focus moves to another selectable object, Invoke this Method. public void OnMove(AxisEventData eventData) { //Assigns the move direction and the raw input vector representing the direction from the event data. MoveDirection moveDir = eventData.moveDir; Vector2 moveVector = eventData.moveVector; //Displays the information in the console Debug.Log(moveDir + \", \" + moveVector); } } OnPointerDown(PointerEventData) Evaluate current state and transition to pressed state. public virtual void OnPointerDown(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerDownHandler// required interface when using the OnPointerDown method. { //Do this when the mouse is clicked over the selectable object this script is attached to. public void OnPointerDown(PointerEventData eventData) { Debug.Log(this.gameObject.name + \" Was Clicked.\"); } } OnPointerEnter(PointerEventData) Evaluate current state and transition to appropriate state. New state could be pressed or hover depending on pressed state. public virtual void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerEnterHandler// required interface when using the OnPointerEnter method. { //Do this when the cursor enters the rect area of this selectable UI object. public void OnPointerEnter(PointerEventData eventData) { Debug.Log(\"The cursor entered the selectable UI element.\"); } } OnPointerExit(PointerEventData) Evaluate current state and transition to normal state. public virtual void OnPointerExit(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerExitHandler// required interface when using the OnPointerExit method. { //Do this when the cursor exits the rect area of this selectable UI object. public void OnPointerExit(PointerEventData eventData) { Debug.Log(\"The cursor exited the selectable UI element.\"); } } OnPointerUp(PointerEventData) Evaluate eventData and transition to appropriate state. public virtual void OnPointerUp(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerUpHandler, IPointerDownHandler// These are the interfaces the OnPointerUp method requires. { //OnPointerDown is also required to receive OnPointerUp callbacks public void OnPointerDown(PointerEventData eventData) { } //Do this when the mouse click on this selectable UI object is released. public void OnPointerUp(PointerEventData eventData) { Debug.Log(\"The mouse click was released\"); } } OnSelect(BaseEventData) Set selection and transition to appropriate state. public virtual void OnSelect(BaseEventData eventData) Parameters eventData BaseEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, ISelectHandler// required interface when using the OnSelect method. { //Do this when the selectable UI object is selected. public void OnSelect(BaseEventData eventData) { Debug.Log(this.gameObject.name + \" was selected\"); } } OnTransformParentChanged() protected override void OnTransformParentChanged() Select() Selects this Selectable. public virtual void Select() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // required when using UI elements in scripts using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour// required interface when using the OnSelect method. { public InputField myInputField; //Do this OnClick. public void SaveGame() { //Makes the Input Field the selected UI Element. myInputField.Select(); } }"
  },
  "api/UnityEngine.UI.Shadow.html": {
    "href": "api/UnityEngine.UI.Shadow.html",
    "title": "Class Shadow | Snapshot",
    "keywords": "Class Shadow Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Effects/Shadow\", 80)] public class Shadow : BaseMeshEffect, IMeshModifier Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseMeshEffect Shadow Implements IMeshModifier Derived Outline Inherited Members BaseMeshEffect.graphic BaseMeshEffect.OnEnable() BaseMeshEffect.OnDisable() BaseMeshEffect.OnDidApplyAnimationProperties() BaseMeshEffect.ModifyMesh(Mesh) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Shadow() protected Shadow() Properties effectColor Color for the effect public Color effectColor { get; set; } Property Value Color effectDistance How far is the shadow from the graphic. public Vector2 effectDistance { get; set; } Property Value Vector2 useGraphicAlpha Should the shadow inherit the alpha from the graphic? public bool useGraphicAlpha { get; set; } Property Value bool Methods ApplyShadow(List<UIVertex>, Color32, int, int, float, float) Duplicate vertices from start to end and turn them into shadows with the given offset. protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y) Parameters verts List<UIVertex> Vert list to copy color Color32 Shadow color start int The start index in the verts list end int The end index in the vers list x float The shadows x offset y float The shadows y offset ApplyShadowZeroAlloc(List<UIVertex>, Color32, int, int, float, float) protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y) Parameters verts List<UIVertex> color Color32 start int end int x float y float ModifyMesh(VertexHelper) Call used to modify mesh. Place any custom mesh processing in this function. public override void ModifyMesh(VertexHelper vh) Parameters vh VertexHelper"
  },
  "api/UnityEngine.UI.Slider.Direction.html": {
    "href": "api/UnityEngine.UI.Slider.Direction.html",
    "title": "Enum Slider.Direction | Snapshot",
    "keywords": "Enum Slider.Direction Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Setting that indicates one of four directions. public enum Slider.Direction Fields BottomToTop = 2 From the bottom to the top. LeftToRight = 0 From the left to the right RightToLeft = 1 From the right to the left TopToBottom = 3 From the top to the bottom."
  },
  "api/UnityEngine.UI.Slider.SliderEvent.html": {
    "href": "api/UnityEngine.UI.Slider.SliderEvent.html",
    "title": "Class Slider.SliderEvent | Snapshot",
    "keywords": "Class Slider.SliderEvent Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class Slider.SliderEvent : UnityEvent<float>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<float> Slider.SliderEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<float>.AddListener(UnityAction<float>) UnityEvent<float>.RemoveListener(UnityAction<float>) UnityEvent<float>.FindMethod_Impl(string, Type) UnityEvent<float>.Invoke(float) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.UI.Slider.html": {
    "href": "api/UnityEngine.UI.Slider.html",
    "title": "Class Slider | Snapshot",
    "keywords": "Class Slider Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Slider\", 34)] [ExecuteAlways] [RequireComponent(typeof(RectTransform))] public class Slider : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IDragHandler, IInitializePotentialDragHandler, IEventSystemHandler, ICanvasElement Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable Slider Implements IMoveHandler IPointerDownHandler IPointerUpHandler IPointerEnterHandler IPointerExitHandler ISelectHandler IDeselectHandler IDragHandler IInitializePotentialDragHandler IEventSystemHandler ICanvasElement Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.Awake() Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnTransformParentChanged() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, bool) Selectable.FindSelectable(Vector3) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Slider() protected Slider() Fields m_Value [SerializeField] protected float m_Value Field Value float Properties direction The direction of the slider, from minimum to maximum value. public Slider.Direction direction { get; set; } Property Value Slider.Direction Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; public void Start() { //Changes the direction of the slider. if (mainSlider.direction == Slider.Direction.BottomToTop) { mainSlider.direction = Slider.Direction.TopToBottom; } } } fillRect Optional RectTransform to use as fill for the slider. public RectTransform fillRect { get; set; } Property Value RectTransform Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; //Reference to new \"RectTransform\"(Child of FillArea). public RectTransform newFillRect; //Deactivates the old FillRect and assigns a new one. void Start() { mainSlider.fillRect.gameObject.SetActive(false); mainSlider.fillRect = newFillRect; } } handleRect Optional RectTransform to use as a handle for the slider. public RectTransform handleRect { get; set; } Property Value RectTransform Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; //Reference to new \"RectTransform\" (Child of \"Handle Slide Area\"). public RectTransform handleHighlighted; //Deactivates the old Handle, then assigns and enables the new one. void Start() { mainSlider.handleRect.gameObject.SetActive(false); mainSlider.handleRect = handleHighlighted; mainSlider.handleRect.gameObject.SetActive(true); } } maxValue The maximum allowed value of the slider. public float maxValue { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; void Start() { // Changes the max value of the slider to 20; mainSlider.maxValue = 20; } } minValue The minimum allowed value of the slider. public float minValue { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; void Start() { // Changes the minimum value of the slider to 10; mainSlider.minValue = 10; } } normalizedValue The current value of the slider normalized into a value between 0 and 1. public float normalizedValue { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; //Set to invoke when \"OnValueChanged\" method is called. void CheckNormalisedValue() { //Displays the normalised value of the slider everytime the value changes. Debug.Log(mainSlider.normalizedValue); } } onValueChanged Callback executed when the value of the slider is changed. public Slider.SliderEvent onValueChanged { get; set; } Property Value Slider.SliderEvent Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; public void Start() { //Adds a listener to the main slider and invokes a method when the value changes. mainSlider.onValueChanged.AddListener(delegate {ValueChangeCheck(); }); } // Invoked when the value of the slider changes. public void ValueChangeCheck() { Debug.Log(mainSlider.value); } } value The current value of the slider. public virtual float value { get; set; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; //Invoked when a submit button is clicked. public void SubmitSliderSetting() { //Displays the value of the slider in the console. Debug.Log(mainSlider.value); } } wholeNumbers Should the value only be allowed to be whole numbers? public bool wholeNumbers { get; set; } Property Value bool Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; public void Start() { //sets the slider's value to accept whole numbers only. mainSlider.wholeNumbers = true; } } Methods FindSelectableOnDown() See Selectable.FindSelectableOnDown public override Selectable FindSelectableOnDown() Returns Selectable FindSelectableOnLeft() See Selectable.FindSelectableOnLeft public override Selectable FindSelectableOnLeft() Returns Selectable FindSelectableOnRight() See Selectable.FindSelectableOnRight public override Selectable FindSelectableOnRight() Returns Selectable FindSelectableOnUp() See Selectable.FindSelectableOnUp public override Selectable FindSelectableOnUp() Returns Selectable GraphicUpdateComplete() See ICanvasElement.GraphicUpdateComplete public virtual void GraphicUpdateComplete() LayoutComplete() See ICanvasElement.LayoutComplete public virtual void LayoutComplete() OnDidApplyAnimationProperties() protected override void OnDidApplyAnimationProperties() OnDisable() protected override void OnDisable() OnDrag(PointerEventData) When dragging is occurring this will be called every time the cursor is moved. public virtual void OnDrag(PointerEventData eventData) Parameters eventData PointerEventData OnEnable() protected override void OnEnable() OnInitializePotentialDrag(PointerEventData) Called by a BaseInputModule when a drag has been found but before it is valid to begin the drag. public virtual void OnInitializePotentialDrag(PointerEventData eventData) Parameters eventData PointerEventData OnMove(AxisEventData) Determine in which of the 4 move directions the next selectable object should be found. public override void OnMove(AxisEventData eventData) Parameters eventData AxisEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IMoveHandler { //When the focus moves to another selectable object, Invoke this Method. public void OnMove(AxisEventData eventData) { //Assigns the move direction and the raw input vector representing the direction from the event data. MoveDirection moveDir = eventData.moveDir; Vector2 moveVector = eventData.moveVector; //Displays the information in the console Debug.Log(moveDir + \", \" + moveVector); } } OnPointerDown(PointerEventData) Evaluate current state and transition to pressed state. public override void OnPointerDown(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerDownHandler// required interface when using the OnPointerDown method. { //Do this when the mouse is clicked over the selectable object this script is attached to. public void OnPointerDown(PointerEventData eventData) { Debug.Log(this.gameObject.name + \" Was Clicked.\"); } } OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). protected override void OnRectTransformDimensionsChange() Rebuild(CanvasUpdate) Rebuild the element for the given stage. public virtual void Rebuild(CanvasUpdate executing) Parameters executing CanvasUpdate The current CanvasUpdate stage being rebuild. Set(float, bool) Set the value of the slider. protected virtual void Set(float input, bool sendCallback = true) Parameters input float The new value for the slider. sendCallback bool If the OnValueChanged callback should be invoked. Remarks Process the input to ensure the value is between min and max value. If the input is different set the value and send the callback is required. SetDirection(Direction, bool) Sets the direction of this slider, optionally changing the layout as well. public void SetDirection(Slider.Direction direction, bool includeRectLayouts) Parameters direction Slider.Direction The direction of the slider includeRectLayouts bool Should the layout be flipped together with the slider direction Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class Example : MonoBehaviour { public Slider mainSlider; public void Start() { mainSlider.SetDirection(Slider.Direction.LeftToRight, false); } } SetValueWithoutNotify(float) Set the value of the slider without invoking onValueChanged callback. public virtual void SetValueWithoutNotify(float input) Parameters input float The new value for the slider. Update() Update the rect based on the delayed update visuals. Got around issue of calling sendMessage from onValidate. protected virtual void Update()"
  },
  "api/UnityEngine.UI.SpriteState.html": {
    "href": "api/UnityEngine.UI.SpriteState.html",
    "title": "Struct SpriteState | Snapshot",
    "keywords": "Struct SpriteState Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public struct SpriteState : IEquatable<SpriteState> Implements IEquatable<SpriteState> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties disabledSprite Disabled sprite. public Sprite disabledSprite { get; set; } Property Value Sprite highlightedSprite Highlighted sprite. public Sprite highlightedSprite { get; set; } Property Value Sprite pressedSprite Pressed sprite. public Sprite pressedSprite { get; set; } Property Value Sprite selectedSprite Selected sprite. public Sprite selectedSprite { get; set; } Property Value Sprite Methods Equals(SpriteState) public bool Equals(SpriteState other) Parameters other SpriteState Returns bool"
  },
  "api/UnityEngine.UI.StencilMaterial.html": {
    "href": "api/UnityEngine.UI.StencilMaterial.html",
    "title": "Class StencilMaterial | Snapshot",
    "keywords": "Class StencilMaterial Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Dynamic material class makes it possible to create custom materials on the fly on a per-Graphic basis, and still have them get cleaned up correctly. public static class StencilMaterial Inheritance object StencilMaterial Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(Material, int, StencilOp, CompareFunction, ColorWriteMask) Add a new material using the specified base and stencil ID. public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask) Parameters baseMat Material stencilID int operation StencilOp compareFunction CompareFunction colorWriteMask ColorWriteMask Returns Material Add(Material, int, StencilOp, CompareFunction, ColorWriteMask, int, int) Add a new material using the specified base and stencil ID. public static Material Add(Material baseMat, int stencilID, StencilOp operation, CompareFunction compareFunction, ColorWriteMask colorWriteMask, int readMask, int writeMask) Parameters baseMat Material stencilID int operation StencilOp compareFunction CompareFunction colorWriteMask ColorWriteMask readMask int writeMask int Returns Material ClearAll() public static void ClearAll() Remove(Material) Remove an existing material, automatically cleaning it up if it's no longer in use. public static void Remove(Material customMat) Parameters customMat Material"
  },
  "api/UnityEngine.UI.Text.html": {
    "href": "api/UnityEngine.UI.Text.html",
    "title": "Class Text | Snapshot",
    "keywords": "Class Text Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [RequireComponent(typeof(CanvasRenderer))] [AddComponentMenu(\"UI/Legacy/Text\", 100)] public class Text : MaskableGraphic, ICanvasElement, IClippable, IMaskable, IMaterialModifier, ILayoutElement Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Graphic MaskableGraphic Text Implements ICanvasElement IClippable IMaskable IMaterialModifier ILayoutElement Inherited Members MaskableGraphic.m_ShouldRecalculateStencil MaskableGraphic.m_MaskMaterial MaskableGraphic.onCullStateChanged MaskableGraphic.maskable MaskableGraphic.isMaskingGraphic MaskableGraphic.m_StencilValue MaskableGraphic.GetModifiedMaterial(Material) MaskableGraphic.Cull(Rect, bool) MaskableGraphic.SetClipRect(Rect, bool) MaskableGraphic.SetClipSoftness(Vector2) MaskableGraphic.OnTransformParentChanged() MaskableGraphic.OnCanvasHierarchyChanged() MaskableGraphic.RecalculateClipping() MaskableGraphic.RecalculateMasking() Graphic.s_DefaultUI Graphic.s_WhiteTexture Graphic.defaultGraphicMaterial Graphic.m_Material Graphic.m_SkipLayoutUpdate Graphic.m_SkipMaterialUpdate Graphic.color Graphic.raycastTarget Graphic.raycastPadding Graphic.m_OnDirtyLayoutCallback Graphic.m_OnDirtyVertsCallback Graphic.m_OnDirtyMaterialCallback Graphic.s_Mesh Graphic.m_CachedMesh Graphic.m_CachedUvs Graphic.useLegacyMeshGeneration Graphic.SetAllDirty() Graphic.SetLayoutDirty() Graphic.SetVerticesDirty() Graphic.SetMaterialDirty() Graphic.SetRaycastDirty() Graphic.OnRectTransformDimensionsChange() Graphic.OnBeforeTransformParentChanged() Graphic.depth Graphic.rectTransform Graphic.canvas Graphic.canvasRenderer Graphic.defaultMaterial Graphic.material Graphic.materialForRendering Graphic.OnDestroy() Graphic.OnCullingChanged() Graphic.Rebuild(CanvasUpdate) Graphic.LayoutComplete() Graphic.GraphicUpdateComplete() Graphic.UpdateMaterial() Graphic.workerMesh Graphic.OnPopulateMesh(Mesh) Graphic.OnDidApplyAnimationProperties() Graphic.SetNativeSize() Graphic.Raycast(Vector2, Camera) Graphic.PixelAdjustPoint(Vector2) Graphic.GetPixelAdjustedRect() Graphic.CrossFadeColor(Color, float, bool, bool) Graphic.CrossFadeColor(Color, float, bool, bool, bool) Graphic.CrossFadeAlpha(float, float, bool) Graphic.RegisterDirtyLayoutCallback(UnityAction) Graphic.UnregisterDirtyLayoutCallback(UnityAction) Graphic.RegisterDirtyVerticesCallback(UnityAction) Graphic.UnregisterDirtyVerticesCallback(UnityAction) Graphic.RegisterDirtyMaterialCallback(UnityAction) Graphic.UnregisterDirtyMaterialCallback(UnityAction) UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.IsActive() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Text() protected Text() Fields m_DisableFontTextureRebuiltCallback [NonSerialized] protected bool m_DisableFontTextureRebuiltCallback Field Value bool m_Text [TextArea(3, 10)] [SerializeField] protected string m_Text Field Value string s_DefaultText protected static Material s_DefaultText Field Value Material Properties alignByGeometry Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics. public bool alignByGeometry { get; set; } Property Value bool Remarks This can result in better fitting left and right alignment, but may result in incorrect positioning when attempting to overlay multiple fonts (such as a specialized outline font) on top of each other. alignment The positioning of the text reliative to its [[RectTransform]]. public TextAnchor alignment { get; set; } Property Value TextAnchor Examples //Create a Text GameObject by going to __Create__>__UI__>__Text__. Attach this script to the GameObject to see it working. using UnityEngine; using UnityEngine.UI; public class UITextAlignment : MonoBehaviour { Text m_Text; void Start() { //Fetch the Text Component m_Text = GetComponent<Text>(); //Switch the Text alignment to the middle m_Text.alignment = TextAnchor.MiddleCenter; } //This is a legacy function used for an instant demonstration. See the <a href=\"https://unity3d.com/learn/tutorials/s/user-interface-ui\">UI Tutorials pages </a> and [[wiki:UISystem|UI Section]] of the manual for more information on creating your own buttons etc. void OnGUI() { //Press this Button to change the Text alignment to the lower right if (GUI.Button(new Rect(0, 0, 100, 40), \"Lower Right\")) { m_Text.alignment = TextAnchor.LowerRight; } //Press this Button to change the Text alignment to the upper left if (GUI.Button(new Rect(150, 0, 100, 40), \"Upper Left\")) { m_Text.alignment = TextAnchor.UpperLeft; } } } Remarks This is the positioning of the Text relative to its RectTransform. You can alter this via script or in the Inspector of a Text component using the buttons in the Alignment section. cachedTextGenerator The cached TextGenerator used when generating visible Text. public TextGenerator cachedTextGenerator { get; } Property Value TextGenerator cachedTextGeneratorForLayout The cached TextGenerator used when determine Layout public TextGenerator cachedTextGeneratorForLayout { get; } Property Value TextGenerator flexibleHeight The extra relative height this layout element should be allocated if there is additional available space. public virtual float flexibleHeight { get; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when using UI elements. public class ExampleClass : MonoBehaviour { public Transform MyContentPanel; //Sets the flexible height on on all children in the content panel. public void Start() { //Assign all the children of the content panel to an array. LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>(); //For each child in the array change its LayoutElement's flexible height to 100. foreach (LayoutElement element in myLayoutElements) { element.flexibleHeight = 100f; } } } flexibleWidth The extra relative width this layout element should be allocated if there is additional available space. public virtual float flexibleWidth { get; } Property Value float Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when using UI elements. public class ExampleClass : MonoBehaviour { public Transform MyContentPanel; //Sets the flexible height on on all children in the content panel. public void Start() { //Assign all the children of the content panel to an array. LayoutElement[] myLayoutElements = MyContentPanel.GetComponentsInChildren<LayoutElement>(); //For each child in the array change its LayoutElement's flexible width to 200. foreach (LayoutElement element in myLayoutElements) { element.flexibleWidth = 200f; } } } Remarks Setting preferredWidth to -1 removed the preferredWidth. font The Font used by the text. public Font font { get; set; } Property Value Font Examples //Create a new Text GameObject by going to Create>UI>Text in the Editor. Attach this script to the Text GameObject. Then, choose or click and drag your own font into the Font section in the Inspector window. using UnityEngine; using UnityEngine.UI; public class TextFontExample : MonoBehaviour { Text m_Text; //Attach your own Font in the Inspector public Font m_Font; void Start() { //Fetch the Text component from the GameObject m_Text = GetComponent<Text>(); } void Update() { if (Input.GetKey(KeyCode.Space)) { //Change the Text Font to the Font attached in the Inspector m_Text.font = m_Font; //Change the Text to the message below m_Text.text = \"My Font Changed!\"; } } } Remarks This is the font used by the Text component. Use it to alter or return the font from the Text. There are many free fonts available online. fontSize The size that the Font should render at. Unit of measure is Points. public int fontSize { get; set; } Property Value int Examples //For this script to work, create a new Text GameObject by going to Create>U>Text. Attach the script to the Text GameObject. Make sure the GameObject has a RectTransform component. using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { Text m_Text; RectTransform m_RectTransform; void Start() { //Fetch the Text and RectTransform components from the GameObject m_Text = GetComponent<Text>(); m_RectTransform = GetComponent<RectTransform>(); } void Update() { //Press the space key to change the Font size if (Input.GetKey(KeyCode.Space)) { changeFontSize(); } } void changeFontSize() { //Change the Font Size to 16 m_Text.fontSize = 30; //Change the RectTransform size to allow larger fonts and sentences m_RectTransform.sizeDelta = new Vector2(m_Text.fontSize * 10, 100); //Change the m_Text text to the message below m_Text.text = \"I changed my Font size!\"; } } Remarks This is the size of the Font of the Text. Use this to fetch or change the size of the Font. When changing the Font size, remember to take into account the RectTransform of the Text. Larger Font sizes or messages may not fit in certain rectangle sizes and do not show in the Scene. Note: Point size is not consistent from one font to another. fontStyle Font style used by the Text's text. public FontStyle fontStyle { get; set; } Property Value FontStyle horizontalOverflow Horizontal overflow mode. public HorizontalWrapMode horizontalOverflow { get; set; } Property Value HorizontalWrapMode Remarks When set to HorizontalWrapMode.Overflow, text can exceed the horizontal boundaries of the Text graphic. When set to HorizontalWrapMode.Wrap, text will be word-wrapped to fit within the boundaries. layoutPriority The layout priority of this component. public virtual int layoutPriority { get; } Property Value int Remarks If multiple components on the same GameObject implement the ILayoutElement interface, the values provided by components that return a higher priority value are given priority. However, values less than zero are ignored. This way a component can override only select properties by leaving the remaning values to be -1 or other values less than zero. lineSpacing Line spacing, specified as a factor of font line height. A value of 1 will produce normal line spacing. public float lineSpacing { get; set; } Property Value float mainTexture Text's texture comes from the font. public override Texture mainTexture { get; } Property Value Texture minHeight The minimum height this layout element may be allocated. public virtual float minHeight { get; } Property Value float minWidth The minimum width this layout element may be allocated. public virtual float minWidth { get; } Property Value float pixelsPerUnit Provides information about how fonts are scale to the screen. public float pixelsPerUnit { get; } Property Value float Remarks For dynamic fonts, the value is equivalent to the scale factor of the canvas. For non-dynamic fonts, the value is calculated from the requested text size and the size from the font. preferredHeight The preferred height this layout element should be allocated if there is sufficient space. public virtual float preferredHeight { get; } Property Value float Remarks PreferredHeight can be set to -1 to remove the size. preferredWidth The preferred width this layout element should be allocated if there is sufficient space. public virtual float preferredWidth { get; } Property Value float Remarks PreferredWidth can be set to -1 to remove the size. resizeTextForBestFit Should the text be allowed to auto resized. public bool resizeTextForBestFit { get; set; } Property Value bool resizeTextMaxSize The maximum size the text is allowed to be. 1 = infinitely large. public int resizeTextMaxSize { get; set; } Property Value int resizeTextMinSize The minimum size the text is allowed to be. public int resizeTextMinSize { get; set; } Property Value int supportRichText Whether this Text will support rich text. public bool supportRichText { get; set; } Property Value bool text Text that's being displayed by the Text. public virtual string text { get; set; } Property Value string Examples using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { public Text m_MyText; void Start() { //Text sets your text to say this message m_MyText.text = \"This is my text\"; } void Update() { //Press the space key to change the Text message if (Input.GetKey(KeyCode.Space)) { m_MyText.text = \"My text has now changed.\"; } } } Remarks This is the string value of a Text component. Use this to read or edit the message displayed in Text. verticalOverflow Vertical overflow mode. public VerticalWrapMode verticalOverflow { get; set; } Property Value VerticalWrapMode Methods CalculateLayoutInputHorizontal() After this method is invoked, layout horizontal input properties should return up-to-date values. Children will already have up-to-date layout horizontal inputs when this methods is called. public virtual void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() After this method is invoked, layout vertical input properties should return up-to-date values. Children will already have up-to-date layout vertical inputs when this methods is called. public virtual void CalculateLayoutInputVertical() FontTextureChanged() Called by the FontUpdateTracker when the texture associated with a font is modified. public void FontTextureChanged() GetGenerationSettings(Vector2) Convenience function to populate the generation setting for the text. public TextGenerationSettings GetGenerationSettings(Vector2 extents) Parameters extents Vector2 The extents the text can draw in. Returns TextGenerationSettings Generated settings. GetTextAnchorPivot(TextAnchor) Convenience function to determine the vector offset of the anchor. public static Vector2 GetTextAnchorPivot(TextAnchor anchor) Parameters anchor TextAnchor Returns Vector2 OnDisable() Clear references. protected override void OnDisable() OnEnable() Mark the Graphic and the canvas as having been changed. protected override void OnEnable() OnPopulateMesh(VertexHelper) Callback function when a UI element needs to generate vertices. Fills the vertex buffer data. protected override void OnPopulateMesh(VertexHelper toFill) Parameters toFill VertexHelper Remarks Used by Text, UI.Image, and RawImage for example to generate vertices specific to their use case. UpdateGeometry() Call to update the geometry of the Graphic onto the CanvasRenderer. protected override void UpdateGeometry()"
  },
  "api/UnityEngine.UI.Toggle.ToggleEvent.html": {
    "href": "api/UnityEngine.UI.Toggle.ToggleEvent.html",
    "title": "Class Toggle.ToggleEvent | Snapshot",
    "keywords": "Class Toggle.ToggleEvent Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [Serializable] public class Toggle.ToggleEvent : UnityEvent<bool>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<bool> Toggle.ToggleEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<bool>.AddListener(UnityAction<bool>) UnityEvent<bool>.RemoveListener(UnityAction<bool>) UnityEvent<bool>.FindMethod_Impl(string, Type) UnityEvent<bool>.Invoke(bool) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/UnityEngine.UI.Toggle.ToggleTransition.html": {
    "href": "api/UnityEngine.UI.Toggle.ToggleTransition.html",
    "title": "Enum Toggle.ToggleTransition | Snapshot",
    "keywords": "Enum Toggle.ToggleTransition Namespace UnityEngine.UI Assembly UnityEngine.UI.dll Display settings for when a toggle is activated or deactivated. public enum Toggle.ToggleTransition Fields Fade = 1 Fade the toggle in / out smoothly. None = 0 Show / hide the toggle instantly"
  },
  "api/UnityEngine.UI.Toggle.html": {
    "href": "api/UnityEngine.UI.Toggle.html",
    "title": "Class Toggle | Snapshot",
    "keywords": "Class Toggle Namespace UnityEngine.UI Assembly UnityEngine.UI.dll A standard toggle that has an on / off state. [AddComponentMenu(\"UI/Toggle\", 30)] [RequireComponent(typeof(RectTransform))] public class Toggle : Selectable, IMoveHandler, IPointerDownHandler, IPointerUpHandler, IPointerEnterHandler, IPointerExitHandler, ISelectHandler, IDeselectHandler, IPointerClickHandler, ISubmitHandler, IEventSystemHandler, ICanvasElement Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable Toggle Implements IMoveHandler IPointerDownHandler IPointerUpHandler IPointerEnterHandler IPointerExitHandler ISelectHandler IDeselectHandler IPointerClickHandler ISubmitHandler IEventSystemHandler ICanvasElement Inherited Members Selectable.s_Selectables Selectable.s_SelectableCount Selectable.allSelectablesArray Selectable.allSelectableCount Selectable.allSelectables Selectable.AllSelectablesNoAlloc(Selectable[]) Selectable.m_CurrentIndex Selectable.navigation Selectable.transition Selectable.colors Selectable.spriteState Selectable.animationTriggers Selectable.targetGraphic Selectable.interactable Selectable.image Selectable.Awake() Selectable.OnCanvasGroupChanged() Selectable.IsInteractable() Selectable.OnTransformParentChanged() Selectable.currentSelectionState Selectable.InstantClearState() Selectable.DoStateTransition(Selectable.SelectionState, bool) Selectable.FindSelectable(Vector3) Selectable.FindSelectableOnLeft() Selectable.FindSelectableOnRight() Selectable.FindSelectableOnUp() Selectable.FindSelectableOnDown() Selectable.OnMove(AxisEventData) Selectable.IsHighlighted() Selectable.IsPressed() Selectable.OnPointerDown(PointerEventData) Selectable.OnPointerUp(PointerEventData) Selectable.OnPointerEnter(PointerEventData) Selectable.OnPointerExit(PointerEventData) Selectable.OnSelect(BaseEventData) Selectable.OnDeselect(BaseEventData) Selectable.Select() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The toggle component is a Selectable that controls a child graphic which displays the on / off state. When a toggle event occurs a callback is sent to any registered listeners of UI.Toggle._onValueChanged. Constructors Toggle() protected Toggle() Fields graphic Graphic the toggle should be working with. public Graphic graphic Field Value Graphic onValueChanged Allow for delegate-based subscriptions for faster events than 'eventReceiver', and allowing for multiple receivers. public Toggle.ToggleEvent onValueChanged Field Value Toggle.ToggleEvent Examples //Attach this script to a Toggle GameObject. To do this, go to Create>UI>Toggle. //Set your own Text in the Inspector window using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { Toggle m_Toggle; public Text m_Text; void Start() { //Fetch the Toggle GameObject m_Toggle = GetComponent<Toggle>(); //Add listener for when the state of the Toggle changes, to take action m_Toggle.onValueChanged.AddListener(delegate { ToggleValueChanged(m_Toggle); }); //Initialise the Text to say the first state of the Toggle m_Text.text = \"First Value : \" + m_Toggle.isOn; } //Output the new state of the Toggle into Text void ToggleValueChanged(Toggle change) { m_Text.text = \"New Value : \" + m_Toggle.isOn; } } toggleTransition Transition mode for the toggle. public Toggle.ToggleTransition toggleTransition Field Value Toggle.ToggleTransition Properties group Group the toggle belongs to. public ToggleGroup group { get; set; } Property Value ToggleGroup isOn Whether the toggle is currently active. public bool isOn { get; set; } Property Value bool Examples /Attach this script to a Toggle GameObject. To do this, go to Create>UI>Toggle. //Set your own Text in the Inspector window using UnityEngine; using UnityEngine.UI; public class Example : MonoBehaviour { Toggle m_Toggle; public Text m_Text; void Start() { //Fetch the Toggle GameObject m_Toggle = GetComponent<Toggle>(); //Add listener for when the state of the Toggle changes, and output the state m_Toggle.onValueChanged.AddListener(delegate { ToggleValueChanged(m_Toggle); }); //Initialize the Text to say whether the Toggle is in a positive or negative state m_Text.text = \"Toggle is : \" + m_Toggle.isOn; } //Output the new state of the Toggle into Text when the user uses the Toggle void ToggleValueChanged(Toggle change) { m_Text.text = \"Toggle is : \" + m_Toggle.isOn; } } Methods GraphicUpdateComplete() Callback sent when this ICanvasElement has completed Graphic rebuild. public virtual void GraphicUpdateComplete() LayoutComplete() Callback sent when this ICanvasElement has completed layout. public virtual void LayoutComplete() OnDestroy() protected override void OnDestroy() OnDidApplyAnimationProperties() protected override void OnDidApplyAnimationProperties() OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnPointerClick(PointerEventData) React to clicks. public virtual void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData OnSubmit(BaseEventData) public virtual void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData Rebuild(CanvasUpdate) Rebuild the element for the given stage. public virtual void Rebuild(CanvasUpdate executing) Parameters executing CanvasUpdate The current CanvasUpdate stage being rebuild. SetIsOnWithoutNotify(bool) Set isOn without invoking onValueChanged callback. public void SetIsOnWithoutNotify(bool value) Parameters value bool New Value for isOn. Start() Assume the correct visual state. protected override void Start()"
  },
  "api/UnityEngine.UI.ToggleGroup.html": {
    "href": "api/UnityEngine.UI.ToggleGroup.html",
    "title": "Class ToggleGroup | Snapshot",
    "keywords": "Class ToggleGroup Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"UI/Toggle Group\", 31)] [DisallowMultipleComponent] public class ToggleGroup : UIBehaviour Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour ToggleGroup Inherited Members UIBehaviour.Awake() UIBehaviour.OnDisable() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnRectTransformDimensionsChange() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnDidApplyAnimationProperties() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ToggleGroup() protected ToggleGroup() Fields m_Toggles protected List<Toggle> m_Toggles Field Value List<Toggle> Properties allowSwitchOff Is it allowed that no toggle is switched on? public bool allowSwitchOff { get; set; } Property Value bool Remarks If this setting is enabled, pressing the toggle that is currently switched on will switch it off, so that no toggle is switched on. If this setting is disabled, pressing the toggle that is currently switched on will not change its state. Note that even if allowSwitchOff is false, the Toggle Group will not enforce its constraint right away if no toggles in the group are switched on when the scene is loaded or when the group is instantiated. It will only prevent the user from switching a toggle off. Methods ActiveToggles() Returns the toggles in this group that are active. public IEnumerable<Toggle> ActiveToggles() Returns IEnumerable<Toggle> The active toggles in the group. Remarks Toggles belonging to this group but are not active either because their GameObject is inactive or because the Toggle component is disabled, are not returned as part of the list. AnyTogglesOn() Are any of the toggles on? public bool AnyTogglesOn() Returns bool Are and of the toggles on? EnsureValidState() Ensure that the toggle group still has a valid state. This is only relevant when a ToggleGroup is Started or a Toggle has been deleted from the group. public void EnsureValidState() GetFirstActiveToggle() Returns the toggle that is the first in the list of active toggles. public Toggle GetFirstActiveToggle() Returns Toggle The first active toggle from m_Toggles Remarks Get the active toggle for this group. As the group NotifyToggleOn(Toggle, bool) Notify the group that the given toggle is enabled. public void NotifyToggleOn(Toggle toggle, bool sendCallback = true) Parameters toggle Toggle The toggle that got triggered on. sendCallback bool If other toggles should send onValueChanged. OnEnable() protected override void OnEnable() RegisterToggle(Toggle) Register a toggle with the toggle group so it is watched for changes and notified if another toggle in the group changes. public void RegisterToggle(Toggle toggle) Parameters toggle Toggle The toggle to register with the group. SetAllTogglesOff(bool) Switch all toggles off. public void SetAllTogglesOff(bool sendCallback = true) Parameters sendCallback bool Remarks This method can be used to switch all toggles off, regardless of whether the allowSwitchOff property is enabled or not. Start() Because all the Toggles have registered themselves in the OnEnabled, Start should check to make sure at least one Toggle is active in groups that do not AllowSwitchOff protected override void Start() UnregisterToggle(Toggle) Unregister a toggle from the group. public void UnregisterToggle(Toggle toggle) Parameters toggle Toggle The toggle to remove."
  },
  "api/UnityEngine.UI.VertexHelper.html": {
    "href": "api/UnityEngine.UI.VertexHelper.html",
    "title": "Class VertexHelper | Snapshot",
    "keywords": "Class VertexHelper Namespace UnityEngine.UI Assembly UnityEngine.UI.dll A utility class that can aid in the generation of meshes for the UI. public class VertexHelper : IDisposable Inheritance object VertexHelper Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples using UnityEngine; using UnityEngine.UI; public class ExampleClass : MonoBehaviour { Mesh m; void Start() { Color32 color32 = Color.red; using (var vh = new VertexHelper()) { vh.AddVert(new Vector3(0, 0), color32, new Vector2(0f, 0f)); vh.AddVert(new Vector3(0, 100), color32, new Vector2(0f, 1f)); vh.AddVert(new Vector3(100, 100), color32, new Vector2(1f, 1f)); vh.AddVert(new Vector3(100, 0), color32, new Vector2(1f, 0f)); vh.AddTriangle(0, 1, 2); vh.AddTriangle(2, 3, 0); vh.FillMesh(m); } } } Remarks This class implements IDisposable to aid with memory management. Constructors VertexHelper() public VertexHelper() VertexHelper(Mesh) public VertexHelper(Mesh m) Parameters m Mesh Properties currentIndexCount Get the number of indices set on the VertexHelper. public int currentIndexCount { get; } Property Value int currentVertCount Current number of vertices in the buffer. public int currentVertCount { get; } Property Value int Methods AddTriangle(int, int, int) Add a triangle to the buffer. public void AddTriangle(int idx0, int idx1, int idx2) Parameters idx0 int index 0 idx1 int index 1 idx2 int index 2 AddUIVertexQuad(UIVertex[]) Add a quad to the stream. public void AddUIVertexQuad(UIVertex[] verts) Parameters verts UIVertex[] 4 Vertices representing the quad. AddUIVertexStream(List<UIVertex>, List<int>) Add a stream of custom UIVertex and corresponding indices. public void AddUIVertexStream(List<UIVertex> verts, List<int> indices) Parameters verts List<UIVertex> The custom stream of verts to add to the helpers internal data. indices List<int> The custom stream of indices to add to the helpers internal data. AddUIVertexTriangleStream(List<UIVertex>) Add a list of triangles to the stream. public void AddUIVertexTriangleStream(List<UIVertex> verts) Parameters verts List<UIVertex> Vertices to add. Length should be divisible by 3. AddVert(UIVertex) Add a single vertex to the stream. public void AddVert(UIVertex v) Parameters v UIVertex The vertex to add AddVert(Vector3, Color32, Vector4) Add a single vertex to the stream. public void AddVert(Vector3 position, Color32 color, Vector4 uv0) Parameters position Vector3 Position of the vert color Color32 Color of the vert uv0 Vector4 UV of the vert AddVert(Vector3, Color32, Vector4, Vector4, Vector3, Vector4) Add a single vertex to the stream. public void AddVert(Vector3 position, Color32 color, Vector4 uv0, Vector4 uv1, Vector3 normal, Vector4 tangent) Parameters position Vector3 Position of the vert color Color32 Color of the vert uv0 Vector4 UV of the vert uv1 Vector4 UV1 of the vert normal Vector3 Normal of the vert. tangent Vector4 Tangent of the vert AddVert(Vector3, Color32, Vector4, Vector4, Vector4, Vector4, Vector3, Vector4) Add a single vertex to the stream. public void AddVert(Vector3 position, Color32 color, Vector4 uv0, Vector4 uv1, Vector4 uv2, Vector4 uv3, Vector3 normal, Vector4 tangent) Parameters position Vector3 Position of the vert color Color32 Color of the vert uv0 Vector4 UV of the vert uv1 Vector4 UV1 of the vert uv2 Vector4 UV2 of the vert uv3 Vector4 UV3 of the vert normal Vector3 Normal of the vert. tangent Vector4 Tangent of the vert Clear() Clear all vertices from the stream. public void Clear() Dispose() Cleanup allocated memory. public void Dispose() FillMesh(Mesh) Fill the given mesh with the stream data. public void FillMesh(Mesh mesh) Parameters mesh Mesh GetUIVertexStream(List<UIVertex>) Create a stream of UI vertex (in triangles) from the stream. public void GetUIVertexStream(List<UIVertex> stream) Parameters stream List<UIVertex> PopulateUIVertex(ref UIVertex, int) Fill a UIVertex with data from index i of the stream. public void PopulateUIVertex(ref UIVertex vertex, int i) Parameters vertex UIVertex Vertex to populate i int Index to populate. SetUIVertex(UIVertex, int) Set a UIVertex at the given index. public void SetUIVertex(UIVertex vertex, int i) Parameters vertex UIVertex The vertex to fill i int the position in the current list to fill."
  },
  "api/UnityEngine.UI.VerticalLayoutGroup.html": {
    "href": "api/UnityEngine.UI.VerticalLayoutGroup.html",
    "title": "Class VerticalLayoutGroup | Snapshot",
    "keywords": "Class VerticalLayoutGroup Namespace UnityEngine.UI Assembly UnityEngine.UI.dll [AddComponentMenu(\"Layout/Vertical Layout Group\", 151)] public class VerticalLayoutGroup : HorizontalOrVerticalLayoutGroup, ILayoutElement, ILayoutGroup, ILayoutController Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour LayoutGroup HorizontalOrVerticalLayoutGroup VerticalLayoutGroup Implements ILayoutElement ILayoutGroup ILayoutController Inherited Members HorizontalOrVerticalLayoutGroup.m_Spacing HorizontalOrVerticalLayoutGroup.spacing HorizontalOrVerticalLayoutGroup.m_ChildForceExpandWidth HorizontalOrVerticalLayoutGroup.childForceExpandWidth HorizontalOrVerticalLayoutGroup.m_ChildForceExpandHeight HorizontalOrVerticalLayoutGroup.childForceExpandHeight HorizontalOrVerticalLayoutGroup.m_ChildControlWidth HorizontalOrVerticalLayoutGroup.childControlWidth HorizontalOrVerticalLayoutGroup.m_ChildControlHeight HorizontalOrVerticalLayoutGroup.childControlHeight HorizontalOrVerticalLayoutGroup.m_ChildScaleWidth HorizontalOrVerticalLayoutGroup.childScaleWidth HorizontalOrVerticalLayoutGroup.m_ChildScaleHeight HorizontalOrVerticalLayoutGroup.childScaleHeight HorizontalOrVerticalLayoutGroup.reverseArrangement HorizontalOrVerticalLayoutGroup.m_ReverseArrangement HorizontalOrVerticalLayoutGroup.CalcAlongAxis(int, bool) HorizontalOrVerticalLayoutGroup.SetChildrenAlongAxis(int, bool) LayoutGroup.m_Padding LayoutGroup.padding LayoutGroup.m_ChildAlignment LayoutGroup.childAlignment LayoutGroup.rectTransform LayoutGroup.m_Tracker LayoutGroup.rectChildren LayoutGroup.minWidth LayoutGroup.preferredWidth LayoutGroup.flexibleWidth LayoutGroup.minHeight LayoutGroup.preferredHeight LayoutGroup.flexibleHeight LayoutGroup.layoutPriority LayoutGroup.OnEnable() LayoutGroup.OnDisable() LayoutGroup.OnDidApplyAnimationProperties() LayoutGroup.GetTotalMinSize(int) LayoutGroup.GetTotalPreferredSize(int) LayoutGroup.GetTotalFlexibleSize(int) LayoutGroup.GetStartOffset(int, float) LayoutGroup.GetAlignmentOnAxis(int) LayoutGroup.SetLayoutInputForAxis(float, float, float, int) LayoutGroup.SetChildAlongAxis(RectTransform, int, float) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, int, float, float) LayoutGroup.SetChildAlongAxis(RectTransform, int, float, float) LayoutGroup.SetChildAlongAxisWithScale(RectTransform, int, float, float, float) LayoutGroup.OnRectTransformDimensionsChange() LayoutGroup.OnTransformChildrenChanged() LayoutGroup.SetProperty<T>(ref T, T) LayoutGroup.SetDirty() UIBehaviour.Awake() UIBehaviour.Start() UIBehaviour.OnDestroy() UIBehaviour.IsActive() UIBehaviour.OnBeforeTransformParentChanged() UIBehaviour.OnTransformParentChanged() UIBehaviour.OnCanvasGroupChanged() UIBehaviour.OnCanvasHierarchyChanged() UIBehaviour.IsDestroyed() MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors VerticalLayoutGroup() protected VerticalLayoutGroup() Methods CalculateLayoutInputHorizontal() Called by the layout system. Also see ILayoutElement public override void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Called by the layout system. Also see ILayoutElement public override void CalculateLayoutInputVertical() SetLayoutHorizontal() Called by the layout system. Also see ILayoutElement public override void SetLayoutHorizontal() SetLayoutVertical() Called by the layout system. Also see ILayoutElement public override void SetLayoutVertical()"
  },
  "api/UnityEngine.UI.html": {
    "href": "api/UnityEngine.UI.html",
    "title": "Namespace UnityEngine.UI | Snapshot",
    "keywords": "Namespace UnityEngine.UI Classes AnimationTriggers Structure that stores the state of an animation transition on a Selectable. AspectRatioFitter BaseMeshEffect Base class for effects that modify the generated Mesh. BaseVertexEffect Button A standard button that sends an event when clicked. Button.ButtonClickedEvent CanvasScaler CanvasUpdateRegistry A place where CanvasElements can register themselves for rebuilding. ClipperRegistry Registry class to keep track of all IClippers that exist in the scene Clipping Utility class to help when clipping using IClipper. ContentSizeFitter DefaultControls Utility class for creating default implementations of builtin UI controls. Dropdown Dropdown.DropdownEvent Dropdown.DropdownItem Dropdown.OptionData Dropdown.OptionDataList FontData FontUpdateTracker Utility class that is used to help with Text update. Graphic Base class for all UI components that should be derived from when creating new Graphic types. GraphicRaycaster GraphicRegistry Registry which maps a Graphic to the canvas it belongs to. GridLayoutGroup HorizontalLayoutGroup HorizontalOrVerticalLayoutGroup Abstract base class for HorizontalLayoutGroup and VerticalLayoutGroup to generalize common functionality. Image Image is a textured element in the UI hierarchy. InputField Turn a simple label into a interactable input field. InputField.EndEditEvent InputField.OnChangeEvent InputField.SubmitEvent LayoutElement LayoutGroup LayoutRebuilder Wrapper class for managing layout rebuilding of CanvasElement. LayoutUtility Utility functions for querying layout elements for their minimum, preferred, and flexible sizes. Mask MaskUtilities Mask related utility class. This class provides masking-specific utility functions. MaskableGraphic A Graphic that is capable of being masked out. MaskableGraphic.CullStateChangedEvent Outline PositionAsUV1 RawImage Displays a Texture2D for the UI System. RectMask2D ScrollRect ScrollRect.ScrollRectEvent Scrollbar Scrollbar.ScrollEvent Selectable Shadow Slider Slider.SliderEvent StencilMaterial Dynamic material class makes it possible to create custom materials on the fly on a per-Graphic basis, and still have them get cleaned up correctly. Text Toggle A standard toggle that has an on / off state. Toggle.ToggleEvent ToggleGroup VertexHelper A utility class that can aid in the generation of meshes for the UI. VerticalLayoutGroup Structs ColorBlock DefaultControls.Resources Object used to pass resources to use for the default controls. Navigation SpriteState Interfaces DefaultControls.IFactoryControls Factory interface to create a GameObject in this class. It is necessary to use this interface in the whole class so MenuOption and Editor can work using ObjectFactory and default Presets. ICanvasElement This is an element that can live on a Canvas. IClippable Interface for elements that can be clipped if they are under an IClipper IClipper Interface that can be used to recieve clipping callbacks as part of the canvas update loop. ILayoutController Base interface to be implemented by components that control the layout of RectTransforms. ILayoutElement A component is treated as a layout element by the auto layout system if it implements ILayoutElement. ILayoutGroup ILayoutGroup is an ILayoutController that should drive the RectTransforms of its children. ILayoutIgnorer A RectTransform will be ignored by the layout system if it has a component which implements ILayoutIgnorer. ILayoutSelfController ILayoutSelfController is an ILayoutController that should drive its own RectTransform. IMaskable This element is capable of being masked out. IMaterialModifier Use this interface to modify a Material that renders a Graphic. The Material is modified before the it is passed to the CanvasRenderer. IMeshModifier Interface which allows for the modification of verticies in a Graphic before they are passed to the CanvasRenderer. When a Graphic generates a list of vertices they are passed (in order) to any components on the GameObject that implement IMeshModifier. This component can modify the given Mesh. Enums AspectRatioFitter.AspectMode Specifies a mode to use to enforce an aspect ratio. CanvasScaler.ScaleMode Determines how UI elements in the Canvas are scaled. CanvasScaler.ScreenMatchMode Scale the canvas area with the width as reference, the height as reference, or something in between. CanvasScaler.Unit The possible physical unit types CanvasUpdate Values of 'update' called on a Canvas update. ContentSizeFitter.FitMode The size fit modes avaliable to use. GraphicRaycaster.BlockingObjects Type of raycasters to check against to check for canvas blocking elements. GridLayoutGroup.Axis The grid axis we are looking at. GridLayoutGroup.Constraint Constraint type on either the number of columns or rows. GridLayoutGroup.Corner Which corner is the starting corner for the grid. Image.FillMethod The possible fill method types for a Filled Image. Image.Origin180 Origin for the Image.FillMethod.Radial180. Image.Origin360 One of the points of the Arc for the Image.FillMethod.Radial360. Image.Origin90 Origin for the Image.FillMethod.Radial90. Image.OriginHorizontal Origin for the Image.FillMethod.Horizontal. Image.OriginVertical Origin for the Image.FillMethod.Vertical. Image.Type Image fill type controls how to display the image. InputField.CharacterValidation The type of characters that are allowed to be added to the string. InputField.ContentType Setting the content type acts as a shortcut for setting a combination of InputType, CharacterValidation, LineType, and TouchScreenKeyboardType InputField.EditState InputField.InputType Type of data expected by the input field mobile keyboard. InputField.LineType The LineType is used to describe the behavior of the InputField. Navigation.Mode ScrollRect.MovementType A setting for which behavior to use when content moves beyond the confines of its container. ScrollRect.ScrollbarVisibility Enum for which behavior to use for scrollbar visibility. Scrollbar.Direction Setting that indicates one of four directions the scrollbar will travel. Selectable.SelectionState An enumeration of selected states of objects Selectable.Transition Transition mode for a Selectable. Slider.Direction Setting that indicates one of four directions. Toggle.ToggleTransition Display settings for when a toggle is activated or deactivated. Delegates InputField.OnValidateInput"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Snapshot",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Snapshot",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Snapshot",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}